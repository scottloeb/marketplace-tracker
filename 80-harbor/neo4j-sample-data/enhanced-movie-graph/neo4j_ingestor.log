2025-03-06 20:36:17,807 - Neo4jIngestor - INFO - Connecting to Neo4j at bolt://localhost:7687
2025-03-06 20:36:17,807 - Neo4jIngestor - INFO - Processing all CQL files in .
2025-03-06 20:36:17,807 - Neo4jIngestor - INFO - Scanning directory: .
2025-03-06 20:36:17,807 - Neo4jIngestor - INFO - Found 2 CQL files
2025-03-06 20:36:17,807 - Neo4jIngestor - INFO - Building dependency graph
2025-03-06 20:36:17,807 - Neo4jIngestor - INFO - Analyzing file: ./step1-create-movie-graph.cql
2025-03-06 20:36:17,839 - Neo4jIngestor - INFO - Analyzing file: ./enhanced-movie-graph.cql
2025-03-06 20:36:17,869 - Neo4jIngestor - INFO - Dependency graph built with 2 nodes and 0 edges
2025-03-06 20:36:17,869 - Neo4jIngestor - INFO - Determining execution order
2025-03-06 20:36:17,869 - Neo4jIngestor - INFO - Execution order determined: 2 files
2025-03-06 20:36:17,869 - Neo4jIngestor - INFO - Executing: ./step1-create-movie-graph.cql
2025-03-06 20:36:17,921 - Neo4jIngestor - ERROR - Error executing ./step1-create-movie-graph.cql: {code: Neo.ClientError.Security.Unauthorized} {message: The client is unauthorized due to authentication failure.}
2025-03-06 20:36:17,929 - Neo4jIngestor - INFO - Closing Neo4j connection
2025-03-06 20:36:40,774 - Neo4jIngestor - INFO - Connecting to Neo4j at bolt://localhost:7687
2025-03-06 20:36:40,774 - Neo4jIngestor - INFO - Processing all CQL files in .
2025-03-06 20:36:40,774 - Neo4jIngestor - INFO - Scanning directory: .
2025-03-06 20:36:40,774 - Neo4jIngestor - INFO - Found 2 CQL files
2025-03-06 20:36:40,774 - Neo4jIngestor - INFO - Building dependency graph
2025-03-06 20:36:40,775 - Neo4jIngestor - INFO - Analyzing file: ./step1-create-movie-graph.cql
2025-03-06 20:36:40,805 - Neo4jIngestor - INFO - Analyzing file: ./enhanced-movie-graph.cql
2025-03-06 20:36:40,835 - Neo4jIngestor - INFO - Dependency graph built with 2 nodes and 0 edges
2025-03-06 20:36:40,835 - Neo4jIngestor - INFO - Determining execution order
2025-03-06 20:36:40,835 - Neo4jIngestor - INFO - Execution order determined: 2 files
2025-03-06 20:36:40,835 - Neo4jIngestor - INFO - Executing: ./step1-create-movie-graph.cql
2025-03-06 20:36:41,345 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes with various data types\nMATCH \n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (c)-[:DIRECTED {\n    year: 2010,\n    daysOnSet: 133,\n    satisfaction: 4.9,\n    awardNominations: 8,\n    completionDate: date('2009-12-15'),\n    premiereEvent: datetime('2010-07-08T19:00:00+01:00'),\n    durationMonths: 5,\n    isFirstCollaboration: false\n}]->(i)"
2025-03-06 20:36:41,357 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships\nMATCH\n  (l:Person:GeneratedByClaudeAI {name: 'Leonardo DiCaprio'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (l)-[:ACTED_IN {\n    roles: ['Dom Cobb'],\n    salary: 20000000,\n    screenTimeMinutes: 148,\n    startDate: date('2009-07-13'),\n    endDate: date('2009-11-22'),\n    scheduleConflicts: false,\n    criticScore: 95,\n    audienceScore: 91,\n    awardNominations: 3\n}]->(i)"
2025-03-06 20:36:41,369 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Marion Cotillard'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (m)-[:ACTED_IN {\n    roles: ['Mal Cobb'],\n    salary: 2000000,\n    screenTimeMinutes: 45,\n    startDate: date('2009-08-10'),\n    endDate: date('2009-09-30'),\n    scheduleConflicts: false,\n    performanceRating: 4.8\n}]->(i)"
2025-03-06 20:36:41,380 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Joseph Gordon-Levitt'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (j)-[:ACTED_IN {\n    roles: ['Arthur'],\n    salary: 1500000,\n    screenTimeMinutes: 73,\n    startDate: date('2009-07-13'),\n    endDate: date('2009-10-15'),\n    stuntPerformed: true,\n    trainingPeriodWeeks: 3\n}]->(i)"
2025-03-06 20:36:41,393 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Production relationships\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (w)-[:PRODUCED {\n    investment: 160000000,\n    return: 836800000,\n    roi: 5.23,\n    contractSigned: date('2008-12-01'),\n    studioShare: 0.6,\n    directorShare: 0.15,\n    producerShare: 0.15,\n    topCastShare: 0.1,\n    marketingBudget: 100000000,\n    isProfitable: true,\n    marketingStart: datetime('2010-01-15T00:00:00Z')\n}]->(i)"
2025-03-06 20:36:41,403 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Inception Principal Photography'})\nCREATE (w)-[:FINANCED {\n    contractDate: date('2008-12-01'),\n    amount: 160000000,\n    isFullyPaid: true\n}]->(p)"
2025-03-06 20:36:41,413 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Inception Principal Photography'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 4,\n    durationDays: 9,\n    locationCount: 6,\n    dailyAverageCost: 480000,\n    scheduleAdherence: 0.95,\n    weatherDelaysDays: 5,\n    originalScheduledEnd: date('2009-11-15')\n}]->(i)"
2025-03-06 20:36:41,417 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Review relationships\nMATCH\n  (j:Person {name: 'Jessica Thompson'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'A Mind-Bending Masterpiece'})\nCREATE (j)-[:WROTE {\n    date: date('2010-07-18'),\n    timeSpentMinutes: 45,\n    wordCount: 523,\n    isVerified: true,\n    submissionTime: time('14:23:45+01:00')\n}]->(r)"
2025-03-06 20:36:41,427 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'A Mind-Bending Masterpiece'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 128634,\n    shares: 4327,\n    comments: 1252,\n    featuredDurationDays: 14,\n    publicationDateTime: datetime('2010-07-18T14:30:00+01:00')\n}]->(i)"
2025-03-06 20:36:41,440 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationship\nMATCH\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (i)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2011,\n    ceremony: 83,\n    isWinner: false,\n    ceremonyDate: date('2011-02-27'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 2345,\n    votesAgainst: 2567\n}]->(a)"
2025-03-06 20:36:41,450 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (c)-[:NOMINATED_FOR {\n    category: 'Best Director',\n    year: 2011,\n    ceremony: 83,\n    isWinner: false,\n    ceremonyDate: date('2011-02-27'),\n    announcementTime: localtime('20:30:00'),\n    votesFor: 2132,\n    votesAgainst: 2780\n}]->(a)"
2025-03-06 20:36:41,460 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Additional connections to existing graph\nMATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (t:Person {name: 'Tom Hanks'}) // Original person from the graph\nCREATE (c)-[:KNOWS {\n    since: date('2002-01-15'),\n    projects: 3,\n    relationship: 'Professional',\n    lastContact: datetime('2023-05-15T14:30:00Z'),\n    nextMeeting: datetime('2025-04-10T09:00:00Z')\n}]->(t)"
2025-03-06 20:36:41,473 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (l:Person:GeneratedByClaudeAI {name: 'Leonardo DiCaprio'}),\n  (t:Person {name: 'Tom Hanks'}) // Original person from the graph\nCREATE (l)-[:KNOWS {\n    since: date('1997-10-12'),\n    relationship: 'Friends',\n    lastCollaboration: date('2015-12-25'),\n    durationYears: 26,\n    project1: 'The Revenant',\n    year1: 2015,\n    project2: 'Django Unchained',\n    year2: 2012\n}]->(t)"
2025-03-06 20:36:41,528 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes with various data types\nMATCH \n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (c)-[:DIRECTED {\n    year: 2010,\n    daysOnSet: 133,\n    satisfaction: 4.9,\n    awardNominations: 8,\n    completionDate: date('2009-12-15'),\n    premiereEvent: datetime('2010-07-08T19:00:00+01:00'),\n    durationMonths: 5,\n    isFirstCollaboration: false\n}]->(i)"
2025-03-06 20:36:41,533 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships\nMATCH\n  (l:Person:GeneratedByClaudeAI {name: 'Leonardo DiCaprio'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (l)-[:ACTED_IN {\n    roles: ['Dom Cobb'],\n    salary: 20000000,\n    screenTimeMinutes: 148,\n    startDate: date('2009-07-13'),\n    endDate: date('2009-11-22'),\n    scheduleConflicts: false,\n    criticScore: 95,\n    audienceScore: 91,\n    awardNominations: 3\n}]->(i)"
2025-03-06 20:36:41,539 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Marion Cotillard'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (m)-[:ACTED_IN {\n    roles: ['Mal Cobb'],\n    salary: 2000000,\n    screenTimeMinutes: 45,\n    startDate: date('2009-08-10'),\n    endDate: date('2009-09-30'),\n    scheduleConflicts: false,\n    performanceRating: 4.8\n}]->(i)"
2025-03-06 20:36:41,543 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Joseph Gordon-Levitt'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (j)-[:ACTED_IN {\n    roles: ['Arthur'],\n    salary: 1500000,\n    screenTimeMinutes: 73,\n    startDate: date('2009-07-13'),\n    endDate: date('2009-10-15'),\n    stuntPerformed: true,\n    trainingPeriodWeeks: 3\n}]->(i)"
2025-03-06 20:36:41,546 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Production relationships\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (w)-[:PRODUCED {\n    investment: 160000000,\n    return: 836800000,\n    roi: 5.23,\n    contractSigned: date('2008-12-01'),\n    studioShare: 0.6,\n    directorShare: 0.15,\n    producerShare: 0.15,\n    topCastShare: 0.1,\n    marketingBudget: 100000000,\n    isProfitable: true,\n    marketingStart: datetime('2010-01-15T00:00:00Z')\n}]->(i)"
2025-03-06 20:36:41,549 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Inception Principal Photography'})\nCREATE (w)-[:FINANCED {\n    contractDate: date('2008-12-01'),\n    amount: 160000000,\n    isFullyPaid: true\n}]->(p)"
2025-03-06 20:36:41,552 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Inception Principal Photography'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 4,\n    durationDays: 9,\n    locationCount: 6,\n    dailyAverageCost: 480000,\n    scheduleAdherence: 0.95,\n    weatherDelaysDays: 5,\n    originalScheduledEnd: date('2009-11-15')\n}]->(i)"
2025-03-06 20:36:41,555 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Review relationships\nMATCH\n  (j:Person {name: 'Jessica Thompson'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'A Mind-Bending Masterpiece'})\nCREATE (j)-[:WROTE {\n    date: date('2010-07-18'),\n    timeSpentMinutes: 45,\n    wordCount: 523,\n    isVerified: true,\n    submissionTime: time('14:23:45+01:00')\n}]->(r)"
2025-03-06 20:36:41,558 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'A Mind-Bending Masterpiece'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 128634,\n    shares: 4327,\n    comments: 1252,\n    featuredDurationDays: 14,\n    publicationDateTime: datetime('2010-07-18T14:30:00+01:00')\n}]->(i)"
2025-03-06 20:36:41,560 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationship\nMATCH\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (i)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2011,\n    ceremony: 83,\n    isWinner: false,\n    ceremonyDate: date('2011-02-27'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 2345,\n    votesAgainst: 2567\n}]->(a)"
2025-03-06 20:36:41,564 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (c)-[:NOMINATED_FOR {\n    category: 'Best Director',\n    year: 2011,\n    ceremony: 83,\n    isWinner: false,\n    ceremonyDate: date('2011-02-27'),\n    announcementTime: localtime('20:30:00'),\n    votesFor: 2132,\n    votesAgainst: 2780\n}]->(a)"
2025-03-06 20:36:41,568 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Additional connections to existing graph\nMATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (t:Person {name: 'Tom Hanks'}) // Original person from the graph\nCREATE (c)-[:KNOWS {\n    since: date('2002-01-15'),\n    projects: 3,\n    relationship: 'Professional',\n    lastContact: datetime('2023-05-15T14:30:00Z'),\n    nextMeeting: datetime('2025-04-10T09:00:00Z')\n}]->(t)"
2025-03-06 20:36:41,571 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (l:Person:GeneratedByClaudeAI {name: 'Leonardo DiCaprio'}),\n  (t:Person {name: 'Tom Hanks'}) // Original person from the graph\nCREATE (l)-[:KNOWS {\n    since: date('1997-10-12'),\n    relationship: 'Friends',\n    lastCollaboration: date('2015-12-25'),\n    durationYears: 26,\n    project1: 'The Revenant',\n    year1: 2015,\n    project2: 'Django Unchained',\n    year2: 2012\n}]->(t)"
2025-03-06 20:36:41,780 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes with various data types\nMATCH \n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'})\nCREATE (c)-[:DIRECTED {\n    year: 2014,\n    daysOnSet: 124,\n    satisfaction: 4.8,\n    awardNominations: 5,\n    completionDate: date('2014-09-22'),\n    premiereEvent: datetime('2014-10-26T18:30:00Z'),\n    durationMonths: 4,\n    isFirstCollaboration: false\n}]->(i)"
2025-03-06 20:36:41,791 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships for Interstellar\nMATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Matthew McConaughey'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'})\nCREATE (m)-[:ACTED_IN {\n    roles: ['Joseph Cooper'],\n    salary: 15000000,\n    screenTimeMinutes: 135,\n    startDate: date('2013-08-13'),\n    endDate: date('2013-12-14'),\n    scheduleConflicts: false,\n    criticScore: 92,\n    audienceScore: 94,\n    awardNominations: 4\n}]->(i)"
2025-03-06 20:36:41,918 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Jessica Chastain'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'})\nCREATE (j)-[:ACTED_IN {\n    roles: ['Murphy Cooper'],\n    salary: 3500000,\n    screenTimeMinutes: 45,\n    startDate: date('2013-09-10'),\n    endDate: date('2013-11-15'),\n    scheduleConflicts: true,\n    performanceRating: 4.7\n}]->(i)"
2025-03-06 20:36:41,931 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships for Arrival\nMATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Amy Adams'}),\n  (r:Movie:GeneratedByClaudeAI {title: 'Arrival'})\nCREATE (a)-[:ACTED_IN {\n    roles: ['Dr. Louise Banks'],\n    salary: 5000000,\n    screenTimeMinutes: 104,\n    startDate: date('2015-06-07'),\n    endDate: date('2015-08-28'),\n    scheduleConflicts: false,\n    criticScore: 94,\n    audienceScore: 89,\n    awardNominations: 5\n}]->(r)"
2025-03-06 20:36:41,941 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Director to Movie relationships for Arrival\nMATCH\n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'}),\n  (r:Movie:GeneratedByClaudeAI {title: 'Arrival'})\nCREATE (d)-[:DIRECTED {\n    year: 2016,\n    daysOnSet: 81,\n    satisfaction: 4.9,\n    awardNominations: 8,\n    completionDate: date('2016-08-15'),\n    premiereEvent: datetime('2016-09-01T20:15:00+02:00'),\n    durationMonths: 3,\n    isFirstCollaboration: true\n}]->(r)"
2025-03-06 20:36:41,946 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Studio relationships\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'})\nCREATE (w)-[:PRODUCED {\n    investment: 165000000,\n    return: 701800000,\n    roi: 4.25,\n    contractSigned: date('2012-08-15'),\n    studioShare: 0.55,\n    directorShare: 0.2,\n    producerShare: 0.15,\n    topCastShare: 0.1,\n    marketingBudget: 80000000,\n    isProfitable: true,\n    marketingStart: datetime('2014-05-15T00:00:00Z')\n}]->(i)"
2025-03-06 20:36:41,958 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Studio:GeneratedByClaudeAI {name: 'A24'}),\n  (r:Movie:GeneratedByClaudeAI {title: 'Arrival'})\nCREATE (a)-[:PRODUCED {\n    investment: 47000000,\n    return: 203400000,\n    roi: 4.33,\n    contractSigned: date('2014-11-10'),\n    studioShare: 0.6,\n    directorShare: 0.15,\n    producerShare: 0.15,\n    topCastShare: 0.1,\n    marketingBudget: 30000000,\n    isProfitable: true,\n    marketingStart: datetime('2016-04-12T00:00:00Z')\n}]->(r)"
2025-03-06 20:36:41,970 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Interstellar Principal Photography'})\nCREATE (w)-[:FINANCED {\n    contractDate: date('2012-08-15'),\n    amount: 165000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2013-01-10T00:00:00Z'),\n    transferTime2: datetime('2013-04-15T00:00:00Z'),\n    transferTime3: datetime('2013-07-01T00:00:00Z'),\n    paymentDate1: date('2013-01-10'),\n    paymentAmount1: 50000000,\n    paymentDate2: date('2013-04-15'),\n    paymentAmount2: 65000000,\n    paymentDate3: date('2013-07-01'),\n    paymentAmount3: 50000000\n}]->(p)"
2025-03-06 20:36:41,981 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Studio:GeneratedByClaudeAI {name: 'A24'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Arrival Principal Photography'})\nCREATE (a)-[:FINANCED {\n    contractDate: date('2014-11-10'),\n    amount: 47000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2015-01-15T00:00:00Z'),\n    transferTime2: datetime('2015-03-30T00:00:00Z'),\n    paymentDate1: date('2015-01-15'),\n    paymentAmount1: 22000000,\n    paymentDate2: date('2015-03-30'),\n    paymentAmount2: 25000000\n}]->(p)"
2025-03-06 20:36:41,984 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Interstellar Principal Photography'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 4,\n    durationDays: 1,\n    locationCount: 8,\n    dailyAverageCost: 520000,\n    scheduleAdherence: 0.92,\n    weatherDelaysDays: 8,\n    originalScheduledEnd: date('2013-12-05')\n}]->(i)"
2025-03-06 20:36:41,995 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Arrival Principal Photography'}),\n  (r:Movie:GeneratedByClaudeAI {title: 'Arrival'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 2,\n    durationDays: 21,\n    locationCount: 5,\n    dailyAverageCost: 290000,\n    scheduleAdherence: 0.98,\n    weatherDelaysDays: 2,\n    originalScheduledEnd: date('2015-08-25')\n}]->(r)"
2025-03-06 20:36:41,998 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Review relationships\nMATCH\n  (j:Person {name: 'James Thompson'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'A Cosmic Emotional Journey'})\nCREATE (j)-[:WROTE {\n    date: date('2014-11-10'),\n    timeSpentMinutes: 50,\n    wordCount: 612,\n    isVerified: true,\n    submissionTime: time('16:42:18+01:00')\n}]->(r)"
2025-03-06 20:36:42,007 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person {name: 'Angela Scope'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'A Linguistic Masterpiece'})\nCREATE (a)-[:WROTE {\n    date: date('2016-11-14'),\n    timeSpentMinutes: 45,\n    wordCount: 568,\n    isVerified: true,\n    submissionTime: time('20:15:36+01:00')\n}]->(r)"
2025-03-06 20:36:42,010 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'A Cosmic Emotional Journey'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 152487,\n    shares: 6842,\n    comments: 2156,\n    featuredDurationDays: 21,\n    publicationDateTime: datetime('2014-11-10T17:00:00+01:00')\n}]->(i)"
2025-03-06 20:36:42,013 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'A Linguistic Masterpiece'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Arrival'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 98245,\n    shares: 3621,\n    comments: 1583,\n    featuredDurationDays: 14,\n    publicationDateTime: datetime('2016-11-14T21:00:00+01:00')\n}]->(i)"
2025-03-06 20:36:42,019 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationships\nMATCH\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (i)-[:NOMINATED_FOR {\n    category: 'Best Original Score',\n    year: 2015,\n    ceremony: 87,\n    isWinner: false,\n    ceremonyDate: date('2015-02-22'),\n    announcementTime: localtime('21:15:00'),\n    votesFor: 2856,\n    votesAgainst: 3012\n}]->(a)"
2025-03-06 20:36:42,029 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'}),\n  (b:Ceremony:GeneratedByClaudeAI {name: 'BAFTA Film Awards'})\nCREATE (i)-[:NOMINATED_FOR {\n    category: 'Best Original Music',\n    year: 2015,\n    ceremony: 68,\n    isWinner: true,\n    ceremonyDate: date('2015-02-08'),\n    announcementTime: localtime('20:45:00'),\n    votesFor: 1523,\n    votesAgainst: 1287\n}]->(b)"
2025-03-06 20:36:42,040 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Movie:GeneratedByClaudeAI {title: 'Arrival'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (r)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2017,\n    ceremony: 89,\n    isWinner: false,\n    ceremonyDate: date('2017-02-26'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 2785,\n    votesAgainst: 3142\n}]->(a)"
2025-03-06 20:36:42,052 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (d)-[:NOMINATED_FOR {\n    category: 'Best Director',\n    year: 2017,\n    ceremony: 89,\n    isWinner: false,\n    ceremonyDate: date('2017-02-26'),\n    announcementTime: localtime('21:00:00'),\n    votesFor: 2456,\n    votesAgainst: 3471\n}]->(a)"
2025-03-06 20:36:42,064 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "// Professional relationships between people\nMATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'})\nCREATE (c)-[:KNOWS {\n    since: date('2010-09-12'),\n    projects: 0,\n    relationship: 'Professional Acquaintance',\n    lastContact: datetime('2023-11-15T11:30:00Z'),\n    nextMeeting: datetime('2025-06-20T14:00:00Z')\n}]->(d)"
2025-03-06 20:36:42,074 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (j))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Matthew McConaughey'}),\n  (j:Person:GeneratedByClaudeAI {name: 'Jessica Chastain'})\nCREATE (m)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'Interstellar',\n    firstYear: 2014,\n    chemistry: 4.8,\n    interviews: 15,\n    jointSceneMinutes: 12,\n    relationship: 'Co-stars',\n    nextProjectPlanned: date('2026-03-15')\n}]->(j)"
2025-03-06 20:36:42,084 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (m))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (l:Person:GeneratedByClaudeAI {name: 'Leonardo DiCaprio'}),\n  (m:Person:GeneratedByClaudeAI {name: 'Matthew McConaughey'})\nCREATE (l)-[:KNOWS {\n    since: date('2006-11-23'),\n    relationship: 'Friends',\n    lastMeeting: date('2023-12-15'),\n    durationYears: 17,\n    commonFriends: 8,\n    commonProjects: 0\n}]->(m)"
2025-03-06 20:36:42,096 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (j))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Amy Adams'}),\n  (j:Person:GeneratedByClaudeAI {name: 'Jessica Chastain'})\nCREATE (a)-[:KNOWS {\n    since: date('2011-05-07'),\n    relationship: 'Friends and Colleagues',\n    lastMeeting: date('2024-01-22'),\n    durationYears: 13,\n    commonAwards: 5,\n    commonGenres: ['Drama', 'Sci-Fi']\n}]->(j)"
2025-03-06 20:36:42,113 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Connection with original graph\nMATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (t:Person {name: 'Tom Cruise'}) // Original person from the graph\nCREATE (c)-[:ADMIRES {\n    since: date('1998-07-25'),\n    projects: 0,\n    relationship: 'Professional Admiration',\n    lastContact: null,\n    inspirationLevel: 4.7,\n    influencedWorks: ['Inception', 'Tenet']\n}]->(t)"
2025-03-06 20:36:42,123 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'}),\n  (r:Person {name: 'Rob Reiner'}) // Original person from the graph\nCREATE (d)-[:INSPIRED_BY {\n    since: date('1987-10-15'),\n    favouriteFilm: 'Stand By Me',\n    impactLevel: 4.8,\n    mentionedInInterviews: 12,\n    influencedWorks: ['Arrival', 'Prisoners']\n}]->(r)"
2025-03-06 20:36:42,161 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 16, column: 1, offset: 480} for query: "// Create additional node types\nCREATE (TeslaModel:CarModel:GeneratedByClaudeAI {\n    name: 'Tesla Model S',\n    introduced: date('2012-06-22'),\n    featured: true,\n    featuredInMovies: ['Interstellar Behind the Scenes'],\n    featuredInYears: [2014],\n    productPlacementCost: 0,\n    vehicleType: 'Electric Sedan',\n    maxSpeed: 322,\n    maxSpeedUnit: 'km/h',\n    manufactureLocation: 'Fremont, California',\n    manufactureLocationLat: 37.4924,\n    manufactureLocationLong: -121.9465\n})\nWITH 1 as dummy\nMATCH (m:Movie:GeneratedByClaudeAI {title: 'Interstellar'}),\n      (c:CarModel:GeneratedByClaudeAI {name: 'Tesla Model S'})\nCREATE (c)-[:FEATURED_IN {\n    screenTimeSeconds: 45,\n    isProminentPlacement: false,\n    sceneCount: 2,\n    firstAppearance: time('00:32:15'),\n    lastAppearance: time('01:45:22'),\n    contractDate: date('2013-05-12')\n}]->(m)"
2025-03-06 20:36:42,176 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 343} for query: "// Create prop node\nCREATE (InceptionTotem:Prop:GeneratedByClaudeAI {\n    name: 'Spinning Top',\n    movie: 'Inception',\n    material: 'Metal',\n    weight: 0.12,\n    weightUnit: 'kg',\n    createdDate: date('2009-05-22'),\n    screenTime: duration({minutes: 6, seconds: 45}),\n    isIconic: true,\n    auctionValue: 15000,\n    copiesMade: 5\n})\nWITH 1 as dummy\nMATCH (i:Movie:GeneratedByClaudeAI {title: 'Inception'}),\n      (p:Prop:GeneratedByClaudeAI {name: 'Spinning Top'})\nCREATE (p)-[:USED_IN {\n    scenes: ['Opening', 'Hotel', 'Ending'],\n    sceneCount: 3,\n    firstAppearance: time('00:04:15'),\n    lastAppearance: time('02:28:15'),\n    isCloseup: true,\n    significance: 'Critical plot device'\n}]->(i)"
2025-03-06 20:36:42,190 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 15, column: 1, offset: 487} for query: "// Create soundtrack node\nCREATE (InterstellarSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'Interstellar: Original Motion Picture Soundtrack',\n    composer: 'Hans Zimmer',\n    released: date('2014-11-18'),\n    duration: duration({minutes: 71, seconds: 49}),\n    trackCount: 16,\n    recordingStudio: 'Air Lyndhurst Hall, London',\n    recordingStudioLat: 51.5454,\n    recordingStudioLong: -0.1388,\n    peakChartPosition: 2,\n    salesUnits: 250000,\n    streamingCount: 150000000\n})\nWITH 1 as dummy\nMATCH (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'}),\n      (s:Soundtrack:GeneratedByClaudeAI {title: 'Interstellar: Original Motion Picture Soundtrack'})\nCREATE (s)-[:COMPOSED_FOR {\n    contractDate: date('2013-01-15'),\n    completion: date('2014-09-15'),\n    nominatedAwards: ['Academy Award', 'BAFTA', 'Golden Globe'],\n    wonAwards: ['BAFTA'],\n    spotifyStreams: 250000000,\n    youtubeViews: 45000000\n}]->(i)"
2025-03-06 20:36:42,205 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 16, column: 1, offset: 420} for query: "// Create location node\nCREATE (IcelandLocation:FilmingLocation:GeneratedByClaudeAI {\n    name: 'Svínafellsjökull',\n    country: 'Iceland',\n    region: 'Vatnajökull National Park',\n    latitude: 64.0080,\n    longitude: -16.3832,\n    elevation: 120,\n    elevationUnit: 'm',\n    climate: 'Subarctic',\n    permitCost: 85000,\n    permitCurrency: 'USD',\n    firstUsed: date('2013-09-25'),\n    lastUsed: date('2013-10-12')\n})\nWITH 1 as dummy\nMATCH (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'}),\n      (l:FilmingLocation:GeneratedByClaudeAI {name: 'Svínafellsjökull'})\nCREATE (i)-[:FILMED_AT {\n    startDate: date('2013-09-25'),\n    endDate: date('2013-10-12'),\n    sceneCount: 8,\n    totalDays: 18,\n    weatherDelayDays: 3,\n    crewSize: 132,\n    logisticsCost: 450000,\n    accommodationCost: 320000,\n    characterPresent: ['Cooper', 'Brand']\n}]->(l)"
2025-03-06 20:36:42,434 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes with various data types\nMATCH \n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (d)-[:DIRECTED {\n    year: 2017,\n    daysOnSet: 136,\n    satisfaction: 4.9,\n    awardNominations: 7,\n    completionDate: date('2017-07-15'),\n    premiereEvent: datetime('2017-10-03T19:30:00+01:00'),\n    durationMonths: 4,\n    isFirstCollaboration: false\n}]->(b)"
2025-03-06 20:36:42,444 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (j:Person:GeneratedByClaudeAI {name: 'Jonathan Demme'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'})\nCREATE (j)-[:DIRECTED {\n    year: 1991,\n    daysOnSet: 105,\n    satisfaction: 4.9,\n    awardNominations: 10,\n    completionDate: date('1990-11-15'),\n    premiereEvent: datetime('1991-01-30T19:00:00-05:00'),\n    durationMonths: 5,\n    isFirstCollaboration: true\n}]->(s)"
2025-03-06 20:36:42,456 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships\nMATCH\n  (r:Person:GeneratedByClaudeAI {name: 'Ryan Gosling'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (r)-[:ACTED_IN {\n    roles: ['Officer K'],\n    salary: 10000000,\n    screenTimeMinutes: 143,\n    startDate: date('2016-07-12'),\n    endDate: date('2016-11-25'),\n    scheduleConflicts: false,\n    criticScore: 94,\n    audienceScore: 90,\n    awardNominations: 3\n}]->(b)"
2025-03-06 20:36:42,466 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Jodie Foster'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'})\nCREATE (j)-[:ACTED_IN {\n    roles: ['Clarice Starling'],\n    salary: 1200000,\n    screenTimeMinutes: 102,\n    startDate: date('1989-11-15'),\n    endDate: date('1990-03-01'),\n    scheduleConflicts: false,\n    criticScore: 97,\n    audienceScore: 95,\n    awardNominations: 8,\n    awardWins: 5\n}]->(s)"
2025-03-06 20:36:42,477 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Anthony Hopkins'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'})\nCREATE (a)-[:ACTED_IN {\n    roles: ['Dr. Hannibal Lecter'],\n    salary: 1000000,\n    screenTimeMinutes: 16,\n    startDate: date('1989-12-10'),\n    endDate: date('1990-01-15'),\n    scheduleConflicts: false,\n    criticScore: 99,\n    audienceScore: 97,\n    awardNominations: 8,\n    awardWins: 6\n}]->(s)"
2025-03-06 20:36:42,487 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (h:Person:GeneratedByClaudeAI {name: 'Hailee Steinfeld'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (h)-[:VOICED_IN {\n    roles: ['Gwen Stacy / Spider-Gwen'],\n    salary: 750000,\n    recordingDays: 14,\n    startDate: date('2017-04-15'),\n    endDate: date('2018-06-22'),\n    recordingSessions: 8,\n    linesCount: 425,\n    performanceRating: 4.8\n}]->(s)"
2025-03-06 20:36:42,498 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "// Studio relationships\nMATCH\n  (a:Studio:GeneratedByClaudeAI {name: 'A24'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (a)-[:CO_PRODUCED {\n    investment: 45000000,\n    return: 63000000,\n    roi: 1.4,\n    contractSigned: date('2015-06-22'),\n    studioShare: 0.15,\n    marketingContribution: 12000000,\n    isProfitable: true,\n    marketingStart: datetime('2017-03-15T00:00:00Z'),\n    profitDate: date('2018-02-28')\n}]->(b)"
2025-03-06 20:36:42,509 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (w)-[:PRODUCED {\n    investment: 140000000,\n    return: 196300000,\n    roi: 1.4,\n    contractSigned: date('2015-02-10'),\n    studioShare: 0.6,\n    directorShare: 0.1,\n    producerShare: 0.1,\n    topCastShare: 0.05,\n    marketingBudget: 150000000,\n    isProfitable: false,\n    marketingStart: datetime('2017-01-15T00:00:00Z')\n}]->(b)"
2025-03-06 20:36:42,520 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (o:Studio:GeneratedByClaudeAI {name: 'Orion Pictures'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'})\nCREATE (o)-[:PRODUCED {\n    investment: 19000000,\n    return: 272700000,\n    roi: 14.35,\n    contractSigned: date('1989-06-15'),\n    studioShare: 0.65,\n    directorShare: 0.08,\n    producerShare: 0.07,\n    topCastShare: 0.2,\n    marketingBudget: 9000000,\n    isProfitable: true,\n    marketingStart: datetime('1990-11-15T00:00:00Z'),\n    breakEvenDate: date('1991-03-22')\n}]->(s)"
2025-03-06 20:36:42,531 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (sv))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Studio:GeneratedByClaudeAI {name: 'Sony Pictures'}),\n  (sv:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (s)-[:PRODUCED {\n    investment: 90000000,\n    return: 375500000,\n    roi: 4.17,\n    contractSigned: date('2015-09-30'),\n    studioShare: 0.7,\n    directorShare: 0.08,\n    producerShare: 0.12,\n    topCastShare: 0.1,\n    marketingBudget: 110000000,\n    isProfitable: true,\n    marketingStart: datetime('2018-05-15T00:00:00Z'),\n    breakEvenDate: date('2019-01-18')\n}]->(sv)"
2025-03-06 20:36:42,540 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Blade Runner 2049 Principal Photography'})\nCREATE (w)-[:FINANCED {\n    contractDate: date('2015-02-10'),\n    amount: 140000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2016-02-15T00:00:00Z'),\n    transferTime2: datetime('2016-05-12T00:00:00Z'),\n    transferTime3: datetime('2016-06-30T00:00:00Z'),\n    paymentDate1: date('2016-02-15'),\n    paymentAmount1: 40000000,\n    paymentDate2: date('2016-05-12'),\n    paymentAmount2: 50000000,\n    paymentDate3: date('2016-06-30'),\n    paymentAmount3: 50000000\n}]->(p)"
2025-03-06 20:36:42,556 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (o:Studio:GeneratedByClaudeAI {name: 'Orion Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'The Silence of the Lambs Principal Photography'})\nCREATE (o)-[:FINANCED {\n    contractDate: date('1989-06-15'),\n    amount: 19000000,\n    isFullyPaid: true,\n    transferTime1: datetime('1989-08-22T00:00:00Z'),\n    transferTime2: datetime('1989-10-30T00:00:00Z'),\n    paymentDate1: date('1989-08-22'),\n    paymentAmount1: 9000000,\n    paymentDate2: date('1989-10-30'),\n    paymentAmount2: 10000000\n}]->(p)"
2025-03-06 20:36:42,572 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Studio:GeneratedByClaudeAI {name: 'Sony Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Spider-Verse Animation Production'})\nCREATE (s)-[:FINANCED {\n    contractDate: date('2015-09-30'),\n    amount: 90000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2016-01-15T00:00:00Z'),\n    transferTime2: datetime('2016-12-15T00:00:00Z'),\n    transferTime3: datetime('2017-06-30T00:00:00Z'),\n    transferTime4: datetime('2018-01-15T00:00:00Z'),\n    paymentDate1: date('2016-01-15'),\n    paymentAmount1: 20000000,\n    paymentDate2: date('2016-12-15'),\n    paymentAmount2: 25000000,\n    paymentDate3: date('2017-06-30'),\n    paymentAmount3: 30000000,\n    paymentDate4: date('2018-01-15'),\n    paymentAmount4: 15000000\n}]->(p)"
2025-03-06 20:36:42,582 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Blade Runner 2049 Principal Photography'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 4,\n    durationDays: 13,\n    locationCount: 7,\n    dailyAverageCost: 580000,\n    scheduleAdherence: 0.94,\n    weatherDelaysDays: 6,\n    originalScheduledEnd: date('2016-11-15')\n}]->(b)"
2025-03-06 20:36:42,591 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'The Silence of the Lambs Principal Photography'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 3,\n    durationDays: 16,\n    locationCount: 12,\n    dailyAverageCost: 150000,\n    scheduleAdherence: 0.96,\n    weatherDelaysDays: 4,\n    originalScheduledEnd: date('1990-02-20')\n}]->(s)"
2025-03-06 20:36:42,604 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Spider-Verse Animation Production'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 28,\n    durationDays: 16,\n    animationStudios: 3,\n    dailyAverageCost: 110000,\n    scheduleAdherence: 0.92,\n    technologyDelaysDays: 45,\n    originalScheduledEnd: date('2018-08-15'),\n    animationFrames: 168452,\n    renderingHours: 55800\n}]->(s)"
2025-03-06 20:36:42,611 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Review relationships\nMATCH\n  (a:Person {name: 'Angela Scope'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'A Worthy Successor to a Classic'})\nCREATE (a)-[:WROTE {\n    date: date('2017-10-10'),\n    timeSpentMinutes: 55,\n    wordCount: 645,\n    isVerified: true,\n    submissionTime: time('18:23:45+01:00')\n}]->(r)"
2025-03-06 20:36:42,621 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person {name: 'Jessica Thompson'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'Masterful Psychological Horror'})\nCREATE (j)-[:WROTE {\n    date: date('1991-02-20'),\n    timeSpentMinutes: 60,\n    wordCount: 712,\n    isVerified: true,\n    submissionTime: time('14:15:30-05:00'),\n    publicationName: 'Film Journal',\n    isRetroReview: false\n}]->(r)"
2025-03-06 20:36:42,630 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Person {name: 'Paul Blythe'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'Animation Revolution'})\nCREATE (p)-[:WROTE {\n    date: date('2018-12-18'),\n    timeSpentMinutes: 50,\n    wordCount: 685,\n    isVerified: true,\n    submissionTime: time('21:34:18-08:00')\n}]->(r)"
2025-03-06 20:36:42,639 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'A Worthy Successor to a Classic'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 183452,\n    shares: 7562,\n    comments: 2875,\n    featuredDurationDays: 28,\n    publicationDateTime: datetime('2017-10-10T19:30:00+01:00')\n}]->(b)"
2025-03-06 20:36:42,648 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'Masterful Psychological Horror'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 345782,\n    shares: 2845,\n    comments: 1923,\n    featuredDurationDays: 45,\n    publicationDateTime: datetime('1991-02-20T15:30:00-05:00'),\n    reprintCount: 8,\n    digitalArchiveDate: date('1998-05-12')\n}]->(s)"
2025-03-06 20:36:42,658 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'Animation Revolution'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 256893,\n    shares: 15478,\n    comments: 3562,\n    featuredDurationDays: 30,\n    publicationDateTime: datetime('2018-12-18T22:15:00-08:00')\n}]->(s)"
2025-03-06 20:36:42,669 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationships\nMATCH\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (b)-[:NOMINATED_FOR {\n    category: 'Best Cinematography',\n    year: 2018,\n    ceremony: 90,\n    isWinner: true,\n    ceremonyDate: date('2018-03-04'),\n    announcementTime: localtime('20:15:00'),\n    votesFor: 4567,\n    votesAgainst: 2123\n}]->(a)"
2025-03-06 20:36:42,679 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'}),\n  (g:Ceremony:GeneratedByClaudeAI {name: 'Golden Globe Awards'})\nCREATE (b)-[:NOMINATED_FOR {\n    category: 'Best Original Score',\n    year: 2018,\n    ceremony: 75,\n    isWinner: false,\n    ceremonyDate: date('2018-01-07'),\n    announcementTime: localtime('21:30:00'),\n    votesFor: 32,\n    votesAgainst: 58\n}]->(g)"
2025-03-06 20:36:42,690 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (s)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 1992,\n    ceremony: 64,\n    isWinner: true,\n    ceremonyDate: date('1992-03-30'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 4786,\n    votesAgainst: 1234\n}]->(a)"
2025-03-06 20:36:42,701 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Jodie Foster'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (j)-[:NOMINATED_FOR {\n    category: 'Best Actress',\n    year: 1992,\n    ceremony: 64,\n    isWinner: true,\n    ceremonyDate: date('1992-03-30'),\n    announcementTime: localtime('20:25:00'),\n    votesFor: 4562,\n    votesAgainst: 1458,\n    speechDuration: duration({minutes: 2, seconds: 47})\n}]->(a)"
2025-03-06 20:36:42,713 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Anthony Hopkins'}),\n  (c:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (a)-[:NOMINATED_FOR {\n    category: 'Best Actor',\n    year: 1992,\n    ceremony: 64,\n    isWinner: true,\n    ceremonyDate: date('1992-03-30'),\n    announcementTime: localtime('20:55:00'),\n    votesFor: 4876,\n    votesAgainst: 1144,\n    speechDuration: null\n}]->(c)"
2025-03-06 20:36:42,718 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Jonathan Demme'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (j)-[:NOMINATED_FOR {\n    category: 'Best Director',\n    year: 1992,\n    ceremony: 64,\n    isWinner: true,\n    ceremonyDate: date('1992-03-30'),\n    announcementTime: localtime('21:15:00'),\n    votesFor: 4352,\n    votesAgainst: 1668,\n    speechDuration: duration({minutes: 3, seconds: 12})\n}]->(a)"
2025-03-06 20:36:42,724 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (s)-[:NOMINATED_FOR {\n    category: 'Best Animated Feature Film',\n    year: 2019,\n    ceremony: 91,\n    isWinner: true,\n    ceremonyDate: date('2019-02-24'),\n    announcementTime: localtime('19:35:00'),\n    votesFor: 4879,\n    votesAgainst: 1121\n}]->(a)"
2025-03-06 20:36:42,736 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Annie Awards'})\nCREATE (s)-[:NOMINATED_FOR {\n    category: 'Best Animated Feature',\n    year: 2019,\n    ceremony: 46,\n    isWinner: true,\n    ceremonyDate: date('2019-02-02'),\n    announcementTime: localtime('20:45:00'),\n    categories: 7,\n    wins: 7\n}]->(a)"
2025-03-06 20:36:42,746 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "// Professional relationships between people\nMATCH\n  (r:Person:GeneratedByClaudeAI {name: 'Ryan Gosling'}),\n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'})\nCREATE (r)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'Blade Runner 2049',\n    firstYear: 2017,\n    chemistry: 4.9,\n    interviews: 28,\n    relationship: 'Actor-Director',\n    nextProjectPlanned: date('2026-06-15')\n}]->(d)"
2025-03-06 20:36:42,756 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Jodie Foster'}),\n  (a:Person:GeneratedByClaudeAI {name: 'Anthony Hopkins'})\nCREATE (j)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'The Silence of the Lambs',\n    firstYear: 1991,\n    chemistry: 5.0,\n    interviews: 45,\n    jointSceneMinutes: 22,\n    relationship: 'Co-stars',\n    reunionAttempts: 3\n}]->(a)"
2025-03-06 20:36:42,765 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (jd))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Jodie Foster'}),\n  (jd:Person:GeneratedByClaudeAI {name: 'Jonathan Demme'})\nCREATE (j)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'The Silence of the Lambs',\n    firstYear: 1991,\n    chemistry: 4.9,\n    interviews: 32,\n    relationship: 'Actor-Director',\n    awards: ['Academy Award', 'Golden Globe', 'BAFTA']\n}]->(jd)"
2025-03-06 20:36:42,775 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (jd))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Anthony Hopkins'}),\n  (jd:Person:GeneratedByClaudeAI {name: 'Jonathan Demme'})\nCREATE (a)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'The Silence of the Lambs',\n    firstYear: 1991,\n    chemistry: 4.8,\n    interviews: 28,\n    relationship: 'Actor-Director',\n    filmedDays: 14\n}]->(jd)"
2025-03-06 20:36:42,785 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (h:Person:GeneratedByClaudeAI {name: 'Hailee Steinfeld'}),\n  (r:Person:GeneratedByClaudeAI {name: 'Ryan Gosling'})\nCREATE (h)-[:KNOWS {\n    since: date('2016-08-12'),\n    relationship: 'Professional Acquaintances',\n    lastMeeting: date('2023-05-18'),\n    durationYears: 7,\n    commonFriends: 5,\n    commonProjects: 0\n}]->(r)"
2025-03-06 20:36:42,798 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (j))} {position: line: 1, column: 9, offset: 8} for query: "// Connection with original graph\nMATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Anthony Hopkins'}),\n  (j:Person {name: 'Jack Nicholson'}) // Original person from the graph\nCREATE (a)-[:ADMIRES {\n    since: date('1975-11-08'),\n    projects: 0,\n    relationship: 'Professional Admiration',\n    lastContact: date('2019-06-22'),\n    inspirationLevel: 4.9,\n    influencedWorks: ['The Silence of the Lambs', 'The Father']\n}]->(j)"
2025-03-06 20:36:42,809 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Jodie Foster'}),\n  (r:Person {name: 'Renee Zellweger'}) // Original person from the graph\nCREATE (j)-[:KNOWS {\n    since: date('1995-03-15'),\n    relationship: 'Friends',\n    lastMeeting: date('2022-11-28'),\n    durationYears: 28,\n    commonEvents: 15,\n    commonFriends: 8\n}]->(r)"
2025-03-06 20:36:42,836 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 387} for query: "// Create custom prop node for The Silence of the Lambs\nCREATE (MothCocoon:Prop:GeneratedByClaudeAI {\n    name: 'Death\\'s-head Hawkmoth Cocoon',\n    movie: 'The Silence of the Lambs',\n    material: 'Resin and mixed media',\n    weight: 0.05,\n    weightUnit: 'kg',\n    createdDate: date('1989-10-15'),\n    screenTime: duration({minutes: 0, seconds: 45}),\n    isIconic: true,\n    auctionValue: 8500,\n    copiesMade: 15\n})\nWITH 1 as dummy\nMATCH (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'}),\n      (p:Prop:GeneratedByClaudeAI {name: 'Death\\'s-head Hawkmoth Cocoon'})\nCREATE (p)-[:USED_IN {\n    scenes: ['Autopsy', 'Evidence'],\n    sceneCount: 2,\n    firstAppearance: time('00:35:22'),\n    lastAppearance: time('00:36:07'),\n    isCloseup: true,\n    significance: 'Critical clue'\n}]->(s)"
2025-03-06 20:36:42,851 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (st))} {position: line: 15, column: 1, offset: 488} for query: "// Create soundtrack node for Silence of the Lambs\nCREATE (SilenceSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'The Silence of the Lambs: Original Motion Picture Soundtrack',\n    composer: 'Howard Shore',\n    released: date('1991-02-12'),\n    duration: duration({minutes: 53, seconds: 20}),\n    trackCount: 15,\n    recordingStudio: 'CTS Studios, London',\n    recordingStudioLat: 51.5074,\n    recordingStudioLong: -0.1278,\n    peakChartPosition: 120,\n    salesUnits: 75000,\n    streamingCount: 12000000\n})\nWITH 1 as dummy\nMATCH (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'}),\n      (st:Soundtrack:GeneratedByClaudeAI {title: 'The Silence of the Lambs: Original Motion Picture Soundtrack'})\nCREATE (st)-[:COMPOSED_FOR {\n    contractDate: date('1989-08-15'),\n    completion: date('1990-12-10'),\n    nominatedAwards: ['Saturn Award'],\n    wonAwards: [],\n    spotifyStreams: 8500000,\n    youtubeViews: 6200000\n}]->(s)"
2025-03-06 20:36:42,865 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 16, column: 1, offset: 413} for query: "// Create location node for Silence of the Lambs\nCREATE (PittsburghLocation:FilmingLocation:GeneratedByClaudeAI {\n    name: 'Western Pennsylvania',\n    country: 'USA',\n    region: 'Pittsburgh area',\n    latitude: 40.4406,\n    longitude: -79.9959,\n    elevation: 232,\n    elevationUnit: 'm',\n    climate: 'Temperate',\n    permitCost: 45000,\n    permitCurrency: 'USD',\n    firstUsed: date('1989-11-15'),\n    lastUsed: date('1990-02-10')\n})\nWITH 1 as dummy\nMATCH (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'}),\n      (l:FilmingLocation:GeneratedByClaudeAI {name: 'Western Pennsylvania'})\nCREATE (s)-[:FILMED_AT {\n    startDate: date('1989-11-15'),\n    endDate: date('1990-02-10'),\n    sceneCount: 32,\n    totalDays: 87,\n    weatherDelayDays: 8,\n    crewSize: 85,\n    logisticsCost: 180000,\n    accommodationCost: 145000,\n    characterPresent: ['Clarice Starling', 'Jack Crawford', 'Buffalo Bill']\n}]->(l)"
2025-03-06 20:36:42,879 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (sv))} {position: line: 14, column: 1, offset: 400} for query: "// Create animation studio node\nCREATE (SonyAnimation:AnimationStudio:GeneratedByClaudeAI {\n    name: 'Sony Pictures Animation',\n    founded: date('2002-05-09'),\n    headquartersLat: 34.0211,\n    headquartersLong: -118.3787,\n    employeeCount: 800,\n    animationStyle: 'Mixed/Various',\n    specialization: 'Feature Animation',\n    yearlyProductions: 2.5,\n    technologyBudget: 45000000,\n    awardWins: 15\n})\nWITH 1 as dummy\nMATCH (s:AnimationStudio:GeneratedByClaudeAI {name: 'Sony Pictures Animation'}),\n      (sv:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (s)-[:ANIMATED {\n    startDate: date('2016-06-15'),\n    endDate: date('2018-09-15'),\n    teamSize: 142,\n    leadAnimators: 28,\n    technicalInnovations: ['Comic book visual style', 'Mixed frame rates', 'Hand-drawn elements'],\n    softwareUsed: ['Maya', 'Houdini', 'Proprietary tools'],\n    renderingHours: 55800,\n    totalFrames: 168452\n}]->(sv)"
2025-03-06 20:36:42,894 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 14, column: 1, offset: 363} for query: "// Create director relationships for Spider-Verse\nCREATE (BobP:Person:GeneratedByClaudeAI {\n    name: 'Bob Persichetti',\n    born: 1973,\n    birthdate: date('1973-01-17'),\n    nationality: 'American',\n    oscarWins: 1,\n    isActive: true,\n    firstFilm: datetime('2018-12-14T00:00:00Z'),\n    animationBackground: true,\n    specialization: 'Animation Direction',\n    yearsInIndustry: 25\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Bob Persichetti'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (p)-[:CO_DIRECTED {\n    year: 2018,\n    daysOnProject: 912,\n    satisfaction: 4.9,\n    awardNominations: 12,\n    awardWins: 8,\n    completionDate: date('2018-10-01'),\n    premiereEvent: datetime('2018-12-01T19:00:00-08:00'),\n    durationMonths: 30,\n    responsibility: 'Animation Direction',\n    isFirstDirectingRole: true\n}]->(s)"
2025-03-06 20:36:42,909 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 15, column: 1, offset: 424} for query: "// Create costume designer for Silence of the Lambs\nCREATE (ColetteA:Person:GeneratedByClaudeAI {\n    name: 'Colleen Atwood',\n    born: 1948,\n    birthdate: date('1948-09-25'),\n    nationality: 'American',\n    oscarWins: 4,\n    oscarNominations: 12,\n    isActive: true,\n    firstFilm: datetime('1984-11-09T00:00:00Z'),\n    designStyle: 'Period-accurate with subtle character elements',\n    heightInMeters: 1.65,\n    specialization: 'Costume Design'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Colleen Atwood'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'})\nCREATE (p)-[:DESIGNED_COSTUMES_FOR {\n    year: 1991,\n    costumesCreated: 248,\n    budget: 380000,\n    awardNominations: 3,\n    awardWins: 1,\n    startDate: date('1989-09-15'),\n    completionDate: date('1989-11-10'),\n    specialCostumes: ['Buffalo Bill', 'Hannibal Lecter restraints', 'FBI uniforms'],\n    researchHours: 120\n}]->(s)"
2025-03-06 20:36:42,924 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 15, column: 1, offset: 427} for query: "// Create cinematographer for Blade Runner 2049\nCREATE (RogerD:Person:GeneratedByClaudeAI {\n    name: 'Roger Deakins',\n    born: 1949,\n    birthdate: date('1949-05-24'),\n    nationality: 'British',\n    oscarWins: 2,\n    oscarNominations: 15,\n    isActive: true,\n    firstFilm: datetime('1984-01-20T00:00:00Z'),\n    knighted: date('2021-02-12'),\n    cameraPreference: 'ARRI Alexa',\n    visualStyle: 'Naturalistic lighting with striking composition'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Roger Deakins'}),\n      (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (p)-[:CINEMATOGRAPHY_FOR {\n    year: 2017,\n    cameras: ['ARRI Alexa XT', 'ARRI Alexa Mini'],\n    lenses: ['Zeiss Master Primes', 'Cooke S4'],\n    awardNominations: 15,\n    awardWins: 12,\n    startDate: date('2016-07-12'),\n    completionDate: date('2016-11-25'),\n    signature_shots: ['Las Vegas ruins', 'Snow fight', 'Ocean wall'],\n    lighting_setups: 137\n}]->(b)"
2025-03-06 20:36:42,940 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 15, column: 1, offset: 417} for query: "// Create fan community node for Blade Runner\nCREATE (BladeRunnerFandom:FanCommunity:GeneratedByClaudeAI {\n    name: 'Blade Runner Fan Community',\n    established: date('1982-06-25'),\n    expansion2049: date('2017-10-06'),\n    memberCount: 356000,\n    onlinePlatforms: 5,\n    annualConventions: 3,\n    largestEventAttendance: 8500,\n    contentCreators: 15800,\n    fanfictionCount: 12500,\n    fanArtCount: 35600,\n    academicPapers: 248\n})\nWITH 1 as dummy\nMATCH (f:FanCommunity:GeneratedByClaudeAI {name: 'Blade Runner Fan Community'}),\n      (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (f)-[:ENGAGED_WITH {\n    anticipationScore: 9.5,\n    reviewsSubmitted: 45800,\n    averageRating: 8.7,\n    onlineDiscussions: 12500,\n    theoriesGenerated: 3400,\n    preReleaseEvents: 28,\n    postReleaseEvents: 112,\n    merchandiseSales: 3800000,\n    reissuesCampaigns: 5\n}]->(b)"
2025-03-06 20:36:42,956 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 14, column: 1, offset: 420} for query: "// Create technical innovation node for Spider-Verse\nCREATE (SpiderVerseInnovation:TechnicalInnovation:GeneratedByClaudeAI {\n    name: 'Spider-Verse Animation Style',\n    developedDate: date('2016-09-25'),\n    patented: date('2019-03-15'),\n    teamSize: 38,\n    developmentCost: 15000000,\n    mainApplication: 'Animated Feature Films',\n    secondaryApplications: 3,\n    technicalPapersPublished: 8,\n    industryAwards: 12,\n    adoptionRate: 0.65\n})\nWITH 1 as dummy\nMATCH (t:TechnicalInnovation:GeneratedByClaudeAI {name: 'Spider-Verse Animation Style'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (t)-[:USED_IN {\n    implementationDate: date('2016-09-25'),\n    fullIntegrationDate: date('2018-05-15'),\n    developmentPhases: 4,\n    testingIterations: 15,\n    successMetric: 'Visual distinction and audience response',\n    successScore: 9.8,\n    industryInfluence: 'Major',\n    subsequentAdopters: 12\n}]->(s)"
2025-03-06 20:36:42,971 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 15, column: 1, offset: 402} for query: "// Create music composer for Spider-Verse\nCREATE (DanielP:Person:GeneratedByClaudeAI {\n    name: 'Daniel Pemberton',\n    born: 1977,\n    birthdate: date('1977-11-03'),\n    nationality: 'British',\n    awardWins: 5,\n    awardNominations: 15,\n    isActive: true,\n    firstFilm: datetime('2011-05-25T00:00:00Z'),\n    musicStyle: 'Eclectic with electronic elements',\n    instrumentsPlayed: 6,\n    studioLocation: 'London'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Daniel Pemberton'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (p)-[:COMPOSED_MUSIC_FOR {\n    year: 2018,\n    tracksComposed: 25,\n    recordingDays: 42,\n    instrumentsUsed: 28,\n    electronicallyProduced: true,\n    collaboratingArtists: 8,\n    startDate: date('2017-05-15'),\n    completionDate: date('2018-09-10'),\n    signature_themes: ['Miles\\' Theme', 'Spider-Heroes', 'Leap of Faith'],\n    recording_studios: 3\n}]->(s)"
2025-03-06 20:36:43,290 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes with various data types\nMATCH \n  (o:Person:GeneratedByClaudeAI {name: 'Orson Welles'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (o)-[:DIRECTED {\n    year: 1941,\n    daysOnSet: 101,\n    satisfaction: 4.8,\n    studioPressure: 'High',\n    completionDate: date('1940-10-23'),\n    premiereEvent: datetime('1941-05-01T19:30:00-05:00'),\n    durationMonths: 3,\n    isFirstFeatureFilm: true,\n    age: 25\n}]->(c)"
2025-03-06 20:36:43,301 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (b:Person:GeneratedByClaudeAI {name: 'Bong Joon-ho'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (b)-[:DIRECTED {\n    year: 2019,\n    daysOnSet: 74,\n    satisfaction: 4.9,\n    awardWins: 213,\n    completionDate: date('2018-11-25'),\n    premiereEvent: datetime('2019-05-21T19:00:00+02:00'),\n    durationMonths: 4,\n    isFirstInternationalBreakout: false,\n    personalThemes: ['Class inequality', 'Family dynamics', 'Dark humor']\n}]->(p)"
2025-03-06 20:36:43,312 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (m))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (l:Person:GeneratedByClaudeAI {name: 'Luc Jacquet'}),\n  (m:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'})\nCREATE (l)-[:DIRECTED {\n    year: 2005,\n    daysInAntarctica: 314,\n    fieldworkPhases: 3,\n    satisfaction: 4.7,\n    awardWins: 24,\n    completionDate: date('2004-11-15'),\n    premiereEvent: datetime('2005-01-26T20:00:00+01:00'),\n    durationMonths: 13,\n    isFirstMajorDocumentary: true,\n    scientificConsultants: 8\n}]->(m)"
2025-03-06 20:36:43,322 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships\nMATCH\n  (o:Person:GeneratedByClaudeAI {name: 'Orson Welles'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (o)-[:ACTED_IN {\n    roles: ['Charles Foster Kane'],\n    salary: 100000,\n    screenTimeMinutes: 95,\n    startDate: date('1940-07-22'),\n    endDate: date('1940-10-23'),\n    scheduleConflicts: false,\n    dualRoleComplexity: 'Very High',\n    makeupHoursDaily: 3.5,\n    ageTransformationYears: 44\n}]->(c)"
2025-03-06 20:36:43,333 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Person:GeneratedByClaudeAI {name: 'Song Kang-ho'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (s)-[:ACTED_IN {\n    roles: ['Kim Ki-taek'],\n    salary: 750000,\n    screenTimeMinutes: 85,\n    startDate: date('2018-05-18'),\n    endDate: date('2018-09-19'),\n    scheduleConflicts: false,\n    criticScore: 98,\n    audienceScore: 95,\n    awardNominations: 36,\n    awardWins: 22,\n    languagesSpoken: ['Korean']\n}]->(p)"
2025-03-06 20:36:43,344 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "// Cinematographer relationship\nMATCH\n  (g:Person:GeneratedByClaudeAI {name: 'Gregg Toland'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (g)-[:CINEMATOGRAPHY_FOR {\n    year: 1941,\n    cameras: ['Mitchell BNC', 'Mitchell NC'],\n    lenses: ['Bausch & Lomb Super Baltar', 'Cooke S1'],\n    innovationsTested: ['Ultra-deep focus', 'Low-angle shots', 'Ceiling shots'],\n    innovationsSuccessRate: [0.95, 0.98, 0.92],\n    startDate: date('1940-07-22'),\n    completionDate: date('1940-10-23'),\n    signatureTechniques: ['Deep focus', 'Dramatic lighting', 'Low-angle shots'],\n    technicalChallengesOvercome: 12\n}]->(c)"
2025-03-06 20:36:43,359 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 334} for query: "// Narrator relationship\nCREATE (MorganF:Person:GeneratedByClaudeAI {\n    name: 'Morgan Freeman',\n    born: 1937,\n    birthdate: date('1937-06-01'),\n    nationality: 'American',\n    oscarWins: 1,\n    oscarNominations: 5,\n    isActive: true,\n    voiceRecognition: 9.8,\n    voiceType: 'Authoritative baritone',\n    narratorRanking: 1\n})\nWITH 1 as dummy\nMATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Morgan Freeman'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'})\nCREATE (m)-[:NARRATED {\n    year: 2005,\n    language: 'English',\n    recordingDays: 5,\n    studioLocation: 'Los Angeles',\n    recordingSessionHours: 25,\n    scriptPages: 65,\n    audienceImpactRating: 9.5,\n    recordingCompletionDate: date('2004-12-05'),\n    rerecordingRequired: false\n}]->(p)"
2025-03-06 20:36:43,371 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "// Writer relationship\nMATCH\n  (o:Person:GeneratedByClaudeAI {name: 'Orson Welles'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (o)-[:WROTE {\n    year: 1940,\n    coWriter: 'Herman J. Mankiewicz',\n    draftCount: 7,\n    finalPageCount: 156,\n    writingStartDate: date('1939-07-01'),\n    writingCompletionDate: date('1940-05-15'),\n    inspirationSources: ['William Randolph Hearst', 'Joseph Pulitzer', 'Samuel Insull'],\n    controversyLevel: 'Very High',\n    scriptNominations: 2,\n    scriptWins: 1\n}]->(c)"
2025-03-06 20:36:43,397 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (b:Person:GeneratedByClaudeAI {name: 'Bong Joon-ho'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (b)-[:WROTE {\n    year: 2018,\n    coWriter: 'Han Jin-won',\n    draftCount: 5,\n    finalPageCount: 131,\n    writingStartDate: date('2017-01-15'),\n    writingCompletionDate: date('2018-02-20'),\n    inspirationSources: ['Class inequality', 'Social architecture', 'Personal experiences'],\n    thematicElements: ['Class struggle', 'Infiltration', 'Deception', 'Symbiosis'],\n    scriptNominations: 23,\n    scriptWins: 18\n}]->(p)"
2025-03-06 20:36:43,415 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "// Studio relationships\nMATCH\n  (r:Studio:GeneratedByClaudeAI {name: 'RKO Pictures'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (r)-[:PRODUCED {\n    investment: 839727,\n    return: 1585634,\n    roi: 1.89,\n    contractSigned: date('1939-07-22'),\n    studioRisk: 'Very High',\n    executiveSupport: 'Mixed',\n    marketingBudget: 150000,\n    isProfitable: true,\n    marketingStartDate: datetime('1941-01-15T00:00:00-05:00'),\n    controversyHandling: 'Aggressive defense',\n    heartNegativePressureLevel: 9.7\n}]->(c)"
2025-03-06 20:36:43,426 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Studio:GeneratedByClaudeAI {name: 'CJ Entertainment'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (c)-[:PRODUCED {\n    investment: 11400000,\n    return: 263100000,\n    roi: 23.08,\n    contractSigned: date('2017-09-15'),\n    studioShare: 0.6,\n    directorShare: 0.2,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 25000000,\n    isProfitable: true,\n    marketingStart: datetime('2019-02-15T00:00:00+09:00'),\n    internationalMarketingBoost: datetime('2019-05-25T00:00:00+02:00'),\n    breakEvenDate: date('2019-08-01')\n}]->(p)"
2025-03-06 20:36:43,441 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (d:Studio:GeneratedByClaudeAI {name: 'Disneynature'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'})\nCREATE (d)-[:DISTRIBUTED {\n    territories: ['North America'],\n    acquisitionDate: date('2005-01-30'),\n    acquisitionCost: 1000000,\n    marketingBudget: 15000000,\n    marketingStart: datetime('2005-04-15T00:00:00-04:00'),\n    isProfitable: true,\n    returnOnInvestment: 38.4,\n    educationalProgramCreated: true,\n    conservationDonation: 1000000,\n    familyMarketingFocus: 0.85\n}]->(p)"
2025-03-06 20:36:43,453 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (r:Studio:GeneratedByClaudeAI {name: 'RKO Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Citizen Kane Production'})\nCREATE (r)-[:FINANCED {\n    contractDate: date('1939-07-22'),\n    amount: 839727,\n    isFullyPaid: true,\n    transferTime1: datetime('1939-08-15T00:00:00-05:00'),\n    transferTime2: datetime('1939-11-30T00:00:00-05:00'),\n    transferTime3: datetime('1940-06-15T00:00:00-05:00'),\n    paymentDate1: date('1939-08-15'),\n    paymentAmount1: 250000,\n    paymentDate2: date('1939-11-30'),\n    paymentAmount2: 250000,\n    paymentDate3: date('1940-06-15'),\n    paymentAmount3: 339727,\n    executiveOversight: 'Minimal initially, Heavy later'\n}]->(p)"
2025-03-06 20:36:43,475 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Studio:GeneratedByClaudeAI {name: 'CJ Entertainment'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Parasite Production'})\nCREATE (c)-[:FINANCED {\n    contractDate: date('2017-09-15'),\n    amount: 11400000,\n    isFullyPaid: true,\n    transferTime1: datetime('2018-02-01T00:00:00+09:00'),\n    transferTime2: datetime('2018-05-01T00:00:00+09:00'),\n    transferTime3: datetime('2018-08-01T00:00:00+09:00'),\n    paymentDate1: date('2018-02-01'),\n    paymentAmount1: 3400000,\n    paymentDate2: date('2018-05-01'),\n    paymentAmount2: 4500000,\n    paymentDate3: date('2018-08-01'),\n    paymentAmount3: 3500000\n}]->(p)"
2025-03-06 20:36:43,485 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Citizen Kane Production'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 3,\n    durationDays: 1,\n    setCount: 16,\n    soundstageCount: 8,\n    locationCount: 3,\n    dailyAverageCost: 8312,\n    scheduleAdherence: 0.88,\n    originalScheduledEnd: date('1940-10-15'),\n    technicalChallengesOvercome: 14,\n    innovationSuccessRate: 0.92\n}]->(c)"
2025-03-06 20:36:43,494 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (m))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Parasite Production'}),\n  (m:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 4,\n    durationDays: 1,\n    setCount: 12,\n    customSetsBudget: 3500000,\n    locationCount: 8,\n    dailyAverageCost: 125000,\n    scheduleAdherence: 0.95,\n    originalScheduledEnd: date('2018-09-15'),\n    perfectShotTakes: 247,\n    totalTakes: 1845\n}]->(m)"
2025-03-06 20:36:43,503 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (m))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'March of the Penguins Filming'}),\n  (m:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 13,\n    durationDays: 5,\n    totalFootage: 869,\n    footageUnit: 'Hours',\n    extremeConditionDays: 280,\n    dailyAverageCost: 20000,\n    equipmentMalfunctions: 42,\n    scheduleExtensions: 3,\n    originalScheduledEnd: date('2003-11-30'),\n    scientificValueRating: 9.2\n}]->(m)"
2025-03-06 20:36:43,515 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationships\nMATCH\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (c)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 1942,\n    ceremony: 14,\n    isWinner: false,\n    ceremonyDate: date('1942-02-26'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 325,\n    votesAgainst: 352,\n    historicalReassessment: 'Should have won',\n    controversyLevel: 'Very High'\n}]->(a)"
2025-03-06 20:36:43,526 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (o:Person:GeneratedByClaudeAI {name: 'Orson Welles'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (o)-[:NOMINATED_FOR {\n    category: 'Best Original Screenplay',\n    year: 1942,\n    ceremony: 14,\n    isWinner: true,\n    ceremonyDate: date('1942-02-26'),\n    announcementTime: localtime('20:15:00'),\n    coRecipient: 'Herman J. Mankiewicz',\n    attendance: false,\n    reasonForAbsence: 'Political tensions',\n    historicalSignificance: 'Only Oscar win for Welles'\n}]->(a)"
2025-03-06 20:36:43,537 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Movie:GeneratedByClaudeAI {title: 'Parasite'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (p)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2020,\n    ceremony: 92,\n    isWinner: true,\n    ceremonyDate: date('2020-02-09'),\n    announcementTime: localtime('21:55:00'),\n    votesFor: 5823,\n    votesAgainst: 3215,\n    historicalSignificance: 'First non-English language Best Picture',\n    audienceReaction: 'Standing ovation',\n    ovationLength: duration({minutes: 3, seconds: 12})\n}]->(a)"
2025-03-06 20:36:43,549 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (b:Person:GeneratedByClaudeAI {name: 'Bong Joon-ho'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (b)-[:NOMINATED_FOR {\n    category: 'Best Director',\n    year: 2020,\n    ceremony: 92,\n    isWinner: true,\n    ceremonyDate: date('2020-02-09'),\n    announcementTime: localtime('21:35:00'),\n    votesFor: 6123,\n    votesAgainst: 2915,\n    speechDuration: duration({minutes: 2, seconds: 43}),\n    translatorUsed: true,\n    memorableQuote: 'I will drink until next morning'\n}]->(a)"
2025-03-06 20:36:43,562 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (m)-[:NOMINATED_FOR {\n    category: 'Best Documentary Feature',\n    year: 2006,\n    ceremony: 78,\n    isWinner: true,\n    ceremonyDate: date('2006-03-05'),\n    announcementTime: localtime('20:25:00'),\n    votesFor: 3521,\n    votesAgainst: 1485,\n    significanceRating: 'Major for nature documentaries',\n    audienceShareDuringAnnouncement: 0.32\n}]->(a)"
2025-03-06 20:36:43,574 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (v))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Movie:GeneratedByClaudeAI {title: 'Parasite'}),\n  (v:Ceremony:GeneratedByClaudeAI {name: 'Venice Film Festival'})\nCREATE (p)-[:NOMINATED_FOR {\n    category: 'Golden Lion',\n    year: 2019,\n    ceremony: 76,\n    isWinner: false,\n    ceremonyDate: date('2019-09-07'),\n    announcementTime: localtime('20:30:00'),\n    screeningDate: date('2019-09-03'),\n    screeningTime: localtime('19:00:00'),\n    screeningVenue: 'Sala Grande',\n    audienceReaction: 'Standing ovation',\n    reactionDuration: duration({minutes: 8, seconds: 45})\n}]->(v)"
2025-03-06 20:36:43,585 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (f))} {position: line: 1, column: 9, offset: 8} for query: "// Preservation relationship\nMATCH\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'}),\n  (f:Organization:GeneratedByClaudeAI {name: 'National Film Preservation Board'})\nCREATE (c)-[:PRESERVED_BY {\n    year: 1989,\n    preservationRound: 1,\n    selectionCriteria: ['Cultural significance', 'Technical innovation', 'Artistic merit'],\n    criteriaScore: [10, 10, 10],\n    preservationDate: date('1989-12-14'),\n    restoration: true,\n    restorationDate: date('1998-11-25'),\n    restorationCost: 850000,\n    digitalFormat: '4K',\n    preservationMedium: ['Film negative', 'Digital master']\n}]->(f)"
2025-03-06 20:36:43,598 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 15, column: 1, offset: 415} for query: "// Create additional node types and relationships\n\n// Create educational institution using film for teaching\nCREATE (FilmStudiesInstitute:Institution:GeneratedByClaudeAI {\n    name: 'National Film Studies Institute',\n    founded: date('1967-09-15'),\n    headquartersLat: 34.0922,\n    headquartersLong: -118.3731,\n    studentCount: 1250,\n    facultyCount: 85,\n    courseCount: 145,\n    filmArchiveSize: 25000,\n    digitalArchiveSize: 15000,\n    digitalArchiveUnit: 'TB',\n    annualBudget: 45000000\n})\nWITH 1 as dummy\nMATCH (i:Institution:GeneratedByClaudeAI {name: 'National Film Studies Institute'}),\n      (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (i)-[:TEACHES_WITH {\n    yearAdded: 1968,\n    coursesUsedIn: 28,\n    primaryFocus: ['Cinematography technique', 'Narrative structure', 'Film history'],\n    studentPapersCount: 12450,\n    mostCommonAnalysisTopics: ['Deep focus', 'Rosebud symbolism', 'Narrative framework'],\n    teachingHoursAnnually: 620,\n    requiredForDegrees: ['BA Film Studies', 'MFA Directing', 'MFA Cinematography'],\n    teachingValue: 9.8\n}]->(c)"
2025-03-06 20:36:43,614 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 16, column: 1, offset: 584} for query: "// Add camera technology for Citizen Kane\nCREATE (MitchellBNCCamera:Equipment:GeneratedByClaudeAI {\n    name: 'Mitchell BNC Camera',\n    manufactured: date('1934-05-10'),\n    manufacturerLat: 34.0922,\n    manufacturerLong: -118.3731,\n    weight: 52,\n    weightUnit: 'kg',\n    cost: 15000,\n    purchaseYear: 1939,\n    revolutionaryFeatures: ['Silent operation', 'Rack-over viewing', 'High-precision movement'],\n    featureImpact: [9.2, 8.9, 9.5],\n    technicalSpecifications: 'Silent operation with rack-over viewing system',\n    historicalSignificance: 'Industry standard for Hollywood productions'\n})\nWITH 1 as dummy\nMATCH (e:Equipment:GeneratedByClaudeAI {name: 'Mitchell BNC Camera'}),\n      (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (e)-[:USED_IN {\n    operator: 'Gregg Toland',\n    setupTime: duration({minutes: 45}),\n    unitCount: 2,\n    technicalInnovations: ['Low-angle mounting', 'Floor embedding'],\n    innovationSuccess: [10, 9.5],\n    maintenanceEvents: 8,\n    operationalDays: 98,\n    signatureShots: ['Low angle with ceiling', 'Deep focus wide shots', 'Tracking sequences'],\n    techniqueInfluence: 9.8\n}]->(c)"
2025-03-06 20:36:43,627 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 442} for query: "// Create special costume for Parasite\nCREATE (ParasiteCostumes:Costume:GeneratedByClaudeAI {\n    name: 'Parasite Family Wardrobes',\n    designed: date('2018-03-15'),\n    designer: 'Choi Se-yeon',\n    costumePieces: 245,\n    materialTypes: 15,\n    colorPalette: ['Gray', 'Black', 'Muted green', 'Rich blue'],\n    paletteMeaning: ['Poverty', 'Deception', 'Hope', 'Wealth'],\n    constructionHours: 1850,\n    costumeBudget: 120000,\n    symbolismRating: 9.5\n})\nWITH 1 as dummy\nMATCH (c:Costume:GeneratedByClaudeAI {name: 'Parasite Family Wardrobes'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (c)-[:FEATURED_IN {\n    characterCount: 9,\n    costumesPerCharacter: [12, 14, 16, 18, 8, 6, 5, 4, 3],\n    characterClassIndication: ['Lower', 'Lower', 'Lower', 'Lower', 'Upper', 'Upper', 'Upper', 'Upper', 'Hidden'],\n    symbolicElements: ['Stain-resistant fabric', 'Aspirational brands', 'Weathered textures', 'Color progression'],\n    elementPurpose: ['Status marker', 'Desire indicator', 'History visual', 'Narrative arc'],\n    designAwards: 3\n}]->(p)"
2025-03-06 20:36:43,643 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 17, column: 1, offset: 488} for query: "// Create extreme weather challenge for Penguins\nCREATE (AntarcticConditions:EnvironmentalFactor:GeneratedByClaudeAI {\n    name: 'Antarctic Winter Conditions',\n    location: 'Dumont d\\'Urville Station area',\n    latitude: -66.6628,\n    longitude: 140.0014,\n    averageTemperature: -60,\n    temperatureUnit: 'Celsius',\n    windSpeedAverage: 80,\n    windSpeedUnit: 'km/h',\n    windSpeedMax: 200,\n    daylight: 'Limited to none',\n    precipitationAnnual: 250,\n    precipitationUnit: 'mm',\n    extremityIndex: 9.8\n})\nWITH 1 as dummy\nMATCH (e:EnvironmentalFactor:GeneratedByClaudeAI {name: 'Antarctic Winter Conditions'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'})\nCREATE (e)-[:IMPACTED {\n    daysExperienced: 280,\n    equipmentFailureRate: 0.35,\n    humanEnduranceLimit: duration({hours: 4}),\n    rotationalSchedule: 'Two weeks on, one week shelter',\n    equipmentAdaptations: ['Thermal insulation', 'Battery protection', 'Anti-fog systems'],\n    adaptationSuccessRates: [0.82, 0.76, 0.65],\n    footageLostToCold: '32 hours',\n    crewmedicalIncidents: 8,\n    documentaryValueAdded: 9.7\n}]->(p)"
2025-03-06 20:36:43,657 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 13, column: 1, offset: 424} for query: "// Create cultural impact relationship\nCREATE (FilmHistory:AcademicField:GeneratedByClaudeAI {\n    name: 'Film History Studies',\n    established: date('1915-03-10'),\n    institutionsCount: 2850,\n    scholarCount: 15400,\n    peerReviewedJournals: 124,\n    annualPublications: 3250,\n    mostCitedTheories: ['Auteur theory', 'Montage theory', 'Apparatus theory'],\n    theoriesDevelopmentYears: [1954, 1925, 1970],\n    digitalArchives: 278\n})\nWITH 1 as dummy\nMATCH (f:AcademicField:GeneratedByClaudeAI {name: 'Film History Studies'}),\n      (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (f)-[:INFLUENCED_BY {\n    yearFirstStudied: 1942,\n    academicPapersCount: 2850,\n    textbookReferences: 98,\n    percentageCoursesTeaching: 95,\n    criticalTheoriesGenerated: ['Deep focus semiotics', 'Narrative fragmentation', 'Cinematic authorship'],\n    theoryInfluence: [9.4, 9.6, 9.8],\n    canonicalPosition: 1,\n    canonicalSurveys: 12,\n    surveyYears: [1952, 1962, 1972, 1982, 1992, 2002, 2012, 2022]\n}]->(c)"
2025-03-06 20:36:43,673 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 413} for query: "// Create cultural movement relationship for Parasite\nCREATE (NewKoreanCinema:CulturalMovement:GeneratedByClaudeAI {\n    name: 'New Korean Cinema',\n    established: date('1998-05-15'),\n    influentialDirectors: 12,\n    internationalFestivals: 35,\n    majorAwards: 58,\n    criticalReception: 'Revolutionary',\n    geographicalSpread: 'Global',\n    periodStart: date('1998-05-15'),\n    periodPeak: date('2019-05-21'),\n    academicStudies: 145\n})\nWITH 1 as dummy\nMATCH (c:CulturalMovement:GeneratedByClaudeAI {name: 'New Korean Cinema'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (c)-[:CULMINATED_WITH {\n    significanceRating: 9.9,\n    globalImpact: 'Transformative',\n    boxOfficeMultiplierEffect: 3.2,\n    koreanFilmExportsIncrease: 0.45,\n    subsequentDistributionDeals: 28,\n    academicAnalyses: 85,\n    filmSchoolAdoption: 'Immediate and widespread',\n    newFilmmakersInspired: 'Thousands globally',\n    culturalBarrierReduction: 'Significant',\n    subtitleAcceptanceIncrease: 0.65\n}]->(p)"
2025-03-06 20:36:43,689 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 16, column: 1, offset: 416} for query: "// Create special effects company\nCREATE (WetaDigital:TechCompany:GeneratedByClaudeAI {\n    name: 'Weta Digital',\n    founded: date('1993-05-22'),\n    headquartersLat: -41.3053,\n    headquartersLong: 174.8239,\n    employeeCount: 1550,\n    annualRevenue: 245000000,\n    technologyPatents: 58,\n    oscarsWon: 6,\n    technicalAwards: 127,\n    proprietarySoftware: 12,\n    computingPower: 72000,\n    computingUnit: 'CPU cores'\n})\nWITH 1 as dummy\nMATCH (t:TechCompany:GeneratedByClaudeAI {name: 'Weta Digital'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'})\nCREATE (t)-[:PROVIDED_SERVICES_FOR {\n    year: 2004,\n    serviceType: ['Digital restoration', 'Color correction', 'Digital stabilization'],\n    teamSize: 12,\n    workDuration: duration({months: 3}),\n    contractValue: 850000,\n    proprietaryTechniquesUsed: 3,\n    footageProcessed: 85,\n    footageUnit: 'Hours',\n    transformationQuality: 9.5,\n    temperatureExtremesVisualized: true,\n    visualizationAccuracy: 'Scientific-grade'\n}]->(p)"
2025-03-06 20:36:43,707 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 16, column: 1, offset: 474} for query: "// Create theme park attraction\nCREATE (CitizenKaneExhibit:Attraction:GeneratedByClaudeAI {\n    name: 'The Art of Citizen Kane: Interactive Exhibit',\n    opened: date('2008-05-15'),\n    locationLat: 34.1381,\n    locationLong: -118.3534,\n    visitorCapacity: 500,\n    visitorDuration: duration({minutes: 45}),\n    annualVisitors: 250000,\n    exhibitSize: 15000,\n    sizeUnit: 'Square feet',\n    developmentCost: 12000000,\n    interactiveElements: 28,\n    historicalArtifacts: 125\n})\nWITH 1 as dummy\nMATCH (a:Attraction:GeneratedByClaudeAI {name: 'The Art of Citizen Kane: Interactive Exhibit'}),\n      (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (a)-[:BASED_ON {\n    filmElementsFeatured: ['Cinematography', 'Set design', 'Narrative structure', 'Sound design'],\n    educationalFocus: 0.8,\n    entertainmentFocus: 0.2,\n    audienceRating: 9.2,\n    filmHistoryContextualization: 'Comprehensive',\n    originalPropsCurated: 15,\n    reproductionProps: 85,\n    filmingTechniqueDemonstrations: 12,\n    rosebudSymbolismExhibits: 5,\n    culturalImpactMetrics: ['Industry influence', 'Artistic recognition', 'Technical innovation']\n}]->(c)"
2025-03-06 20:36:43,720 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 16, column: 1, offset: 495} for query: "// Create merchandising relationship\nCREATE (PenguinPlush:Merchandise:GeneratedByClaudeAI {\n    name: 'Emperor Penguin Family Plush Collection',\n    released: date('2005-06-15'),\n    manufacturer: 'National Geographic Products',\n    manufacturerLocationLat: 38.9053,\n    manufacturerLocationLong: -77.0332,\n    retailPrice: 29.99,\n    priceCurrency: 'USD',\n    productionRun: 500000,\n    conservationContribution: 3.00,\n    contributionPercentage: 0.10,\n    educationalMaterials: true,\n    ageRange: '3+'\n})\nWITH 1 as dummy\nMATCH (m:Merchandise:GeneratedByClaudeAI {name: 'Emperor Penguin Family Plush Collection'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'})\nCREATE (m)-[:DERIVED_FROM {\n    licensingDeal: date('2005-03-12'),\n    unitsSold: 435000,\n    geographicalDistribution: ['North America', 'Europe', 'Asia', 'Australia'],\n    salesDistribution: [0.65, 0.20, 0.10, 0.05],\n    retailersCarrying: 7850,\n    conservationFundsRaised: 1305000,\n    educationalImpact: 'Significant - classroom adoption',\n    brandRecognition: 0.85,\n    merchandisingLongevity: 'Still in production - limited quantities',\n    sequelMerchandisingEffect: 'Reissued for Penguin 2'\n}]->(p)"
2025-03-06 20:36:43,734 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 495} for query: "// Create educational program\nCREATE (ParasiteStudyProgram:EducationalProgram:GeneratedByClaudeAI {\n    name: 'Parasite: Film & Society Curriculum',\n    developed: date('2020-04-15'),\n    institutionsAdopting: 1230,\n    targetEducationLevels: ['University', 'High School Advanced'],\n    materialFormats: ['Digital', 'Print', 'Video supplements'],\n    languagesAvailable: 12,\n    courseDuration: duration({weeks: 6}),\n    totalLessonHours: 45,\n    scholarlyEndorsements: 35,\n    educatorRating: 9.4\n})\nWITH 1 as dummy\nMATCH (e:EducationalProgram:GeneratedByClaudeAI {name: 'Parasite: Film & Society Curriculum'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (e)-[:ANALYZES {\n    focusAreas: ['Class structure', 'Visual symbolism', 'Narrative techniques', 'Cultural context', 'Globalization'],\n    focusDistribution: [0.25, 0.20, 0.20, 0.15, 0.20],\n    analyticalApproaches: ['Sociological', 'Cinematic', 'Economic', 'Cultural'],\n    studentFeedbackScore: 9.2,\n    criticalThinkingDevelopment: 'Very High',\n    culturalComprehensionExpansion: 'Significant',\n    crossCulturalDialoguePromotion: 'Extensive',\n    filmmakingTechniquesExamined: 45,\n    globalAdoption: 'Growing rapidly',\n    academicPaperGeneration: 185\n}]->(p)"
2025-03-06 20:36:43,750 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 16, column: 1, offset: 439} for query: "// Create 4K restoration project\nCREATE (CitizenKaneRestoration:DigitalProject:GeneratedByClaudeAI {\n    name: 'Citizen Kane 4K Restoration',\n    started: date('2010-02-15'),\n    completed: date('2011-09-22'),\n    teamSize: 22,\n    originalNegativeUsed: true,\n    resolutionOutput: '4096x3112',\n    colorDepth: '16-bit',\n    storageSizeRaw: 175,\n    storageSizeUnit: 'TB',\n    finalMasterSize: 12,\n    finalMasterUnit: 'TB',\n    budget: 1250000\n})\nWITH 1 as dummy\nMATCH (d:DigitalProject:GeneratedByClaudeAI {name: 'Citizen Kane 4K Restoration'}),\n      (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (d)-[:PRESERVED {\n    frameCorrectionCount: 486500,\n    frameTotalCount: 172584,\n    originalDamagePercentage: 0.12,\n    restorationFidelity: 0.985,\n    audioChannelsPreserved: 2,\n    audioSamplingRate: 96,\n    audioSamplingUnit: 'kHz',\n    primaryRestorationChallenges: ['Nitrate decomposition', 'Scratches', 'Stabilization', 'Contrast preservation'],\n    challengeComplexity: [9.2, 8.5, 7.8, 9.5],\n    technologiesUsed: ['AI frame interpolation', 'Manual restoration', 'Wetgate scanning', 'HDR grading'],\n    historicalConsultants: 5,\n    academicValidation: 'Peer-reviewed & certified authentic',\n    preservationStandard: 'Library of Congress Archival'\n}]->(c)"
2025-03-06 20:36:43,941 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (du))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes\nMATCH \n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'}),\n  (du:Movie:GeneratedByClaudeAI {title: 'Dune'})\nCREATE (d)-[:DIRECTED {\n    year: 2021,\n    daysOnSet: 130,\n    satisfaction: 4.9,\n    awardNominations: 10,\n    completionDate: date('2020-07-15'),\n    premiereEvent: datetime('2021-09-03T19:30:00+02:00'),\n    durationMonths: 4,\n    isFirstCollaboration: false\n}]->(du)"
2025-03-06 20:36:43,952 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (e))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (dk:Person:GeneratedByClaudeAI {name: 'Daniel Kwan'}),\n  (e:Movie:GeneratedByClaudeAI {title: 'Everything Everywhere All at Once'})\nCREATE (dk)-[:DIRECTED {\n    year: 2022,\n    daysOnSet: 70,\n    coDirector: 'Daniel Scheinert',\n    satisfaction: 4.9,\n    awardNominations: 11,\n    awardWins: 7,\n    completionDate: date('2020-07-30'),\n    premiereEvent: datetime('2022-03-11T18:30:00-06:00'),\n    durationMonths: 2,\n    isFirstCollaboration: false\n}]->(e)"
2025-03-06 20:36:43,962 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'})\nCREATE (c)-[:DIRECTED {\n    year: 2023,\n    daysOnSet: 114,\n    satisfaction: 4.9,\n    awardNominations: 13,\n    awardWins: 7,\n    completionDate: date('2023-03-15'),\n    premiereEvent: datetime('2023-07-13T19:00:00+01:00'),\n    durationMonths: 3,\n    isFirstCollaboration: false\n}]->(o)"
2025-03-06 20:36:43,973 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships\nMATCH\n  (t:Person:GeneratedByClaudeAI {name: 'Timothée Chalamet'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'Dune'})\nCREATE (t)-[:ACTED_IN {\n    roles: ['Paul Atreides'],\n    salary: 2000000,\n    screenTimeMinutes: 125,\n    startDate: date('2019-03-18'),\n    endDate: date('2019-07-26'),\n    scheduleConflicts: false,\n    criticScore: 95,\n    audienceScore: 92,\n    awardNominations: 5\n}]->(d)"
2025-03-06 20:36:43,983 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (e))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Michelle Yeoh'}),\n  (e:Movie:GeneratedByClaudeAI {title: 'Everything Everywhere All at Once'})\nCREATE (m)-[:ACTED_IN {\n    roles: ['Evelyn Wang'],\n    salary: 1000000,\n    screenTimeMinutes: 120,\n    startDate: date('2020-01-15'),\n    endDate: date('2020-03-25'),\n    scheduleConflicts: false,\n    criticScore: 97,\n    audienceScore: 95,\n    awardNominations: 8,\n    awardWins: 6\n}]->(e)"
2025-03-06 20:36:43,994 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Cillian Murphy'}),\n  (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'})\nCREATE (c)-[:ACTED_IN {\n    roles: ['J. Robert Oppenheimer'],\n    salary: 5000000,\n    screenTimeMinutes: 160,\n    startDate: date('2022-02-22'),\n    endDate: date('2022-05-18'),\n    scheduleConflicts: false,\n    criticScore: 98,\n    audienceScore: 95,\n    awardNominations: 7,\n    awardWins: 5\n}]->(o)"
2025-03-06 20:36:44,006 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "// Studio relationships\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'Dune'})\nCREATE (w)-[:PRODUCED {\n    investment: 165000000,\n    return: 401800000,\n    roi: 2.43,\n    contractSigned: date('2018-07-15'),\n    studioShare: 0.65,\n    directorShare: 0.15,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 140000000,\n    isProfitable: true,\n    marketingStart: datetime('2021-02-15T00:00:00Z')\n}]->(d)"
2025-03-06 20:36:44,017 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (e))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Studio:GeneratedByClaudeAI {name: 'A24 Studios'}),\n  (e:Movie:GeneratedByClaudeAI {title: 'Everything Everywhere All at Once'})\nCREATE (a)-[:PRODUCED {\n    investment: 25000000,\n    return: 140200000,\n    roi: 5.61,\n    contractSigned: date('2019-03-22'),\n    studioShare: 0.6,\n    directorShare: 0.2,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 15000000,\n    isProfitable: true,\n    marketingStart: datetime('2022-01-15T00:00:00Z')\n}]->(e)"
2025-03-06 20:36:44,030 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (u:Studio:GeneratedByClaudeAI {name: 'Universal Pictures'}),\n  (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'})\nCREATE (u)-[:PRODUCED {\n    investment: 100000000,\n    return: 976156348,\n    roi: 9.76,\n    contractSigned: date('2021-05-10'),\n    studioShare: 0.6,\n    directorShare: 0.2,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 150000000,\n    isProfitable: true,\n    marketingStart: datetime('2023-01-15T00:00:00Z')\n}]->(o)"
2025-03-06 20:36:44,038 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Dune Principal Photography'})\nCREATE (w)-[:FINANCED {\n    contractDate: date('2018-07-15'),\n    amount: 165000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2018-12-15T00:00:00Z'),\n    transferTime2: datetime('2019-02-28T00:00:00Z'),\n    transferTime3: datetime('2019-05-15T00:00:00Z'),\n    paymentDate1: date('2018-12-15'),\n    paymentAmount1: 50000000,\n    paymentDate2: date('2019-02-28'),\n    paymentAmount2: 65000000,\n    paymentDate3: date('2019-05-15'),\n    paymentAmount3: 50000000\n}]->(p)"
2025-03-06 20:36:44,042 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Studio:GeneratedByClaudeAI {name: 'A24 Studios'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Everything Everywhere All at Once Production'})\nCREATE (a)-[:FINANCED {\n    contractDate: date('2019-03-22'),\n    amount: 25000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2019-09-15T00:00:00Z'),\n    transferTime2: datetime('2019-12-15T00:00:00Z'),\n    paymentDate1: date('2019-09-15'),\n    paymentAmount1: 15000000,\n    paymentDate2: date('2019-12-15'),\n    paymentAmount2: 10000000\n}]->(p)"
2025-03-06 20:36:44,054 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (u:Studio:GeneratedByClaudeAI {name: 'Universal Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Oppenheimer Principal Photography'})\nCREATE (u)-[:FINANCED {\n    contractDate: date('2021-05-10'),\n    amount: 100000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2021-09-15T00:00:00Z'),\n    transferTime2: datetime('2021-12-20T00:00:00Z'),\n    transferTime3: datetime('2022-02-10T00:00:00Z'),\n    paymentDate1: date('2021-09-15'),\n    paymentAmount1: 30000000,\n    paymentDate2: date('2021-12-20'),\n    paymentAmount2: 40000000,\n    paymentDate3: date('2022-02-10'),\n    paymentAmount3: 30000000\n}]->(p)"
2025-03-06 20:36:44,064 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Dune Principal Photography'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'Dune'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 4,\n    durationDays: 8,\n    locationCount: 8,\n    dailyAverageCost: 560000,\n    scheduleAdherence: 0.95,\n    weatherDelaysDays: 5,\n    originalScheduledEnd: date('2019-07-20')\n}]->(d)"
2025-03-06 20:36:44,072 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (e))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Everything Everywhere All at Once Production'}),\n  (e:Movie:GeneratedByClaudeAI {title: 'Everything Everywhere All at Once'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 2,\n    durationDays: 10,\n    locationCount: 12,\n    dailyAverageCost: 150000,\n    scheduleAdherence: 0.97,\n    weatherDelaysDays: 2,\n    originalScheduledEnd: date('2020-03-20')\n}]->(e)"
2025-03-06 20:36:44,084 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Oppenheimer Principal Photography'}),\n  (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 3,\n    durationDays: 24,\n    locationCount: 9,\n    dailyAverageCost: 350000,\n    scheduleAdherence: 0.98,\n    weatherDelaysDays: 3,\n    originalScheduledEnd: date('2022-05-15')\n}]->(o)"
2025-03-06 20:36:44,088 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Review relationships\nMATCH\n  (j:Person {name: 'Jessica Thompson'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'A Masterful Sci-Fi Epic'})\nCREATE (j)-[:WROTE {\n    date: date('2021-10-25'),\n    timeSpentMinutes: 65,\n    wordCount: 728,\n    isVerified: true,\n    submissionTime: time('15:30:42+01:00')\n}]->(r)"
2025-03-06 20:36:44,091 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person {name: 'Angela Scope'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'A Mind-Bending Multiverse Masterpiece'})\nCREATE (a)-[:WROTE {\n    date: date('2022-04-10'),\n    timeSpentMinutes: 70,\n    wordCount: 785,\n    isVerified: true,\n    submissionTime: time('19:22:15-04:00')\n}]->(r)"
2025-03-06 20:36:44,095 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Person {name: 'Paul Blythe'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'Historical Filmmaking at its Finest'})\nCREATE (p)-[:WROTE {\n    date: date('2023-07-25'),\n    timeSpentMinutes: 75,\n    wordCount: 812,\n    isVerified: true,\n    submissionTime: time('14:45:30-04:00')\n}]->(r)"
2025-03-06 20:36:44,106 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'A Masterful Sci-Fi Epic'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'Dune'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 184532,\n    shares: 8642,\n    comments: 3156,\n    featuredDurationDays: 21,\n    publicationDateTime: datetime('2021-10-25T16:30:00+01:00')\n}]->(d)"
2025-03-06 20:36:44,114 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (e))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'A Mind-Bending Multiverse Masterpiece'}),\n  (e:Movie:GeneratedByClaudeAI {title: 'Everything Everywhere All at Once'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 215689,\n    shares: 12548,\n    comments: 4852,\n    featuredDurationDays: 28,\n    publicationDateTime: datetime('2022-04-10T20:15:00-04:00')\n}]->(e)"
2025-03-06 20:36:44,123 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'Historical Filmmaking at its Finest'}),\n  (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 245832,\n    shares: 15462,\n    comments: 5238,\n    featuredDurationDays: 30,\n    publicationDateTime: datetime('2023-07-25T16:00:00-04:00')\n}]->(o)"
2025-03-06 20:36:44,135 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationships\nMATCH\n  (d:Movie:GeneratedByClaudeAI {title: 'Dune'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (d)-[:NOMINATED_FOR {\n    category: 'Best Cinematography',\n    year: 2022,\n    ceremony: 94,\n    isWinner: true,\n    ceremonyDate: date('2022-03-27'),\n    announcementTime: localtime('20:15:00'),\n    votesFor: 5821,\n    votesAgainst: 2154\n}]->(a)"
2025-03-06 20:36:44,146 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (e:Movie:GeneratedByClaudeAI {title: 'Everything Everywhere All at Once'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (e)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2023,\n    ceremony: 95,\n    isWinner: true,\n    ceremonyDate: date('2023-03-12'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 6534,\n    votesAgainst: 2154\n}]->(a)"
2025-03-06 20:36:44,158 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Michelle Yeoh'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (m)-[:NOMINATED_FOR {\n    category: 'Best Actress',\n    year: 2023,\n    ceremony: 95,\n    isWinner: true,\n    ceremonyDate: date('2023-03-12'),\n    announcementTime: localtime('21:15:00'),\n    votesFor: 6254,\n    votesAgainst: 2435,\n    speechDuration: duration({minutes: 3, seconds: 12})\n}]->(a)"
2025-03-06 20:36:44,171 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (o)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2024,\n    ceremony: 96,\n    isWinner: true,\n    ceremonyDate: date('2024-03-10'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 6832,\n    votesAgainst: 1985\n}]->(a)"
2025-03-06 20:36:44,184 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Cillian Murphy'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (c)-[:NOMINATED_FOR {\n    category: 'Best Actor',\n    year: 2024,\n    ceremony: 96,\n    isWinner: true,\n    ceremonyDate: date('2024-03-10'),\n    announcementTime: localtime('21:15:00'),\n    votesFor: 6754,\n    votesAgainst: 2105,\n    speechDuration: duration({minutes: 2, seconds: 45})\n}]->(a)"
2025-03-06 20:36:44,195 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "// Professional relationships between people\nMATCH\n  (t:Person:GeneratedByClaudeAI {name: 'Timothée Chalamet'}),\n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'})\nCREATE (t)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'Dune',\n    firstYear: 2021,\n    chemistry: 4.8,\n    interviews: 25,\n    relationship: 'Actor-Director',\n    nextProjectPlanned: date('2024-11-15')\n}]->(d)"
2025-03-06 20:36:44,205 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (dk))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Michelle Yeoh'}),\n  (dk:Person:GeneratedByClaudeAI {name: 'Daniel Kwan'})\nCREATE (m)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'Everything Everywhere All at Once',\n    firstYear: 2022,\n    chemistry: 4.9,\n    interviews: 32,\n    relationship: 'Actor-Director',\n    awards: ['Academy Award', 'Golden Globe', 'SAG Award']\n}]->(dk)"
2025-03-06 20:36:44,216 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (cn))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Cillian Murphy'}),\n  (cn:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'})\nCREATE (c)-[:WORKED_WITH {\n    projects: 6,\n    firstProject: 'Batman Begins',\n    firstYear: 2005,\n    chemistry: 4.9,\n    interviews: 45,\n    relationship: 'Actor-Director',\n    awards: ['Academy Award']\n}]->(cn)"
2025-03-06 20:36:44,231 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 15, column: 1, offset: 464} for query: "// Create soundtracks\nCREATE (DuneSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'Dune (Original Motion Picture Soundtrack)',\n    composer: 'Hans Zimmer',\n    released: date('2021-09-17'),\n    duration: duration({minutes: 97, seconds: 38}),\n    trackCount: 22,\n    recordingStudio: 'Remote (COVID-19)',\n    recordingStudioLat: 51.5074,\n    recordingStudioLong: -0.1278,\n    peakChartPosition: 24,\n    salesUnits: 120000,\n    streamingCount: 180000000\n})\nWITH 1 as dummy\nMATCH (d:Movie:GeneratedByClaudeAI {title: 'Dune'}),\n      (s:Soundtrack:GeneratedByClaudeAI {title: 'Dune (Original Motion Picture Soundtrack)'})\nCREATE (s)-[:COMPOSED_FOR {\n    contractDate: date('2019-12-15'),\n    completion: date('2021-06-20'),\n    nominatedAwards: ['Academy Award', 'BAFTA', 'Golden Globe'],\n    wonAwards: ['Academy Award', 'Golden Globe'],\n    spotifyStreams: 250000000,\n    youtubeViews: 65000000\n}]->(d)"
2025-03-06 20:36:44,246 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 15, column: 1, offset: 484} for query: "CREATE (OppenheimerSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'Oppenheimer (Original Motion Picture Soundtrack)',\n    composer: 'Ludwig Göransson',\n    released: date('2023-07-21'),\n    duration: duration({minutes: 72, seconds: 15}),\n    trackCount: 19,\n    recordingStudio: 'AIR Studios, London',\n    recordingStudioLat: 51.5454,\n    recordingStudioLong: -0.1755,\n    peakChartPosition: 18,\n    salesUnits: 85000,\n    streamingCount: 145000000\n})\nWITH 1 as dummy\nMATCH (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'}),\n      (s:Soundtrack:GeneratedByClaudeAI {title: 'Oppenheimer (Original Motion Picture Soundtrack)'})\nCREATE (s)-[:COMPOSED_FOR {\n    contractDate: date('2022-01-15'),\n    completion: date('2023-05-20'),\n    nominatedAwards: ['Academy Award', 'BAFTA', 'Golden Globe'],\n    wonAwards: ['Academy Award'],\n    spotifyStreams: 175000000,\n    youtubeViews: 42000000\n}]->(o)"
2025-03-06 20:36:44,261 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 16, column: 1, offset: 407} for query: "// Create filming location\nCREATE (MoroccoLocation:FilmingLocation:GeneratedByClaudeAI {\n    name: 'Wadi Rum Desert',\n    country: 'Jordan',\n    region: 'Southern Jordan',\n    latitude: 29.5833,\n    longitude: 35.4167,\n    elevation: 1600,\n    elevationUnit: 'm',\n    climate: 'Desert',\n    permitCost: 2500000,\n    permitCurrency: 'USD',\n    firstUsed: date('2019-05-15'),\n    lastUsed: date('2019-06-28')\n})\nWITH 1 as dummy\nMATCH (d:Movie:GeneratedByClaudeAI {title: 'Dune'}),\n      (l:FilmingLocation:GeneratedByClaudeAI {name: 'Wadi Rum Desert'})\nCREATE (d)-[:FILMED_AT {\n    startDate: date('2019-05-15'),\n    endDate: date('2019-06-28'),\n    sceneCount: 32,\n    totalDays: 45,\n    weatherDelayDays: 6,\n    crewSize: 350,\n    logisticsCost: 3500000,\n    accommodationCost: 1800000,\n    characterPresent: ['Paul Atreides', 'Lady Jessica', 'Fremen']\n}]->(l)"
2025-03-06 20:36:44,279 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 386} for query: "// Create prop for Oppenheimer\nCREATE (TrinityDevice:Prop:GeneratedByClaudeAI {\n    name: 'Trinity Test Device Replica',\n    movie: 'Oppenheimer',\n    material: 'Mixed materials, electronics',\n    weight: 350,\n    weightUnit: 'kg',\n    createdDate: date('2022-01-10'),\n    screenTime: duration({minutes: 8, seconds: 45}),\n    isIconic: true,\n    constructionCost: 250000,\n    copiesMade: 3\n})\nWITH 1 as dummy\nMATCH (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'}),\n      (p:Prop:GeneratedByClaudeAI {name: 'Trinity Test Device Replica'})\nCREATE (p)-[:USED_IN {\n    scenes: ['Trinity Test', 'Laboratory'],\n    sceneCount: 5,\n    firstAppearance: time('01:45:22'),\n    lastAppearance: time('02:15:08'),\n    isCloseup: true,\n    significance: 'Central plot device',\n    historicalAccuracy: 'Very high'\n}]->(o)"
2025-03-06 20:36:44,293 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 15, column: 1, offset: 404} for query: "// Create fan community\nCREATE (DuneFandom:FanCommunity:GeneratedByClaudeAI {\n    name: 'Dune Fan Community',\n    established: date('1965-08-15'),\n    reactivation: date('2021-10-22'),\n    memberCount: 3250000,\n    onlinePlatforms: 8,\n    annualConventions: 5,\n    largestEventAttendance: 15000,\n    contentCreators: 28500,\n    fanfictionCount: 45000,\n    fanArtCount: 120000,\n    academicPapers: 450\n})\nWITH 1 as dummy\nMATCH (f:FanCommunity:GeneratedByClaudeAI {name: 'Dune Fan Community'}),\n      (d:Movie:GeneratedByClaudeAI {title: 'Dune'})\nCREATE (f)-[:ENGAGED_WITH {\n    anticipationScore: 9.7,\n    reviewsSubmitted: 185000,\n    averageRating: 8.6,\n    onlineDiscussions: 85000,\n    theoriesGenerated: 15000,\n    preReleaseEvents: 45,\n    postReleaseEvents: 230,\n    merchandiseSales: 75000000,\n    sequelAnticipation: 9.8\n}]->(d)"
2025-03-06 20:36:44,304 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "// Connect more actors\nMATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Amy Adams'}),\n  (c:Person:GeneratedByClaudeAI {name: 'Cillian Murphy'})\nCREATE (a)-[:KNOWS {\n    since: date('2013-08-15'),\n    relationship: 'Professional Colleagues',\n    lastMeeting: date('2023-09-22'),\n    durationYears: 10,\n    commonFriends: 12,\n    commonEvents: 8\n}]->(c)"
2025-03-06 20:36:44,316 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Michelle Yeoh'}),\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'})\nCREATE (m)-[:ADMIRES {\n    since: date('2010-07-16'),\n    projects: 0,\n    relationship: 'Professional Admiration',\n    lastContact: date('2023-02-28'),\n    inspirationLevel: 4.8,\n    influencedWorks: ['Everything Everywhere All at Once']\n}]->(c)"
2025-03-06 20:36:44,331 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 14, column: 1, offset: 427} for query: "// Create costume design relationship\nCREATE (JacquelineWest:Person:GeneratedByClaudeAI {\n    name: 'Jacqueline West',\n    born: 1950,\n    birthdate: date('1950-10-15'),\n    nationality: 'American',\n    oscarNominations: 4,\n    isActive: true,\n    firstFilm: datetime('1998-11-20T00:00:00Z'),\n    specialization: 'Costume Design',\n    careerLength: duration({years: 25}),\n    designStyle: 'Historical authenticity with symbolic elements'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Jacqueline West'}),\n      (d:Movie:GeneratedByClaudeAI {title: 'Dune'})\nCREATE (p)-[:DESIGNED_COSTUMES_FOR {\n    year: 2021,\n    costumesCreated: 1200,\n    budget: 2500000,\n    awardNominations: 5,\n    awardWins: 2,\n    startDate: date('2018-10-15'),\n    completionDate: date('2019-02-28'),\n    specialCostumes: ['Stillsuits', 'House Atreides uniforms', 'Bene Gesserit robes'],\n    researchHours: 850,\n    conceptualDesigns: 280\n}]->(d)"
2025-03-06 20:36:44,346 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 15, column: 1, offset: 425} for query: "// Create cinematographer relationship\nCREATE (HoyteVanHoytema:Person:GeneratedByClaudeAI {\n    name: 'Hoyte van Hoytema',\n    born: 1971,\n    birthdate: date('1971-10-04'),\n    nationality: 'Dutch-Swedish',\n    oscarNominations: 3,\n    oscarWins: 1,\n    isActive: true,\n    firstFilm: datetime('2002-09-15T00:00:00Z'),\n    visualStyle: 'Natural lighting with IMAX optimization',\n    cameraPreference: 'IMAX 65mm',\n    collaborations: 4\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Hoyte van Hoytema'}),\n      (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'})\nCREATE (p)-[:CINEMATOGRAPHY_FOR {\n    year: 2023,\n    cameras: ['IMAX 65mm', 'Panavision 65mm'],\n    lenses: ['IMAX', 'Panavision System 65'],\n    awardNominations: 12,\n    awardWins: 8,\n    startDate: date('2022-02-22'),\n    completionDate: date('2022-05-18'),\n    signature_shots: ['Trinity explosion', 'Quantum discussions', 'Hearing sequences'],\n    lighting_setups: 165,\n    filmedOnLocation: true\n}]->(o)"
2025-03-06 20:36:44,684 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes\nMATCH \n  (r:Person {name: 'Robert Wise'}), // Assuming Robert Wise exists from original data\n  (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (r)-[:DIRECTED {\n    year: 1965,\n    daysOnSet: 145,\n    satisfaction: 4.9,\n    awardNominations: 10,\n    completionDate: date('1964-11-15'),\n    premiereEvent: datetime('1965-03-02T19:30:00-05:00'),\n    durationMonths: 5,\n    isFirstMusical: false,\n    onLocationPercentage: 60\n}]->(s)"
2025-03-06 20:36:44,689 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (a:Person:GeneratedByClaudeAI {name: 'Alfred Hitchcock'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Psycho'})\nCREATE (a)-[:DIRECTED {\n    year: 1960,\n    daysOnSet: 45,\n    satisfaction: 4.8,\n    studioInterference: 'Low',\n    completionDate: date('1960-02-01'),\n    premiereEvent: datetime('1960-06-16T20:00:00-05:00'),\n    durationMonths: 2,\n    isLowBudget: true,\n    blackAndWhiteDecision: 'Artistic and practical'\n}]->(p)"
2025-03-06 20:36:44,694 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (j:Person:GeneratedByClaudeAI {name: 'James Cameron'}),\n  (a:Movie:GeneratedByClaudeAI {title: 'Avatar'})\nCREATE (j)-[:DIRECTED {\n    year: 2009,\n    daysOnSet: 198,\n    satisfaction: 4.9,\n    awardNominations: 9,\n    completionDate: date('2009-11-01'),\n    premiereEvent: datetime('2009-12-10T19:00:00-05:00'),\n    durationMonths: 8,\n    isTechnicalInnovation: true,\n    developmentYears: 15\n}]->(a)"
2025-03-06 20:36:44,697 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (r:Person:GeneratedByClaudeAI {name: 'Ryan Coogler'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Black Panther'})\nCREATE (r)-[:DIRECTED {\n    year: 2018,\n    daysOnSet: 132,\n    satisfaction: 4.9,\n    awardNominations: 7,\n    completionDate: date('2017-11-10'),\n    premiereEvent: datetime('2018-01-29T20:00:00-05:00'),\n    durationMonths: 3,\n    marvelInvolvement: 'Supportive',\n    culturalConsultants: 12\n}]->(b)"
2025-03-06 20:36:44,700 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (s:Person:GeneratedByClaudeAI {name: 'Sofia Coppola'}),\n  (l:Movie:GeneratedByClaudeAI {title: 'Lost in Translation'})\nCREATE (s)-[:DIRECTED {\n    year: 2003,\n    daysOnSet: 27,\n    satisfaction: 4.9,\n    awardNominations: 4,\n    awardWins: 1,\n    completionDate: date('2002-12-15'),\n    premiereEvent: datetime('2003-08-29T19:30:00+02:00'),\n    durationMonths: 1,\n    isPersonalStory: true,\n    improvisation: 'Significant'\n}]->(l)"
2025-03-06 20:36:44,704 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships\nMATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Julie Andrews'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (j)-[:ACTED_IN {\n    roles: ['Maria von Trapp'],\n    salary: 150000,\n    screenTimeMinutes: 145,\n    startDate: date('1964-03-26'),\n    endDate: date('1964-09-01'),\n    scheduleConflicts: false,\n    criticScore: 95,\n    audienceScore: 98,\n    awardNominations: 5,\n    awardWins: 1,\n    songsPerformed: 10\n}]->(s)"
2025-03-06 20:36:44,708 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Anthony Perkins'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Psycho'})\nCREATE (a)-[:ACTED_IN {\n    roles: ['Norman Bates'],\n    salary: 40000,\n    screenTimeMinutes: 60,\n    startDate: date('1959-11-11'),\n    endDate: date('1960-02-01'),\n    scheduleConflicts: false,\n    criticScore: 96,\n    audienceScore: 93,\n    awardNominations: 1,\n    careerDefiningRole: true\n}]->(p)"
2025-03-06 20:36:44,711 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Person:GeneratedByClaudeAI {name: 'Sam Worthington'}),\n  (a:Movie:GeneratedByClaudeAI {title: 'Avatar'})\nCREATE (s)-[:ACTED_IN {\n    roles: ['Jake Sully'],\n    salary: 5000000,\n    screenTimeMinutes: 138,\n    startDate: date('2007-04-16'),\n    endDate: date('2007-12-15'),\n    scheduleConflicts: false,\n    criticScore: 90,\n    audienceScore: 92,\n    motionCaptureHours: 1250,\n    physicalTrainingMonths: 6\n}]->(a)"
2025-03-06 20:36:44,714 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Chadwick Boseman'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Black Panther'})\nCREATE (c)-[:ACTED_IN {\n    roles: ['T\\'Challa/Black Panther'],\n    salary: 2000000,\n    screenTimeMinutes: 105,\n    startDate: date('2017-01-15'),\n    endDate: date('2017-04-19'),\n    scheduleConflicts: false,\n    criticScore: 97,\n    audienceScore: 96,\n    awardNominations: 2,\n    stuntTrainingHours: 375,\n    dialectCoaching: true\n}]->(b)"
2025-03-06 20:36:44,717 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Person:GeneratedByClaudeAI {name: 'Scarlett Johansson'}),\n  (l:Movie:GeneratedByClaudeAI {title: 'Lost in Translation'})\nCREATE (s)-[:ACTED_IN {\n    roles: ['Charlotte'],\n    salary: 750000,\n    screenTimeMinutes: 85,\n    startDate: date('2002-09-29'),\n    endDate: date('2002-10-25'),\n    scheduleConflicts: false,\n    criticScore: 95,\n    audienceScore: 90,\n    awardNominations: 5,\n    awardWins: 1,\n    ageAtFilming: 17\n}]->(l)"
2025-03-06 20:36:44,718 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "// Studio relationships\nMATCH\n  (t:Studio:GeneratedByClaudeAI {name: 'TwentiethCenturyFox'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (t)-[:PRODUCED {\n    investment: 8200000,\n    return: 286214286,\n    roi: 34.9,\n    contractSigned: date('1963-08-15'),\n    studioShare: 0.7,\n    directorShare: 0.1,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 2000000,\n    isProfitable: true,\n    marketingStart: datetime('1964-12-15T00:00:00Z'),\n    recordBreakingSuccess: true\n}]->(s)"
2025-03-06 20:36:44,721 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (ps))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Studio:GeneratedByClaudeAI {name: 'Paramount Pictures'}),\n  (ps:Movie:GeneratedByClaudeAI {title: 'Psycho'})\nCREATE (p)-[:PRODUCED {\n    investment: 806947,\n    return: 50000000,\n    roi: 61.96,\n    contractSigned: date('1959-08-23'),\n    studioShare: 0.6,\n    directorShare: 0.3,\n    producerShare: 0.05,\n    topCastShare: 0.05,\n    marketingBudget: 500000,\n    isProfitable: true,\n    marketingStart: datetime('1960-04-15T00:00:00Z'),\n    hitchcockDeal: 'Backend percentage'\n}]->(ps)"
2025-03-06 20:36:44,723 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (t:Studio:GeneratedByClaudeAI {name: 'TwentiethCenturyFox'}),\n  (a:Movie:GeneratedByClaudeAI {title: 'Avatar'})\nCREATE (t)-[:PRODUCED {\n    investment: 237000000,\n    return: 2923706026,\n    roi: 12.34,\n    contractSigned: date('2005-10-15'),\n    studioShare: 0.5,\n    directorShare: 0.3,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 150000000,\n    isProfitable: true,\n    marketingStart: datetime('2009-05-15T00:00:00Z'),\n    highestGrossingMilestone: date('2010-01-25')\n}]->(a)"
2025-03-06 20:36:44,724 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (d:Studio {name: 'The Walt Disney Company'}), // Assuming Disney exists in original data\n  (b:Movie:GeneratedByClaudeAI {title: 'Black Panther'})\nCREATE (d)-[:PRODUCED {\n    investment: 200000000,\n    return: 1347280838,\n    roi: 6.74,\n    contractSigned: date('2016-04-10'),\n    studioShare: 0.7,\n    directorShare: 0.1,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 150000000,\n    isProfitable: true,\n    marketingStart: datetime('2017-07-22T00:00:00Z'),\n    marvelCinematicUniverseEntry: 18\n}]->(b)"
2025-03-06 20:36:44,725 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (f:Studio:GeneratedByClaudeAI {name: 'Focus Features'}),\n  (l:Movie:GeneratedByClaudeAI {title: 'Lost in Translation'})\nCREATE (f)-[:PRODUCED {\n    investment: 4000000,\n    return: 119723856,\n    roi: 29.93,\n    contractSigned: date('2002-06-15'),\n    studioShare: 0.5,\n    directorShare: 0.25,\n    producerShare: 0.15,\n    topCastShare: 0.1,\n    marketingBudget: 10000000,\n    isProfitable: true,\n    marketingStart: datetime('2003-07-15T00:00:00Z'),\n    indieBreakoutStatus: true\n}]->(l)"
2025-03-06 20:36:44,727 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (t:Studio:GeneratedByClaudeAI {name: 'TwentiethCenturyFox'}),\n  (p:Production:GeneratedByClaudeAI {name: 'The Sound of Music Production'})\nCREATE (t)-[:FINANCED {\n    contractDate: date('1963-08-15'),\n    amount: 8200000,\n    isFullyPaid: true,\n    transferTime1: datetime('1963-10-15T00:00:00Z'),\n    transferTime2: datetime('1964-01-15T00:00:00Z'),\n    transferTime3: datetime('1964-04-15T00:00:00Z'),\n    paymentDate1: date('1963-10-15'),\n    paymentAmount1: 2500000,\n    paymentDate2: date('1964-01-15'),\n    paymentAmount2: 3000000,\n    paymentDate3: date('1964-04-15'),\n    paymentAmount3: 2700000,\n    locationPermitHandling: 'Studio managed'\n}]->(p)"
2025-03-06 20:36:44,730 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (pr))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Studio:GeneratedByClaudeAI {name: 'Paramount Pictures'}),\n  (pr:Production:GeneratedByClaudeAI {name: 'Psycho Production'})\nCREATE (p)-[:FINANCED {\n    contractDate: date('1959-08-23'),\n    amount: 806947,\n    isFullyPaid: true,\n    transferTime1: datetime('1959-10-01T00:00:00Z'),\n    transferTime2: datetime('1959-12-15T00:00:00Z'),\n    paymentDate1: date('1959-10-01'),\n    paymentAmount1: 400000,\n    paymentDate2: date('1959-12-15'),\n    paymentAmount2: 406947,\n    hitchcockOwnPercentage: 60,\n    unusualDeal: true\n}]->(pr)"
2025-03-06 20:36:44,731 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (t:Studio:GeneratedByClaudeAI {name: 'TwentiethCenturyFox'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Avatar Production'})\nCREATE (t)-[:FINANCED {\n    contractDate: date('2005-10-15'),\n    amount: 237000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2006-01-15T00:00:00Z'),\n    transferTime2: datetime('2006-07-15T00:00:00Z'),\n    transferTime3: datetime('2007-01-15T00:00:00Z'),\n    transferTime4: datetime('2007-07-15T00:00:00Z'),\n    paymentDate1: date('2006-01-15'),\n    paymentAmount1: 50000000,\n    paymentDate2: date('2006-07-15'),\n    paymentAmount2: 60000000,\n    paymentDate3: date('2007-01-15'),\n    paymentAmount3: 70000000,\n    paymentDate4: date('2007-07-15'),\n    paymentAmount4: 57000000,\n    technologyDevelopmentFunding: true\n}]->(p)"
2025-03-06 20:36:44,734 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'The Sound of Music Production'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 5,\n    durationDays: 6,\n    locationCount: 15,\n    soundstageCount: 8,\n    dailyAverageCost: 56000,\n    scheduleAdherence: 0.92,\n    weatherDelaysDays: 10,\n    originalScheduledEnd: date('1964-08-20'),\n    locationFilmingPercentage: 60,\n    musicalNumbersFilmed: 15\n}]->(s)"
2025-03-06 20:36:44,736 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (ps))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Psycho Production'}),\n  (ps:Movie:GeneratedByClaudeAI {title: 'Psycho'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 2,\n    durationDays: 21,\n    setCount: 12,\n    studioFilmingPercentage: 90,\n    dailyAverageCost: 12000,\n    scheduleAdherence: 0.95,\n    originalScheduledEnd: date('1960-01-25'),\n    blackAndWhiteFormat: true,\n    crewSize: 85,\n    secrecyLevel: 'Extreme'\n}]->(ps)"
2025-03-06 20:36:44,738 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationships\nMATCH\n  (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (s)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 1966,\n    ceremony: 38,\n    isWinner: true,\n    ceremonyDate: date('1966-04-18'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 2451,\n    votesAgainst: 1254,\n    producerAccepting: 'Robert Wise',\n    culturalImpact: 'Mainstream musical legitimacy'\n}]->(a)"
2025-03-06 20:36:44,743 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Julie Andrews'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (j)-[:NOMINATED_FOR {\n    category: 'Best Actress',\n    year: 1966,\n    ceremony: 38,\n    isWinner: false,\n    ceremonyDate: date('1966-04-18'),\n    announcementTime: localtime('20:30:00'),\n    votesFor: 1854,\n    votesAgainst: 1978,\n    previousWin: true,\n    previousWinYear: 1965\n}]->(a)"
2025-03-06 20:36:44,747 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a2))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Movie:GeneratedByClaudeAI {title: 'Avatar'}),\n  (a2:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (a)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2010,\n    ceremony: 82,\n    isWinner: false,\n    ceremonyDate: date('2010-03-07'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 2350,\n    votesAgainst: 2650,\n    techAwards: 3,\n    competitionWinner: 'The Hurt Locker'\n}]->(a2)"
2025-03-06 20:36:44,749 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (b:Movie:GeneratedByClaudeAI {title: 'Black Panther'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (b)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2019,\n    ceremony: 91,\n    isWinner: false,\n    ceremonyDate: date('2019-02-24'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 1850,\n    votesAgainst: 2050,\n    historicalSignificance: 'First superhero film nominated',\n    culturalMilestone: true\n}]->(a)"
2025-03-06 20:36:44,753 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Person:GeneratedByClaudeAI {name: 'Sofia Coppola'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (s)-[:NOMINATED_FOR {\n    category: 'Best Original Screenplay',\n    year: 2004,\n    ceremony: 76,\n    isWinner: true,\n    ceremonyDate: date('2004-02-29'),\n    announcementTime: localtime('20:15:00'),\n    votesFor: 2456,\n    votesAgainst: 1850,\n    speechDuration: duration({minutes: 1, seconds: 45}),\n    secondGenerationWinner: true\n}]->(a)"
2025-03-06 20:36:44,757 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Professional relationships between people\nMATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Julie Andrews'}),\n  (r:Person {name: 'Rob Reiner'}) // Original person from graph\nCREATE (j)-[:KNOWS {\n    since: date('1972-05-15'),\n    relationship: 'Professional Colleagues',\n    lastMeeting: date('2019-12-10'),\n    durationYears: 47,\n    commonProjects: 0,\n    industryEvents: 23\n}]->(r)"
2025-03-06 20:36:44,759 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Alfred Hitchcock'}),\n  (t:Person {name: 'Tom Hanks'}) // Original person from graph\nCREATE (a)-[:INFLUENCED {\n    startYear: 1960,\n    directInfluence: false,\n    mentionedInInterviews: 15,\n    cinematicTechniques: ['Camera movement', 'Suspense building', 'Audience manipulation'],\n    influenceStrength: [8.5, 9.2, 8.8],\n    culturalConnection: 'Directorial craft'\n}]->(t)"
2025-03-06 20:36:44,763 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'James Cameron'}),\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'})\nCREATE (j)-[:KNOWS {\n    since: date('2000-07-22'),\n    relationship: 'Professional Peers',\n    lastMeeting: date('2023-11-15'),\n    durationYears: 23,\n    mutualRespectLevel: 'Very High',\n    technicalExchanges: 8\n}]->(c)"
2025-03-06 20:36:44,765 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s2))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Person:GeneratedByClaudeAI {name: 'Sofia Coppola'}),\n  (s2:Person:GeneratedByClaudeAI {name: 'Scarlett Johansson'})\nCREATE (s)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'Lost in Translation',\n    firstYear: 2003,\n    chemistry: 4.9,\n    interviews: 42,\n    relationship: 'Director-Actor',\n    awardsCelebrated: 5,\n    reunionDiscussions: 3\n}]->(s2)"
2025-03-06 20:36:44,767 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (st))} {position: line: 17, column: 1, offset: 561} for query: "// Create soundtracks\nCREATE (SoundOfMusicSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'The Sound of Music (Original Motion Picture Soundtrack)',\n    composer: 'Richard Rodgers',\n    lyricist: 'Oscar Hammerstein II',\n    released: date('1965-03-02'),\n    duration: duration({minutes: 87, seconds: 12}),\n    trackCount: 20,\n    recordingStudio: 'Todd-AO Scoring Stage',\n    recordingStudioLat: 34.1381,\n    recordingStudioLong: -118.3534,\n    peakChartPosition: 1,\n    weeksAtNumberOne: 70,\n    salesUnits: 20000000,\n    streamingCount: 120000000\n})\nWITH 1 as dummy\nMATCH (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'}),\n      (st:Soundtrack:GeneratedByClaudeAI {title: 'The Sound of Music (Original Motion Picture Soundtrack)'})\nCREATE (st)-[:COMPOSED_FOR {\n    contractDate: date('1964-01-15'),\n    completion: date('1964-11-22'),\n    nominatedAwards: ['Academy Award', 'Grammy Award'],\n    wonAwards: ['Academy Award', 'Grammy Award'],\n    goldRecords: 1,\n    platinumRecords: 2,\n    iconicSongs: ['Do-Re-Mi', 'My Favorite Things', 'Edelweiss', 'Climb Ev\\'ry Mountain']\n}]->(s)"
2025-03-06 20:36:44,770 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (st))} {position: line: 16, column: 1, offset: 503} for query: "CREATE (PsychoSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'Psycho (Original Motion Picture Soundtrack)',\n    composer: 'Bernard Herrmann',\n    released: date('1960-09-16'),\n    duration: duration({minutes: 45, seconds: 38}),\n    trackCount: 14,\n    recordingStudio: 'Paramount Scoring Stage',\n    recordingStudioLat: 34.0841,\n    recordingStudioLong: -118.3213,\n    peakChartPosition: 32,\n    salesUnits: 250000,\n    streamingCount: 85000000,\n    stringsOnly: true\n})\nWITH 1 as dummy\nMATCH (p:Movie:GeneratedByClaudeAI {title: 'Psycho'}),\n      (st:Soundtrack:GeneratedByClaudeAI {title: 'Psycho (Original Motion Picture Soundtrack)'})\nCREATE (st)-[:COMPOSED_FOR {\n    contractDate: date('1959-12-01'),\n    completion: date('1960-01-15'),\n    nominatedAwards: ['Grammy Award'],\n    wonAwards: [],\n    iconicTracks: ['The Murder', 'Prelude', 'The Cellar'],\n    culturalInfluence: 'Revolutionized horror scoring',\n    stringInstrumentCount: 18,\n    recordingDays: 7\n}]->(p)"
2025-03-06 20:36:44,772 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 17, column: 1, offset: 428} for query: "// Create filming locations\nCREATE (SalzburgLocation:FilmingLocation:GeneratedByClaudeAI {\n    name: 'Salzburg',\n    country: 'Austria',\n    region: 'Salzburg State',\n    latitude: 47.8095,\n    longitude: 13.0550,\n    elevation: 424,\n    elevationUnit: 'm',\n    climate: 'Temperate',\n    permitCost: 150000,\n    permitCurrency: 'USD',\n    firstUsed: date('1964-04-15'),\n    lastUsed: date('1964-06-28'),\n    tourismIncrease: 250\n})\nWITH 1 as dummy\nMATCH (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'}),\n      (l:FilmingLocation:GeneratedByClaudeAI {name: 'Salzburg'})\nCREATE (s)-[:FILMED_AT {\n    startDate: date('1964-04-15'),\n    endDate: date('1964-06-28'),\n    sceneCount: 45,\n    totalDays: 75,\n    weatherDelayDays: 10,\n    crewSize: 150,\n    logisticsCost: 850000,\n    accommodationCost: 450000,\n    characterPresent: ['Maria', 'Von Trapp Family', 'Captain von Trapp'],\n    touristSiteToday: true\n}]->(l)"
2025-03-06 20:36:44,775 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 16, column: 1, offset: 406} for query: "CREATE (UniversalLot:FilmingLocation:GeneratedByClaudeAI {\n    name: 'Universal Studios Backlot',\n    country: 'USA',\n    region: 'California',\n    latitude: 34.1381,\n    longitude: -118.3534,\n    elevation: 210,\n    elevationUnit: 'm',\n    climate: 'Mediterranean',\n    studioOwned: true,\n    firstUsed: date('1915-03-15'),\n    lastUsed: date('2024-01-15'),\n    filmCount: 8452\n})\nWITH 1 as dummy\nMATCH (p:Movie:GeneratedByClaudeAI {title: 'Psycho'}),\n      (l:FilmingLocation:GeneratedByClaudeAI {name: 'Universal Studios Backlot'})\nCREATE (p)-[:FILMED_AT {\n    startDate: date('1959-11-11'),\n    endDate: date('1960-02-01'),\n    sceneCount: 85,\n    totalDays: 40,\n    weatherDelayDays: 2,\n    crewSize: 85,\n    setsBulit: 12,\n    iconicSet: 'Bates Motel',\n    setPreservationStatus: 'Tourist attraction',\n    touristVisitsAnnually: 5000000\n}]->(l)"
2025-03-06 20:36:44,777 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 17, column: 1, offset: 485} for query: "// Create costume designers\nCREATE (DorotyJeakins:Person:GeneratedByClaudeAI {\n    name: 'Dorothy Jeakins',\n    born: 1914,\n    died: 1995,\n    birthdate: date('1914-01-11'),\n    deathdate: date('1995-11-27'),\n    nationality: 'American',\n    oscarWins: 3,\n    oscarNominations: 12,\n    isActive: false,\n    firstFilm: datetime('1946-08-15T00:00:00Z'),\n    lastFilm: datetime('1987-06-25T00:00:00Z'),\n    careerLength: duration({years: 41}),\n    specialization: 'Period Costume Design'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Dorothy Jeakins'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (p)-[:DESIGNED_COSTUMES_FOR {\n    year: 1965,\n    costumesCreated: 850,\n    budget: 400000,\n    awardNominations: 1,\n    awardWins: 0,\n    startDate: date('1963-12-15'),\n    completionDate: date('1964-03-10'),\n    specialCostumes: ['Maria\\'s wedding dress', 'Children\\'s play clothes', 'Baroness evening gowns'],\n    researchHours: 350,\n    historicalAccuracy: 'High with artistic license',\n    fabricsUsed: 85\n}]->(s)"
2025-03-06 20:36:44,780 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (ps))} {position: line: 16, column: 1, offset: 467} for query: "CREATE (HelenColvig:Person:GeneratedByClaudeAI {\n    name: 'Helen Colvig',\n    born: 1918,\n    died: 1991,\n    birthdate: date('1918-05-22'),\n    deathdate: date('1991-08-15'),\n    nationality: 'American',\n    oscarNominations: 1,\n    isActive: false,\n    firstFilm: datetime('1952-06-15T00:00:00Z'),\n    lastFilm: datetime('1980-11-22T00:00:00Z'),\n    careerLength: duration({years: 28}),\n    specialization: 'Contemporary Costume Design'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Helen Colvig'}),\n      (ps:Movie:GeneratedByClaudeAI {title: 'Psycho'})\nCREATE (p)-[:DESIGNED_COSTUMES_FOR {\n    year: 1960,\n    costumesCreated: 120,\n    budget: 35000,\n    awardNominations: 0,\n    awardWins: 0,\n    startDate: date('1959-10-01'),\n    completionDate: date('1959-11-05'),\n    specialCostumes: ['Norman\\'s sweaters', 'Marion\\'s suits', 'Mother\\'s dress'],\n    researchHours: 125,\n    psychologicalSignificance: 'High',\n    blackAndWhiteConsiderations: true\n}]->(ps)"
2025-03-06 20:36:44,786 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 16, column: 1, offset: 457} for query: "// Create cinematographer relationships\nCREATE (TedMcCord:Person:GeneratedByClaudeAI {\n    name: 'Ted McCord',\n    born: 1900,\n    died: 1976,\n    birthdate: date('1900-08-02'),\n    deathdate: date('1976-01-19'),\n    nationality: 'American',\n    oscarNominations: 3,\n    isActive: false,\n    firstFilm: datetime('1930-05-15T00:00:00Z'),\n    lastFilm: datetime('1968-11-22T00:00:00Z'),\n    careerLength: duration({years: 38}),\n    visualStyle: 'Vivid color compositions'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Ted McCord'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (p)-[:CINEMATOGRAPHY_FOR {\n    year: 1965,\n    cameras: ['Mitchell BNC', 'Todd-AO Cameras'],\n    lenses: ['Todd-AO Lenses', 'Panavision Anamorphic'],\n    awardNominations: 1,\n    awardWins: 0,\n    startDate: date('1964-03-26'),\n    completionDate: date('1964-09-01'),\n    signature_shots: ['Mountain opening', 'Gazebo scenes', 'Wedding procession'],\n    lighting_setups: 215,\n    colorProcess: 'DeLuxe Color',\n    aspectRatio: '2.20:1'\n}]->(s)"
2025-03-06 20:36:44,789 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (ps))} {position: line: 16, column: 1, offset: 470} for query: "CREATE (JohnLRussell:Person:GeneratedByClaudeAI {\n    name: 'John L. Russell',\n    born: 1905,\n    died: 1967,\n    birthdate: date('1905-01-03'),\n    deathdate: date('1967-02-01'),\n    nationality: 'American',\n    oscarNominations: 0,\n    isActive: false,\n    firstFilm: datetime('1940-05-15T00:00:00Z'),\n    lastFilm: datetime('1966-11-22T00:00:00Z'),\n    careerLength: duration({years: 26}),\n    visualStyle: 'High contrast black and white'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'John L. Russell'}),\n      (ps:Movie:GeneratedByClaudeAI {title: 'Psycho'})\nCREATE (p)-[:CINEMATOGRAPHY_FOR {\n    year: 1960,\n    cameras: ['Mitchell NC', 'Arriflex 35'],\n    lenses: ['Cooke Speed Panchro', 'Bausch & Lomb Baltar'],\n    awardNominations: 0,\n    awardWins: 0,\n    startDate: date('1959-11-11'),\n    completionDate: date('1960-02-01'),\n    signature_shots: ['Shower scene', 'House on hill', 'Car sinking in swamp'],\n    lighting_setups: 145,\n    blackAndWhiteFilmStock: 'Eastman Double-X Negative',\n    televisionExperience: true\n}]->(ps)"
2025-03-06 20:36:44,792 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Create more connections between original and new graph\nMATCH\n  (o:Person:GeneratedByClaudeAI {name: 'Orson Welles'}),\n  (a:Person:GeneratedByClaudeAI {name: 'Alfred Hitchcock'})\nCREATE (o)-[:ADMIRED {\n    since: date('1940-06-15'),\n    publicStatements: 8,\n    mutualRespect: true,\n    commonTechniques: ['Deep focus', 'Innovative camera angles', 'Psychological suspense'],\n    techniqueOverlap: [9.2, 8.5, 9.7],\n    cinematicInfluence: 'Bidirectional'\n}]->(a)"
2025-03-06 20:36:44,797 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Person:GeneratedByClaudeAI {name: 'Sofia Coppola'}),\n  (b:Person:GeneratedByClaudeAI {name: 'Bong Joon-ho'})\nCREATE (s)-[:KNOWS {\n    since: date('2012-05-22'),\n    relationship: 'Festival circuit colleagues',\n    lastMeeting: date('2023-05-17'),\n    durationYears: 11,\n    festivalEncounters: 8,\n    mutualAdmiration: true\n}]->(b)"
2025-03-06 20:36:44,800 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 15, column: 1, offset: 427} for query: "// Create fan community for classic film\nCREATE (SoundOfMusicFandom:FanCommunity:GeneratedByClaudeAI {\n    name: 'The Sound of Music Fan Community',\n    established: date('1965-06-15'),\n    revival: date('2005-03-02'),\n    memberCount: 850000,\n    onlinePlatforms: 12,\n    annualTours: 850,\n    largestEventAttendance: 25000,\n    singAlongEvents: 450,\n    tourismRevenue: 35000000,\n    tourismRevenueCurrency: 'USD',\n    academicStudies: 85\n})\nWITH 1 as dummy\nMATCH (f:FanCommunity:GeneratedByClaudeAI {name: 'The Sound of Music Fan Community'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (f)-[:CELEBRATES {\n    yearsActive: 59,\n    tourLocations: ['Salzburg', 'Vienna', 'Vermont'],\n    annualFestivals: 5,\n    merchandiseSales: 12000000,\n    generationalAppeal: 'Multi-generational',\n    songbooksPublished: 45,\n    academicConferences: 12,\n    recreationsPerformed: 'Global',\n    culturalPreservation: 'Significant',\n    archivalCollections: 15\n}]->(s)"
2025-03-06 20:36:44,803 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 527} for query: "// Create educational program for classic film studies\nCREATE (HitchcockStudyProgram:EducationalProgram:GeneratedByClaudeAI {\n    name: 'Hitchcock Film Analysis Curriculum',\n    developed: date('1980-05-15'),\n    institutionsAdopting: 2450,\n    targetEducationLevels: ['University', 'Film School', 'High School Advanced'],\n    materialFormats: ['Digital', 'Print', 'Video supplements', 'Interactive'],\n    languagesAvailable: 28,\n    courseDuration: duration({weeks: 12}),\n    totalLessonHours: 85,\n    scholarlyEndorsements: 125,\n    educatorRating: 9.6\n})\nWITH 1 as dummy\nMATCH (e:EducationalProgram:GeneratedByClaudeAI {name: 'Hitchcock Film Analysis Curriculum'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'Psycho'})\nCREATE (e)-[:ANALYZES {\n    focusAreas: ['Suspense techniques', 'Visual symbolism', 'Psychological themes', 'Cultural context', 'Narrative structure'],\n    focusDistribution: [0.25, 0.20, 0.25, 0.15, 0.15],\n    analyticalApproaches: ['Auteur theory', 'Psychoanalytic', 'Feminist', 'Cultural'],\n    studentFeedbackScore: 9.3,\n    criticalThinkingDevelopment: 'Very High',\n    filmTechniqueRecognition: 'Expert',\n    shotByShot: true,\n    filmStudiesImpact: 'Foundational',\n    globalAdoption: 'Standard curriculum',\n    academicPaperGeneration: 850\n}]->(p)"
2025-03-06 20:36:44,806 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 16, column: 1, offset: 456} for query: "// Create theme park attraction\nCREATE (SoundOfMusicTour:Attraction:GeneratedByClaudeAI {\n    name: 'The Original Sound of Music Tour',\n    opened: date('1967-05-15'),\n    locationLat: 47.8095,\n    locationLong: 13.0550,\n    visitorCapacity: 250,\n    visitorDuration: duration({hours: 4, minutes: 0}),\n    annualVisitors: 350000,\n    routeLength: 25,\n    lengthUnit: 'kilometers',\n    developmentCost: 25000,\n    interactiveElements: 8,\n    historicalSites: 15\n})\nWITH 1 as dummy\nMATCH (a:Attraction:GeneratedByClaudeAI {name: 'The Original Sound of Music Tour'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (a)-[:BASED_ON {\n    filmElementsFeatured: ['Gazebo', 'Nonnberg Abbey', 'Mirabell Gardens', 'Von Trapp villa exterior'],\n    educationalFocus: 0.6,\n    entertainmentFocus: 0.4,\n    audienceRating: 9.5,\n    historicalContextualization: 'Both film and true story',\n    originalSitesCurated: 12,\n    songPerformanceLocations: 8,\n    filmingLocationAccuracy: 'Very high',\n    culturalImpactMetrics: ['Tourism boost', 'City identity', 'Film pilgrimage'],\n    economicContribution: 37500000\n}]->(s)"
2025-03-06 20:36:44,808 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 16, column: 1, offset: 521} for query: "// Create merchandising relationship\nCREATE (AvatarMerchandise:Merchandise:GeneratedByClaudeAI {\n    name: 'Avatar Collector\\'s Edition Box Set',\n    released: date('2010-11-16'),\n    manufacturer: '20th Century Fox Home Entertainment',\n    manufacturerLocationLat: 34.0746,\n    manufacturerLocationLong: -118.3798,\n    retailPrice: 99.99,\n    priceCurrency: 'USD',\n    productionRun: 250000,\n    specialFeatures: 15,\n    limitedEdition: true,\n    packagingInnovation: 'Interactive AR features',\n    collectorValue: 'Appreciating'\n})\nWITH 1 as dummy\nMATCH (m:Merchandise:GeneratedByClaudeAI {name: 'Avatar Collector\\'s Edition Box Set'}),\n      (a:Movie:GeneratedByClaudeAI {title: 'Avatar'})\nCREATE (m)-[:DERIVED_FROM {\n    licensingDeal: date('2010-02-15'),\n    unitsSold: 185000,\n    geographicalDistribution: ['North America', 'Europe', 'Asia', 'Australia'],\n    salesDistribution: [0.60, 0.25, 0.10, 0.05],\n    retailersCarrying: 12500,\n    digitalCodeInclusion: true,\n    specialContentHours: 8.5,\n    brandRecognition: 0.92,\n    merchandisingLongevity: 'Still in demand, secondary market',\n    collectibleResaleValue: 350\n}]->(a)"
2025-03-06 20:36:44,875 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes\nMATCH \n  (j:Person:GeneratedByClaudeAI {name: 'James Cameron'}),\n  (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (j)-[:DIRECTED {\n    year: 1997,\n    daysOnSet: 160,\n    satisfaction: 4.8,\n    awardNominations: 14,\n    awardWins: 11,\n    completionDate: date('1997-07-31'),\n    premiereEvent: datetime('1997-12-14T19:30:00-05:00'),\n    durationMonths: 7,\n    budgetOverruns: true,\n    scheduleOverruns: true\n}]->(t)"
2025-03-06 20:36:44,879 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (f:Person:GeneratedByClaudeAI {name: 'Francis Ford Coppola'}),\n  (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'})\nCREATE (f)-[:DIRECTED {\n    year: 1972,\n    daysOnSet: 112,\n    satisfaction: 4.7,\n    awardNominations: 11,\n    awardWins: 3,\n    completionDate: date('1971-11-25'),\n    premiereEvent: datetime('1972-03-14T20:00:00-05:00'),\n    durationMonths: 4,\n    studioFights: true,\n    castingBattles: 'Significant'\n}]->(g)"
2025-03-06 20:36:44,882 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'The Dark Knight'})\nCREATE (c)-[:DIRECTED {\n    year: 2008,\n    daysOnSet: 127,\n    satisfaction: 4.9,\n    awardNominations: 8,\n    awardWins: 2,\n    completionDate: date('2008-04-15'),\n    premiereEvent: datetime('2008-07-14T19:00:00-04:00'),\n    durationMonths: 6,\n    iMAXUsage: 'Extensive',\n    practicalEffectsPercentage: 70\n}]->(d)"
2025-03-06 20:36:44,889 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (q:Person:GeneratedByClaudeAI {name: 'Quentin Tarantino'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Pulp Fiction'})\nCREATE (q)-[:DIRECTED {\n    year: 1994,\n    daysOnSet: 51,\n    satisfaction: 4.9,\n    awardNominations: 7,\n    awardWins: 1,\n    completionDate: date('1994-01-30'),\n    premiereEvent: datetime('1994-05-21T20:30:00+02:00'),\n    durationMonths: 2,\n    scriptToScreen: 'Nearly identical',\n    nonLinearExperiment: true\n}]->(p)"
2025-03-06 20:36:44,891 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (a:Person:GeneratedByClaudeAI {name: 'Ang Lee'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Crouching Tiger, Hidden Dragon'})\nCREATE (a)-[:DIRECTED {\n    year: 2000,\n    daysOnSet: 135,\n    satisfaction: 4.8,\n    awardNominations: 10,\n    awardWins: 4,\n    completionDate: date('1999-12-25'),\n    premiereEvent: datetime('2000-05-18T21:00:00+02:00'),\n    durationMonths: 5,\n    crossCulturalChallenges: true,\n    actionChoreography: 'Revolutionary'\n}]->(c)"
2025-03-06 20:36:44,894 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships\nMATCH\n  (k:Person:GeneratedByClaudeAI {name: 'Kate Winslet'}),\n  (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (k)-[:ACTED_IN {\n    roles: ['Rose DeWitt Bukater'],\n    salary: 2000000,\n    screenTimeMinutes: 120,\n    startDate: date('1996-07-31'),\n    endDate: date('1997-03-23'),\n    scheduleConflicts: false,\n    criticScore: 94,\n    audienceScore: 95,\n    awardNominations: 2,\n    awardWins: 0,\n    underwaterScenes: 7\n}]->(t)"
2025-03-06 20:36:44,899 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Al Pacino'}),\n  (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'})\nCREATE (a)-[:ACTED_IN {\n    roles: ['Michael Corleone'],\n    salary: 35000,\n    screenTimeMinutes: 95,\n    startDate: date('1971-03-29'),\n    endDate: date('1971-08-07'),\n    scheduleConflicts: false,\n    criticScore: 98,\n    audienceScore: 97,\n    awardNominations: 1,\n    awardWins: 0,\n    studioOpposition: true\n}]->(g)"
2025-03-06 20:36:44,902 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (h:Person:GeneratedByClaudeAI {name: 'Heath Ledger'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'The Dark Knight'})\nCREATE (h)-[:ACTED_IN {\n    roles: ['Joker'],\n    salary: 5000000,\n    screenTimeMinutes: 33,\n    startDate: date('2007-04-18'),\n    endDate: date('2007-08-25'),\n    scheduleConflicts: false,\n    criticScore: 99,\n    audienceScore: 98,\n    awardNominations: 10,\n    awardWins: 8,\n    characterImmersion: 'Extreme'\n}]->(d)"
2025-03-06 20:36:44,906 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (u:Person:GeneratedByClaudeAI {name: 'Uma Thurman'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Pulp Fiction'})\nCREATE (u)-[:ACTED_IN {\n    roles: ['Mia Wallace'],\n    salary: 500000,\n    screenTimeMinutes: 28,\n    startDate: date('1993-09-20'),\n    endDate: date('1993-10-15'),\n    scheduleConflicts: false,\n    criticScore: 96,\n    audienceScore: 95,\n    awardNominations: 1,\n    awardWins: 0,\n    iconicScenes: ['Twist contest', 'Adrenaline shot']\n}]->(p)"
2025-03-06 20:36:44,908 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Michelle Yeoh'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Crouching Tiger, Hidden Dragon'})\nCREATE (m)-[:ACTED_IN {\n    roles: ['Yu Shu Lien'],\n    salary: 1000000,\n    screenTimeMinutes: 95,\n    startDate: date('1999-04-15'),\n    endDate: date('1999-09-17'),\n    scheduleConflicts: false,\n    criticScore: 97,\n    audienceScore: 94,\n    awardNominations: 5,\n    awardWins: 2,\n    martialArtsPerformed: true,\n    stuntPercentage: 90\n}]->(c)"
2025-03-06 20:36:44,911 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Studio relationships\nMATCH\n  (p:Studio:GeneratedByClaudeAI {name: 'Paramount Pictures'}),\n  (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (p)-[:PRODUCED {\n    investment: 100000000,\n    return: 1097585239,\n    roi: 10.98,\n    contractSigned: date('1995-12-15'),\n    studioShare: 0.5,\n    directorShare: 0.25,\n    producerShare: 0.15,\n    topCastShare: 0.1,\n    marketingBudget: 50000000,\n    isProfitable: true,\n    marketingStart: datetime('1997-06-15T00:00:00Z'),\n    coProduction: 'Fox'\n}]->(t)"
2025-03-06 20:36:44,915 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Studio:GeneratedByClaudeAI {name: 'Paramount Pictures'}),\n  (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'})\nCREATE (p)-[:PRODUCED {\n    investment: 6000000,\n    return: 245066411,\n    roi: 40.84,\n    contractSigned: date('1970-09-15'),\n    studioShare: 0.7,\n    directorShare: 0.1,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 1000000,\n    isProfitable: true,\n    marketingStart: datetime('1972-01-15T00:00:00Z'),\n    executiveOpposition: true\n}]->(g)"
2025-03-06 20:36:44,918 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'The Dark Knight'})\nCREATE (w)-[:PRODUCED {\n    investment: 185000000,\n    return: 1003045358,\n    roi: 5.42,\n    contractSigned: date('2006-08-22'),\n    studioShare: 0.6,\n    directorShare: 0.2,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 100000000,\n    isProfitable: true,\n    marketingStart: datetime('2007-12-15T00:00:00Z'),\n    franchiseEntry: 2\n}]->(d)"
2025-03-06 20:36:44,920 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Studio:GeneratedByClaudeAI {name: 'Miramax Films'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Pulp Fiction'})\nCREATE (m)-[:PRODUCED {\n    investment: 8000000,\n    return: 213928762,\n    roi: 26.74,\n    contractSigned: date('1993-04-15'),\n    studioShare: 0.6,\n    directorShare: 0.2,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 10000000,\n    isProfitable: true,\n    marketingStart: datetime('1994-05-30T00:00:00Z'),\n    festivalStrategy: 'Cannes premiere'\n}]->(p)"
2025-03-06 20:36:44,922 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Studio:GeneratedByClaudeAI {name: 'Sony Pictures Entertainment'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Crouching Tiger, Hidden Dragon'})\nCREATE (s)-[:PRODUCED {\n    investment: 17000000,\n    return: 213525736,\n    roi: 12.56,\n    contractSigned: date('1998-08-15'),\n    studioShare: 0.55,\n    directorShare: 0.15,\n    producerShare: 0.15,\n    topCastShare: 0.15,\n    marketingBudget: 15000000,\n    isProfitable: true,\n    marketingStart: datetime('2000-09-15T00:00:00Z'),\n    internationalFocus: true\n}]->(c)"
2025-03-06 20:36:44,925 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (p:Studio:GeneratedByClaudeAI {name: 'Paramount Pictures'}),\n  (t:Production:GeneratedByClaudeAI {name: 'Titanic Production'})\nCREATE (p)-[:FINANCED {\n    contractDate: date('1995-12-15'),\n    amount: 100000000,\n    isFullyPaid: true,\n    transferTime1: datetime('1996-01-15T00:00:00Z'),\n    transferTime2: datetime('1996-06-15T00:00:00Z'),\n    transferTime3: datetime('1996-12-15T00:00:00Z'),\n    paymentDate1: date('1996-01-15'),\n    paymentAmount1: 30000000,\n    paymentDate2: date('1996-06-15'),\n    paymentAmount2: 40000000,\n    paymentDate3: date('1996-12-15'),\n    paymentAmount3: 30000000,\n    costOverrunConcerns: 'Significant'\n}]->(t)"
2025-03-06 20:36:44,927 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Studio:GeneratedByClaudeAI {name: 'Paramount Pictures'}),\n  (g:Production:GeneratedByClaudeAI {name: 'The Godfather Production'})\nCREATE (p)-[:FINANCED {\n    contractDate: date('1970-09-15'),\n    amount: 6000000,\n    isFullyPaid: true,\n    transferTime1: datetime('1970-12-01T00:00:00Z'),\n    transferTime2: datetime('1971-03-01T00:00:00Z'),\n    paymentDate1: date('1970-12-01'),\n    paymentAmount1: 3000000,\n    paymentDate2: date('1971-03-01'),\n    paymentAmount2: 3000000,\n    budgetControl: 'Strict',\n    producerOversight: 'Heavy'\n}]->(g)"
2025-03-06 20:36:44,932 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (d:Production:GeneratedByClaudeAI {name: 'The Dark Knight Production'})\nCREATE (w)-[:FINANCED {\n    contractDate: date('2006-08-22'),\n    amount: 185000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2007-01-15T00:00:00Z'),\n    transferTime2: datetime('2007-04-15T00:00:00Z'),\n    transferTime3: datetime('2007-07-15T00:00:00Z'),\n    paymentDate1: date('2007-01-15'),\n    paymentAmount1: 60000000,\n    paymentDate2: date('2007-04-15'),\n    paymentAmount2: 70000000,\n    paymentDate3: date('2007-07-15'),\n    paymentAmount3: 55000000,\n    tentpoleStatus: true\n}]->(d)"
2025-03-06 20:36:44,934 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Studio:GeneratedByClaudeAI {name: 'Miramax Films'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Pulp Fiction Production'})\nCREATE (m)-[:FINANCED {\n    contractDate: date('1993-04-15'),\n    amount: 8000000,\n    isFullyPaid: true,\n    transferTime1: datetime('1993-07-01T00:00:00Z'),\n    transferTime2: datetime('1993-09-01T00:00:00Z'),\n    paymentDate1: date('1993-07-01'),\n    paymentAmount1: 4000000,\n    paymentDate2: date('1993-09-01'),\n    paymentAmount2: 4000000,\n    independentBudgeting: true,\n    tightControls: true\n}]->(p)"
2025-03-06 20:36:44,936 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Titanic Production'}),\n  (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 7,\n    durationDays: 23,\n    locationCount: 5,\n    setCount: 35,\n    dailyAverageCost: 450000,\n    scheduleAdherence: 0.75,\n    weatherDelaysDays: 15,\n    originalScheduledEnd: date('1997-01-15'),\n    budgetOverrun: 0.3,\n    scheduleOverrun: 0.4\n}]->(t)"
2025-03-06 20:36:44,939 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'The Godfather Production'}),\n  (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 4,\n    durationDays: 9,\n    locationCount: 12,\n    setCount: 24,\n    dailyAverageCost: 45000,\n    scheduleAdherence: 0.85,\n    weatherDelaysDays: 6,\n    originalScheduledEnd: date('1971-07-20'),\n    castingDisputes: 'Major',\n    studioInterference: 'Significant'\n}]->(g)"
2025-03-06 20:36:44,940 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'The Dark Knight Production'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'The Dark Knight'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 6,\n    durationDays: 24,\n    locationCount: 10,\n    setCount: 28,\n    dailyAverageCost: 430000,\n    scheduleAdherence: 0.9,\n    weatherDelaysDays: 12,\n    originalScheduledEnd: date('2007-10-30'),\n    iMAXPercentage: 28,\n    practicalEffects: 'Extensive'\n}]->(d)"
2025-03-06 20:36:44,942 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (pf))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Pulp Fiction Production'}),\n  (pf:Movie:GeneratedByClaudeAI {title: 'Pulp Fiction'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 2,\n    durationDays: 10,\n    locationCount: 25,\n    setCount: 18,\n    dailyAverageCost: 75000,\n    scheduleAdherence: 0.95,\n    weatherDelaysDays: 3,\n    originalScheduledEnd: date('1993-11-25'),\n    castChemistry: 'Exceptional',\n    improvisationLevel: 'Moderate'\n}]->(pf)"
2025-03-06 20:36:44,945 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationships\nMATCH\n  (t:Movie:GeneratedByClaudeAI {title: 'Titanic'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (t)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 1998,\n    ceremony: 70,\n    isWinner: true,\n    ceremonyDate: date('1998-03-23'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 4862,\n    votesAgainst: 2153,\n    totalOscars: 11,\n    recordTying: true\n}]->(a)"
2025-03-06 20:36:44,948 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'James Cameron'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (j)-[:NOMINATED_FOR {\n    category: 'Best Director',\n    year: 1998,\n    ceremony: 70,\n    isWinner: true,\n    ceremonyDate: date('1998-03-23'),\n    announcementTime: localtime('21:15:00'),\n    votesFor: 4715,\n    votesAgainst: 2300,\n    speechDuration: duration({minutes: 2, seconds: 45}),\n    speechMemorable: true,\n    quotedLine: 'I\\'m the king of the world!'\n}]->(a)"
2025-03-06 20:36:44,958 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (g)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 1973,\n    ceremony: 45,\n    isWinner: true,\n    ceremonyDate: date('1973-03-27'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 3982,\n    votesAgainst: 1573,\n    controversies: 'Marlon Brando boycott',\n    culturalImpact: 'Groundbreaking'\n}]->(a)"
2025-03-06 20:36:44,962 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (h:Person:GeneratedByClaudeAI {name: 'Heath Ledger'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (h)-[:NOMINATED_FOR {\n    category: 'Best Supporting Actor',\n    year: 2009,\n    ceremony: 81,\n    isWinner: true,\n    ceremonyDate: date('2009-02-22'),\n    announcementTime: localtime('20:45:00'),\n    votesFor: 5823,\n    votesAgainst: 842,\n    posthumousAward: true,\n    acceptedBy: 'Family',\n    emotionalImpact: 'Significant'\n}]->(a)"
2025-03-06 20:36:44,965 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Movie:GeneratedByClaudeAI {title: 'Pulp Fiction'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (p)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 1995,\n    ceremony: 67,\n    isWinner: false,\n    ceremonyDate: date('1995-03-27'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 3254,\n    votesAgainst: 3645,\n    competitionWinner: 'Forrest Gump',\n    indieBreakthrough: true\n}]->(a)"
2025-03-06 20:36:44,969 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (q:Person:GeneratedByClaudeAI {name: 'Quentin Tarantino'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (q)-[:NOMINATED_FOR {\n    category: 'Best Original Screenplay',\n    year: 1995,\n    ceremony: 67,\n    isWinner: true,\n    ceremonyDate: date('1995-03-27'),\n    announcementTime: localtime('20:15:00'),\n    votesFor: 4215,\n    votesAgainst: 2682,\n    speechDuration: duration({minutes: 1, seconds: 50}),\n    independentCelebration: true\n}]->(a)"
2025-03-06 20:36:44,972 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Movie:GeneratedByClaudeAI {title: 'Crouching Tiger, Hidden Dragon'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (c)-[:NOMINATED_FOR {\n    category: 'Best Foreign Language Film',\n    year: 2001,\n    ceremony: 73,\n    isWinner: true,\n    ceremonyDate: date('2001-03-25'),\n    announcementTime: localtime('20:30:00'),\n    votesFor: 4561,\n    votesAgainst: 1823,\n    broadestRecognition: 'Foreign language film',\n    additionalNominations: 9\n}]->(a)"
2025-03-06 20:36:44,975 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (k))} {position: line: 1, column: 9, offset: 8} for query: "// Professional relationships between people\nMATCH\n  (j:Person:GeneratedByClaudeAI {name: 'James Cameron'}),\n  (k:Person:GeneratedByClaudeAI {name: 'Kate Winslet'})\nCREATE (j)-[:DIRECTED_ACTOR {\n    films: 1,\n    firstFilm: 'Titanic',\n    firstYear: 1997,\n    chemistry: 4.2,\n    conflicts: 'Notable',\n    intensityLevel: 'Very high',\n    futurePlans: 'None stated',\n    reconciliation: true\n}]->(k)"
2025-03-06 20:36:44,978 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (f:Person:GeneratedByClaudeAI {name: 'Francis Ford Coppola'}),\n  (a:Person:GeneratedByClaudeAI {name: 'Al Pacino'})\nCREATE (f)-[:DIRECTED_ACTOR {\n    films: 3,\n    firstFilm: 'The Godfather',\n    firstYear: 1972,\n    chemistry: 4.9,\n    conflicts: 'Minimal',\n    intensityLevel: 'High',\n    collaborationQuotes: 'Career defining',\n    artisticPartnership: 'Legendary'\n}]->(a)"
2025-03-06 20:36:44,982 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (h))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (h:Person:GeneratedByClaudeAI {name: 'Heath Ledger'})\nCREATE (c)-[:DIRECTED_ACTOR {\n    films: 1,\n    firstFilm: 'The Dark Knight',\n    firstYear: 2008,\n    chemistry: 5.0,\n    conflicts: 'None',\n    intensityLevel: 'Very high',\n    characterCreation: 'Collaborative',\n    characterOwnership: 'Actor-driven',\n    respectLevel: 'Profound'\n}]->(h)"
2025-03-06 20:36:44,986 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (u))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (q:Person:GeneratedByClaudeAI {name: 'Quentin Tarantino'}),\n  (u:Person:GeneratedByClaudeAI {name: 'Uma Thurman'})\nCREATE (q)-[:DIRECTED_ACTOR {\n    films: 3,\n    firstFilm: 'Pulp Fiction',\n    firstYear: 1994,\n    chemistry: 4.9,\n    conflicts: 'Later projects',\n    intensityLevel: 'Very high',\n    museCategorization: true,\n    collaborationLongevity: 'Multi-decade',\n    inspirationLevel: 'Significant'\n}]->(u)"
2025-03-06 20:36:44,989 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (m))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Ang Lee'}),\n  (m:Person:GeneratedByClaudeAI {name: 'Michelle Yeoh'})\nCREATE (a)-[:DIRECTED_ACTOR {\n    films: 1,\n    firstFilm: 'Crouching Tiger, Hidden Dragon',\n    firstYear: 2000,\n    chemistry: 4.8,\n    conflicts: 'None',\n    intensityLevel: 'Moderate',\n    languageBarrier: 'Minimal',\n    physicalDemands: 'Extreme',\n    mutualRespect: 'Very high'\n}]->(m)"
2025-03-06 20:36:44,992 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 16, column: 1, offset: 496} for query: "// Create soundtracks\nCREATE (TitanicSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'Titanic: Music from the Motion Picture',\n    composer: 'James Horner',\n    released: date('1997-11-18'),\n    duration: duration({minutes: 72, seconds: 38}),\n    trackCount: 15,\n    recordingStudio: 'Air Lyndhurst Studios',\n    recordingStudioLat: 51.5689,\n    recordingStudioLong: -0.1781,\n    peakChartPosition: 1,\n    weeksAtNumberOne: 16,\n    salesUnits: 30000000,\n    streamingCount: 320000000\n})\nWITH 1 as dummy\nMATCH (t:Movie:GeneratedByClaudeAI {title: 'Titanic'}),\n      (s:Soundtrack:GeneratedByClaudeAI {title: 'Titanic: Music from the Motion Picture'})\nCREATE (s)-[:COMPOSED_FOR {\n    contractDate: date('1996-05-15'),\n    completion: date('1997-08-25'),\n    nominatedAwards: ['Academy Award', 'Golden Globe', 'Grammy Award'],\n    wonAwards: ['Academy Award', 'Golden Globe', 'Grammy Award'],\n    diamondCertification: true,\n    iconicSongs: ['My Heart Will Go On'],\n    vocalistFeatured: 'Celine Dion',\n    orchestraSize: 85,\n    recordingDays: 25\n}]->(t)"
2025-03-06 20:36:44,994 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 16, column: 1, offset: 532} for query: "CREATE (TheGodfatherSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'The Godfather: Music from the Original Motion Picture Soundtrack',\n    composer: 'Nino Rota',\n    released: date('1972-03-07'),\n    duration: duration({minutes: 31, seconds: 24}),\n    trackCount: 11,\n    recordingStudio: 'Paramount Studios',\n    recordingStudioLat: 34.0841,\n    recordingStudioLong: -118.3213,\n    peakChartPosition: 45,\n    salesUnits: 500000,\n    streamingCount: 150000000,\n    culturalInfluence: 'Definitive'\n})\nWITH 1 as dummy\nMATCH (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'}),\n      (s:Soundtrack:GeneratedByClaudeAI {title: 'The Godfather: Music from the Original Motion Picture Soundtrack'})\nCREATE (s)-[:COMPOSED_FOR {\n    contractDate: date('1971-02-15'),\n    completion: date('1971-11-10'),\n    nominatedAwards: ['Academy Award', 'Grammy Award'],\n    wonAwards: [],\n    disqualificationReason: 'Previous usage',\n    iconicThemes: ['Love Theme', 'The Godfather Waltz'],\n    culturalResonance: 'Immediate and lasting',\n    ethnicInfluences: 'Sicilian folk music',\n    orchestraSize: 65\n}]->(g)"
2025-03-06 20:36:44,996 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 17, column: 1, offset: 446} for query: "// Create filming locations\nCREATE (MexicoLocation:FilmingLocation:GeneratedByClaudeAI {\n    name: 'Baja Studios',\n    country: 'Mexico',\n    region: 'Baja California',\n    latitude: 32.3662,\n    longitude: -117.0723,\n    elevation: 10,\n    elevationUnit: 'm',\n    climate: 'Mediterranean',\n    permitCost: 15000000,\n    permitCurrency: 'USD',\n    firstUsed: date('1996-07-31'),\n    lastUsed: date('1997-03-23'),\n    purpose: 'Water tank filming'\n})\nWITH 1 as dummy\nMATCH (t:Movie:GeneratedByClaudeAI {title: 'Titanic'}),\n      (l:FilmingLocation:GeneratedByClaudeAI {name: 'Baja Studios'})\nCREATE (t)-[:FILMED_AT {\n    startDate: date('1996-07-31'),\n    endDate: date('1997-03-23'),\n    sceneCount: 95,\n    totalDays: 160,\n    weatherDelayDays: 15,\n    crewSize: 850,\n    logisticsCost: 25000000,\n    accommodationCost: 15000000,\n    setConstruction: 'Full-size ship sections',\n    waterTankGallons: 17000000,\n    specialRequirements: 'Gimbal systems for sinking sequences'\n}]->(l)"
2025-03-06 20:36:45,001 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 17, column: 1, offset: 438} for query: "CREATE (ChicagoLocation:FilmingLocation:GeneratedByClaudeAI {\n    name: 'Chicago',\n    country: 'USA',\n    region: 'Illinois',\n    latitude: 41.8781,\n    longitude: -87.6298,\n    elevation: 182,\n    elevationUnit: 'm',\n    climate: 'Continental',\n    permitCost: 8000000,\n    permitCurrency: 'USD',\n    firstUsed: date('2007-04-18'),\n    lastUsed: date('2007-08-24'),\n    buildingAccess: 'Multiple skyscrapers'\n})\nWITH 1 as dummy\nMATCH (d:Movie:GeneratedByClaudeAI {title: 'The Dark Knight'}),\n      (l:FilmingLocation:GeneratedByClaudeAI {name: 'Chicago'})\nCREATE (d)-[:FILMED_AT {\n    startDate: date('2007-04-18'),\n    endDate: date('2007-08-24'),\n    sceneCount: 75,\n    totalDays: 95,\n    weatherDelayDays: 8,\n    crewSize: 450,\n    logisticsCost: 15000000,\n    accommodationCost: 8000000,\n    characterPresent: ['Batman', 'Joker', 'Harvey Dent'],\n    buildingsUsed: ['Sears Tower', 'Trump Tower', 'Board of Trade'],\n    streetClosures: 42,\n    helicopterShots: 28\n}]->(l)"
2025-03-06 20:36:45,004 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 16, column: 1, offset: 469} for query: "// Create costume designers\nCREATE (JanetPatterson:Person:GeneratedByClaudeAI {\n    name: 'Janet Patterson',\n    born: 1956,\n    died: 2016,\n    birthdate: date('1956-06-27'),\n    deathdate: date('2016-10-21'),\n    nationality: 'Australian',\n    oscarNominations: 4,\n    isActive: false,\n    firstFilm: datetime('1986-06-15T00:00:00Z'),\n    lastFilm: datetime('2015-11-22T00:00:00Z'),\n    careerLength: duration({years: 29}),\n    specialization: 'Period Costume Design'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Janet Patterson'}),\n      (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (p)-[:DESIGNED_COSTUMES_FOR {\n    year: 1997,\n    costumesCreated: 1250,\n    budget: 8500000,\n    awardNominations: 1,\n    awardWins: 1,\n    startDate: date('1995-11-15'),\n    completionDate: date('1996-07-15'),\n    specialCostumes: ['Rose\\'s boarding suit', 'Rose\\'s evening gown', 'Flying dress'],\n    researchHours: 850,\n    historicalAccuracy: 'Very high',\n    costumesSubmerged: 450\n}]->(t)"
2025-03-06 20:36:45,006 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 14, column: 1, offset: 390} for query: "CREATE (LindiHemming:Person:GeneratedByClaudeAI {\n    name: 'Lindy Hemming',\n    born: 1948,\n    birthdate: date('1948-05-21'),\n    nationality: 'British',\n    oscarWins: 1,\n    oscarNominations: 1,\n    isActive: true,\n    firstFilm: datetime('1985-06-15T00:00:00Z'),\n    careerLength: duration({years: 38}),\n    specialization: 'Character-driven Costume Design'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Lindy Hemming'}),\n      (d:Movie:GeneratedByClaudeAI {title: 'The Dark Knight'})\nCREATE (p)-[:DESIGNED_COSTUMES_FOR {\n    year: 2008,\n    costumesCreated: 650,\n    budget: 6500000,\n    awardNominations: 3,\n    awardWins: 1,\n    startDate: date('2006-12-15'),\n    completionDate: date('2007-04-05'),\n    specialCostumes: ['Batsuit', 'Joker costume', 'Two-Face makeup'],\n    researchHours: 450,\n    characterEmphasis: 'Psychological aspects',\n    functionalDesign: true,\n    batSuitIterations: 15\n}]->(d)"
2025-03-06 20:36:45,009 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 15, column: 1, offset: 423} for query: "// Create cinematographer relationships\nCREATE (RussellCarpenter:Person:GeneratedByClaudeAI {\n    name: 'Russell Carpenter',\n    born: 1950,\n    birthdate: date('1950-12-09'),\n    nationality: 'American',\n    oscarWins: 1,\n    oscarNominations: 1,\n    isActive: true,\n    firstFilm: datetime('1983-05-15T00:00:00Z'),\n    visualStyle: 'Cinematic grandeur with intimate moments',\n    cameraPreference: 'Panavision',\n    collaborations: 3\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Russell Carpenter'}),\n      (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (p)-[:CINEMATOGRAPHY_FOR {\n    year: 1997,\n    cameras: ['Panavision Panaflex Platinum', 'Panavision Panaflex Gold'],\n    lenses: ['Panavision Primo', 'Panavision Super High Speed'],\n    awardNominations: 5,\n    awardWins: 1,\n    startDate: date('1996-07-31'),\n    completionDate: date('1997-03-23'),\n    signature_shots: ['Bow flying scene', 'Grand staircase', 'Underwater corridors'],\n    lighting_setups: 485,\n    underwaterChallenges: true,\n    epochalCinematography: true\n}]->(t)"
2025-03-06 20:36:45,012 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 18, column: 1, offset: 543} for query: "CREATE (GordonWillis:Person:GeneratedByClaudeAI {\n    name: 'Gordon Willis',\n    born: 1931,\n    died: 2014,\n    birthdate: date('1931-05-28'),\n    deathdate: date('2014-05-18'),\n    nationality: 'American',\n    oscarNominations: 2,\n    oscarHonoraryAward: true,\n    isActive: false,\n    firstFilm: datetime('1970-01-18T00:00:00Z'),\n    lastFilm: datetime('1997-09-16T00:00:00Z'),\n    careerLength: duration({years: 27}),\n    visualStyle: 'Chiaroscuro lighting with deep shadows',\n    nickname: 'Prince of Darkness'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Gordon Willis'}),\n      (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'})\nCREATE (p)-[:CINEMATOGRAPHY_FOR {\n    year: 1972,\n    cameras: ['Arriflex 35BL', 'Mitchell BNCR'],\n    lenses: ['Cooke Speed Panchro', 'Angenieux Zoom'],\n    awardNominations: 0,\n    awardWins: 0,\n    startDate: date('1971-03-29'),\n    completionDate: date('1971-08-07'),\n    signature_shots: ['Brando in shadow', 'Wedding sequence', 'Restaurant shooting'],\n    lighting_setups: 215,\n    colorScheme: 'Amber and shadows',\n    innovationLevel: 'Revolutionary',\n    academicStudies: 850\n}]->(g)"
2025-03-06 20:36:45,015 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 14, column: 1, offset: 369} for query: "// Create fan community for blockbuster\nCREATE (TitanicFandom:FanCommunity:GeneratedByClaudeAI {\n    name: 'Titanic Fan Community',\n    established: date('1998-02-15'),\n    memberCount: 1250000,\n    onlinePlatforms: 18,\n    annualEvents: 12,\n    largestEventAttendance: 15000,\n    contentCreators: 35000,\n    fanfictionCount: 85000,\n    fanArtCount: 150000,\n    academicPapers: 350\n})\nWITH 1 as dummy\nMATCH (f:FanCommunity:GeneratedByClaudeAI {name: 'Titanic Fan Community'}),\n      (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (f)-[:ENGAGED_WITH {\n    anniversaryCelebrations: 25,\n    commemorationEvents: ['Ship sinking date', 'Film release date'],\n    romanticFocus: 0.7,\n    historicalFocus: 0.3,\n    debateTopics: ['Door Size Controversy', 'Historical Accuracy', 'Alternate Endings'],\n    fanTheories: 235,\n    museumExhibits: 35,\n    shipwreckExpeditions: 12,\n    merchandiseSales: 450000000,\n    digitalPlatformRevival: 'Significant'\n}]->(t)"
2025-03-06 20:36:45,017 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 387} for query: "// Create TDK Joker Costume\nCREATE (JokerCostume:Prop:GeneratedByClaudeAI {\n    name: 'The Dark Knight Joker Costume',\n    movie: 'The Dark Knight',\n    material: 'Mixed textiles, custom dyes',\n    weight: 5.4,\n    weightUnit: 'kg',\n    createdDate: date('2007-03-15'),\n    screenTime: duration({minutes: 33, seconds: 0}),\n    isIconic: true,\n    auctionValue: 5000000,\n    copiesMade: 8\n})\nWITH 1 as dummy\nMATCH (d:Movie:GeneratedByClaudeAI {title: 'Dark Knight'}),\n      (p:Prop:GeneratedByClaudeAI {name: 'The Dark Knight Joker Costume'})\nCREATE (p)-[:USED_IN {\n    scenes: ['Bank robbery', 'Interrogation room', 'Hospital explosion'],\n    sceneCount: 15,\n    firstAppearance: time('00:04:22'),\n    lastAppearance: time('02:12:15'),\n    isCloseup: true,\n    significance: 'Character defining',\n    historicalImpact: 'Reinvented character visually',\n    costumeElements: ['Purple coat', 'Green vest', 'Hexagonal pattern shirt', 'Makeup'],\n    weatheringTechniques: ['Acid washing', 'Sandpaper distressing', 'Oil staining'],\n    psychologicalImportance: 'Visual manifestation of chaos'\n}]->(d)"
2025-03-06 20:36:45,021 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 15, column: 1, offset: 396} for query: "// Create educational institution\nCREATE (FilmSchool:Institution:GeneratedByClaudeAI {\n    name: 'American Film Institute',\n    founded: date('1967-06-05'),\n    headquartersLat: 34.1184,\n    headquartersLong: -118.3004,\n    studentCount: 650,\n    facultyCount: 120,\n    courseCount: 85,\n    filmArchiveSize: 60000,\n    digitalArchiveSize: 45000,\n    digitalArchiveUnit: 'TB',\n    annualBudget: 65000000\n})\nWITH 1 as dummy\nMATCH (i:Institution:GeneratedByClaudeAI {name: 'American Film Institute'}),\n      (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'})\nCREATE (i)-[:TEACHES_WITH {\n    yearAdded: 1973,\n    coursesUsedIn: 35,\n    primaryFocus: ['Direction technique', 'Screenplay structure', 'Character development', 'Cinematography technique'],\n    studentPapersCount: 25850,\n    mostCommonAnalysisTopics: ['Visual storytelling', 'Character transformation', 'Thematic elements', 'Shadow and light'],\n    teachingHoursAnnually: 820,\n    requiredForDegrees: ['MFA Directing', 'MFA Cinematography', 'MFA Screenwriting'],\n    teachingValue: 9.9,\n    preservationEfforts: 'Significant',\n    restorationPartnership: true\n}]->(g)"
2025-03-06 20:36:45,024 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 425} for query: "// Create cultural movement for Pulp Fiction\nCREATE (Independent90sCinema:CulturalMovement:GeneratedByClaudeAI {\n    name: '1990s Independent Cinema',\n    established: date('1989-01-15'),\n    influentialDirectors: 25,\n    internationalFestivals: 45,\n    majorAwards: 85,\n    criticalReception: 'Revolutionary',\n    geographicalSpread: 'Global',\n    periodStart: date('1989-01-15'),\n    periodPeak: date('1994-10-14'),\n    academicStudies: 350\n})\nWITH 1 as dummy\nMATCH (c:CulturalMovement:GeneratedByClaudeAI {name: '1990s Independent Cinema'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'Pulp Fiction'})\nCREATE (c)-[:DEFINED_BY {\n    significanceRating: 9.8,\n    globalImpact: 'Transformative',\n    boxOfficeMultiplierEffect: 4.5,\n    independentFilmIncrease: 0.85,\n    subsequentDistributionDeals: 145,\n    academicAnalyses: 525,\n    filmSchoolAdoption: 'Immediate and canonical',\n    newFilmmakersInspired: 'Generation defining',\n    narrativeExperimentation: 'Widespread adoption',\n    dialogueRevolution: 'Industry-changing',\n    genreSubversionTechniques: 'Widely adopted'\n}]->(p)"
2025-03-06 20:36:45,027 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 16, column: 1, offset: 535} for query: "// Create merchandising relationship\nCREATE (TitanicMerchandise:Merchandise:GeneratedByClaudeAI {\n    name: 'Heart of the Ocean Necklace Replica',\n    released: date('1998-01-10'),\n    manufacturer: 'J. Peterman Company',\n    manufacturerLocationLat: 38.0406,\n    manufacturerLocationLong: -84.5037,\n    retailPrice: 198.00,\n    priceCurrency: 'USD',\n    productionRun: 500000,\n    materialQuality: 'Mixed',\n    limitedEdition: false,\n    marketingTagline: 'Inspired by the film that captured the world\\'s heart',\n    collectorValue: 'Moderate'\n})\nWITH 1 as dummy\nMATCH (m:Merchandise:GeneratedByClaudeAI {name: 'Heart of the Ocean Necklace Replica'}),\n      (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (m)-[:DERIVED_FROM {\n    licensingDeal: date('1997-10-15'),\n    unitsSold: 385000,\n    geographicalDistribution: ['North America', 'Europe', 'Asia', 'Australia', 'South America'],\n    salesDistribution: [0.55, 0.25, 0.10, 0.05, 0.05],\n    retailersCarrying: 18500,\n    valentinesPeaks: 5,\n    anniversarySalesBumps: 3,\n    brandRecognition: 0.85,\n    merchandisingLongevity: '25+ years, still available',\n    collectibleStatus: 'Moderate',\n    reissueVersions: 3\n}]->(t)"
2025-03-06 20:36:45,031 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g2))} {position: line: 1, column: 9, offset: 8} for query: "// Connect Godfather 2 to existing people and studio\nMATCH \n  (f:Person:GeneratedByClaudeAI {name: 'Francis Ford Coppola'}),\n  (g2:Movie:GeneratedByClaudeAI {title: 'The Godfather: Part II'})\nCREATE (f)-[:DIRECTED {\n    year: 1974,\n    daysOnSet: 125,\n    satisfaction: 4.9,\n    awardNominations: 11,\n    awardWins: 6,\n    completionDate: date('1974-10-15'),\n    premiereEvent: datetime('1974-12-12T20:00:00-05:00'),\n    durationMonths: 5,\n    sequelPressure: 'Extreme',\n    creativeControl: 'Complete'\n}]->(g2)"
2025-03-06 20:36:45,033 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g2))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Al Pacino'}),\n  (g2:Movie:GeneratedByClaudeAI {title: 'The Godfather: Part II'})\nCREATE (a)-[:ACTED_IN {\n    roles: ['Michael Corleone'],\n    salary: 500000,\n    screenTimeMinutes: 140,\n    startDate: date('1973-10-01'),\n    endDate: date('1974-03-15'),\n    scheduleConflicts: false,\n    criticScore: 99,\n    audienceScore: 96,\n    awardNominations: 4,\n    awardWins: 0,\n    characterEvolution: 'Significant darkness'\n}]->(g2)"
2025-03-06 20:36:45,035 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g2))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Studio:GeneratedByClaudeAI {name: 'Paramount Pictures'}),\n  (g2:Movie:GeneratedByClaudeAI {title: 'The Godfather: Part II'})\nCREATE (p)-[:PRODUCED {\n    investment: 13000000,\n    return: 93000000,\n    roi: 7.15,\n    contractSigned: date('1972-12-15'),\n    studioShare: 0.6,\n    directorShare: 0.2,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 4000000,\n    isProfitable: true,\n    marketingStart: datetime('1974-09-15T00:00:00Z'),\n    sequelStrategy: 'Quality over commercialism'\n}]->(g2)"
2025-03-06 20:36:45,038 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Connect Godfather 2 to awards\nMATCH\n  (g2:Movie:GeneratedByClaudeAI {title: 'The Godfather: Part II'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (g2)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 1975,\n    ceremony: 47,\n    isWinner: true,\n    ceremonyDate: date('1975-04-08'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 4125,\n    votesAgainst: 1450,\n    historicalSignificance: 'First sequel to win Best Picture',\n    totalOscars: 6\n}]->(a)"
2025-03-06 20:36:45,044 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Connect Inception to Nolan, DiCaprio and Warner Bros\nMATCH \n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (c)-[:DIRECTED {\n    year: 2010,\n    daysOnSet: 140,\n    satisfaction: 4.9,\n    awardNominations: 8,\n    awardWins: 4,\n    completionDate: date('2010-04-15'),\n    premiereEvent: datetime('2010-07-08T19:30:00+01:00'),\n    durationMonths: 6,\n    originalConcept: true,\n    scriptDevelopmentYears: 10\n}]->(i)"
2025-03-06 20:36:45,048 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (l:Person {name: 'Leonardo DiCaprio'}), // From original graph\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (l)-[:ACTED_IN {\n    roles: ['Dom Cobb'],\n    salary: 20000000,\n    screenTimeMinutes: 125,\n    startDate: date('2009-07-15'),\n    endDate: date('2009-12-22'),\n    scheduleConflicts: false,\n    criticScore: 95,\n    audienceScore: 93,\n    awardNominations: 6,\n    awardWins: 2,\n    psychologicalPreparation: 'Extensive'\n}]->(i)"
2025-03-06 20:36:45,053 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (w)-[:PRODUCED {\n    investment: 160000000,\n    return: 836800000,\n    roi: 5.23,\n    contractSigned: date('2008-12-01'),\n    studioShare: 0.6,\n    directorShare: 0.2,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 100000000,\n    isProfitable: true,\n    marketingStart: datetime('2010-01-15T00:00:00Z'),\n    marketingInnovation: 'Viral mystery campaign'\n}]->(i)"
2025-03-06 20:36:45,057 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Also connect Marion Cotillard and Cillian Murphy to Inception\nMATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Marion Cotillard'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (m)-[:ACTED_IN {\n    roles: ['Mal Cobb'],\n    salary: 3500000,\n    screenTimeMinutes: 35,\n    startDate: date('2009-08-10'),\n    endDate: date('2009-11-15'),\n    scheduleConflicts: false,\n    criticScore: 96,\n    audienceScore: 94,\n    characterDepth: 'Psychological antagonist',\n    emotionalImpact: 'Haunting'\n}]->(i)"
2025-03-06 20:36:45,061 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Cillian Murphy'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (c)-[:ACTED_IN {\n    roles: ['Robert Fischer'],\n    salary: 2500000,\n    screenTimeMinutes: 42,\n    startDate: date('2009-08-05'),\n    endDate: date('2009-11-10'),\n    scheduleConflicts: false,\n    criticScore: 93,\n    audienceScore: 92,\n    characterComplexity: 'Target and protagonist',\n    reunionWithDirector: true\n}]->(i)"
2025-03-06 20:36:45,066 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Connect Aliens to James Cameron and 20th Century Fox\nMATCH \n  (j:Person:GeneratedByClaudeAI {name: 'James Cameron'}),\n  (a:Movie:GeneratedByClaudeAI {title: 'Aliens'})\nCREATE (j)-[:DIRECTED {\n    year: 1986,\n    daysOnSet: 96,\n    satisfaction: 4.7,\n    awardNominations: 7,\n    awardWins: 2,\n    completionDate: date('1986-04-30'),\n    premiereEvent: datetime('1986-07-14T19:30:00+01:00'),\n    durationMonths: 4,\n    studioConflicts: true,\n    directorStyleForming: 'Technical innovation with character depth'\n}]->(a)"
2025-03-06 20:36:45,067 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (t:Studio:GeneratedByClaudeAI {name: 'TwentiethCenturyFox'}),\n  (a:Movie:GeneratedByClaudeAI {title: 'Aliens'})\nCREATE (t)-[:PRODUCED {\n    investment: 18500000,\n    return: 183300000,\n    roi: 9.91,\n    contractSigned: date('1985-04-15'),\n    studioShare: 0.7,\n    directorShare: 0.15,\n    producerShare: 0.1,\n    topCastShare: 0.05,\n    marketingBudget: 10000000,\n    isProfitable: true,\n    marketingStart: datetime('1986-03-15T00:00:00Z'),\n    franchiseRevival: true\n}]->(a)"
2025-03-06 20:36:45,071 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (k))} {position: line: 1, column: 9, offset: 8} for query: "// Connect Kill Bill to Tarantino, Thurman and Miramax\nMATCH \n  (q:Person:GeneratedByClaudeAI {name: 'Quentin Tarantino'}),\n  (k:Movie:GeneratedByClaudeAI {title: 'Kill Bill: Vol. 1'})\nCREATE (q)-[:DIRECTED {\n    year: 2003,\n    daysOnSet: 110,\n    satisfaction: 4.9,\n    awardNominations: 5,\n    awardWins: 2,\n    completionDate: date('2003-06-30'),\n    premiereEvent: datetime('2003-09-29T19:00:00+02:00'),\n    durationMonths: 5,\n    genreBlending: 'Martial arts, spaghetti western, samurai',\n    homageLevel: 'Extensive'\n}]->(k)"
2025-03-06 20:36:45,074 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (k))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (u:Person:GeneratedByClaudeAI {name: 'Uma Thurman'}),\n  (k:Movie:GeneratedByClaudeAI {title: 'Kill Bill: Vol. 1'})\nCREATE (u)-[:ACTED_IN {\n    roles: ['The Bride/Beatrix Kiddo'],\n    salary: 12000000,\n    screenTimeMinutes: 95,\n    startDate: date('2002-06-30'),\n    endDate: date('2002-11-25'),\n    scheduleConflicts: false,\n    criticScore: 97,\n    audienceScore: 94,\n    awardNominations: 4,\n    awardWins: 1,\n    martialArtsTraining: 'Intensive 3-month program',\n    characterIconicity: 'Instant classic'\n}]->(k)"
2025-03-06 20:36:45,076 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (k))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Studio:GeneratedByClaudeAI {name: 'Miramax Films'}),\n  (k:Movie:GeneratedByClaudeAI {title: 'Kill Bill: Vol. 1'})\nCREATE (m)-[:PRODUCED {\n    investment: 30000000,\n    return: 180900000,\n    roi: 6.03,\n    contractSigned: date('2001-12-15'),\n    studioShare: 0.55,\n    directorShare: 0.25,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 25000000,\n    isProfitable: true,\n    marketingStart: datetime('2003-05-15T00:00:00Z'),\n    twoPartRelease: true\n}]->(k)"
2025-03-06 20:36:45,081 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (m))} {position: line: 1, column: 9, offset: 8} for query: "// Connect The Matrix to existing studios and new actors\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (m:Movie:GeneratedByClaudeAI {title: 'The Matrix'})\nCREATE (w)-[:PRODUCED {\n    investment: 63000000,\n    return: 463517383,\n    roi: 7.36,\n    contractSigned: date('1997-08-15'),\n    studioShare: 0.7,\n    directorShare: 0.1,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 45000000,\n    isProfitable: true,\n    marketingStart: datetime('1999-01-15T00:00:00Z'),\n    riskAssessment: 'High',\n    gamblePayoff: 'Extraordinary'\n}]->(m)"
2025-03-06 20:36:45,087 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (m))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (k:Person:GeneratedByClaudeAI {name: 'Keanu Reeves'}),\n  (m:Movie:GeneratedByClaudeAI {title: 'The Matrix'})\nCREATE (k)-[:ACTED_IN {\n    roles: ['Neo'],\n    salary: 10000000,\n    screenTimeMinutes: 112,\n    startDate: date('1998-03-31'),\n    endDate: date('1998-08-25'),\n    scheduleConflicts: false,\n    criticScore: 96,\n    audienceScore: 95,\n    martialArtsTraining: '4 months intensive',\n    stuntPercentage: 80,\n    careerDefiningRole: true\n}]->(m)"
2025-03-06 20:36:45,090 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (h))} {position: line: 1, column: 9, offset: 8} for query: "// Add a connection between Keanu and Hugo Weaving from the original graph\nMATCH\n  (k:Person:GeneratedByClaudeAI {name: 'Keanu Reeves'}),\n  (h:Person {name: 'Hugo Weaving'}) // From original graph\nCREATE (k)-[:WORKED_WITH {\n    projects: 4,\n    firstProject: 'The Matrix',\n    firstYear: 1999,\n    chemistry: 4.8,\n    interviews: 35,\n    relationship: 'Co-stars',\n    iconic_confrontations: 'Multiple',\n    screen_fights: 12\n}]->(h)"
2025-03-06 20:36:45,106 - Neo4jIngestor - ERROR - Error executing ./step1-create-movie-graph.cql: {code: Neo.ClientError.Statement.SyntaxError} {message: Invalid input '-': expected ":" (line 2708, column 8 (offset: 112594))
"    lab-studio_relationship: 'Long-standing Paramount account',"
        ^}
2025-03-06 20:36:45,111 - Neo4jIngestor - INFO - Closing Neo4j connection
2025-03-06 20:37:44,540 - Neo4jIngestor - INFO - Connecting to Neo4j at bolt://localhost:7687
2025-03-06 20:37:44,541 - Neo4jIngestor - INFO - Processing all CQL files in .
2025-03-06 20:37:44,541 - Neo4jIngestor - INFO - Scanning directory: .
2025-03-06 20:37:44,541 - Neo4jIngestor - INFO - Found 2 CQL files
2025-03-06 20:37:44,541 - Neo4jIngestor - INFO - Building dependency graph
2025-03-06 20:37:44,541 - Neo4jIngestor - INFO - Analyzing file: ./step1-create-movie-graph.cql
2025-03-06 20:37:44,571 - Neo4jIngestor - INFO - Analyzing file: ./enhanced-movie-graph.cql
2025-03-06 20:37:44,601 - Neo4jIngestor - INFO - Dependency graph built with 2 nodes and 0 edges
2025-03-06 20:37:44,601 - Neo4jIngestor - INFO - Determining execution order
2025-03-06 20:37:44,601 - Neo4jIngestor - INFO - Execution order determined: 2 files
2025-03-06 20:37:44,601 - Neo4jIngestor - INFO - Executing: ./step1-create-movie-graph.cql
2025-03-06 20:37:44,683 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes with various data types\nMATCH \n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (c)-[:DIRECTED {\n    year: 2010,\n    daysOnSet: 133,\n    satisfaction: 4.9,\n    awardNominations: 8,\n    completionDate: date('2009-12-15'),\n    premiereEvent: datetime('2010-07-08T19:00:00+01:00'),\n    durationMonths: 5,\n    isFirstCollaboration: false\n}]->(i)"
2025-03-06 20:37:44,688 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships\nMATCH\n  (l:Person:GeneratedByClaudeAI {name: 'Leonardo DiCaprio'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (l)-[:ACTED_IN {\n    roles: ['Dom Cobb'],\n    salary: 20000000,\n    screenTimeMinutes: 148,\n    startDate: date('2009-07-13'),\n    endDate: date('2009-11-22'),\n    scheduleConflicts: false,\n    criticScore: 95,\n    audienceScore: 91,\n    awardNominations: 3\n}]->(i)"
2025-03-06 20:37:44,695 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Marion Cotillard'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (m)-[:ACTED_IN {\n    roles: ['Mal Cobb'],\n    salary: 2000000,\n    screenTimeMinutes: 45,\n    startDate: date('2009-08-10'),\n    endDate: date('2009-09-30'),\n    scheduleConflicts: false,\n    performanceRating: 4.8\n}]->(i)"
2025-03-06 20:37:44,701 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Joseph Gordon-Levitt'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (j)-[:ACTED_IN {\n    roles: ['Arthur'],\n    salary: 1500000,\n    screenTimeMinutes: 73,\n    startDate: date('2009-07-13'),\n    endDate: date('2009-10-15'),\n    stuntPerformed: true,\n    trainingPeriodWeeks: 3\n}]->(i)"
2025-03-06 20:37:44,706 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Production relationships\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (w)-[:PRODUCED {\n    investment: 160000000,\n    return: 836800000,\n    roi: 5.23,\n    contractSigned: date('2008-12-01'),\n    studioShare: 0.6,\n    directorShare: 0.15,\n    producerShare: 0.15,\n    topCastShare: 0.1,\n    marketingBudget: 100000000,\n    isProfitable: true,\n    marketingStart: datetime('2010-01-15T00:00:00Z')\n}]->(i)"
2025-03-06 20:37:44,709 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Inception Principal Photography'})\nCREATE (w)-[:FINANCED {\n    contractDate: date('2008-12-01'),\n    amount: 160000000,\n    isFullyPaid: true\n}]->(p)"
2025-03-06 20:37:44,712 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Inception Principal Photography'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 4,\n    durationDays: 9,\n    locationCount: 6,\n    dailyAverageCost: 480000,\n    scheduleAdherence: 0.95,\n    weatherDelaysDays: 5,\n    originalScheduledEnd: date('2009-11-15')\n}]->(i)"
2025-03-06 20:37:44,726 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Review relationships\nMATCH\n  (j:Person {name: 'Jessica Thompson'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'A Mind-Bending Masterpiece'})\nCREATE (j)-[:WROTE {\n    date: date('2010-07-18'),\n    timeSpentMinutes: 45,\n    wordCount: 523,\n    isVerified: true,\n    submissionTime: time('14:23:45+01:00')\n}]->(r)"
2025-03-06 20:37:44,729 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'A Mind-Bending Masterpiece'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 128634,\n    shares: 4327,\n    comments: 1252,\n    featuredDurationDays: 14,\n    publicationDateTime: datetime('2010-07-18T14:30:00+01:00')\n}]->(i)"
2025-03-06 20:37:44,733 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationship\nMATCH\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (i)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2011,\n    ceremony: 83,\n    isWinner: false,\n    ceremonyDate: date('2011-02-27'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 2345,\n    votesAgainst: 2567\n}]->(a)"
2025-03-06 20:37:44,737 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (c)-[:NOMINATED_FOR {\n    category: 'Best Director',\n    year: 2011,\n    ceremony: 83,\n    isWinner: false,\n    ceremonyDate: date('2011-02-27'),\n    announcementTime: localtime('20:30:00'),\n    votesFor: 2132,\n    votesAgainst: 2780\n}]->(a)"
2025-03-06 20:37:44,742 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Additional connections to existing graph\nMATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (t:Person {name: 'Tom Hanks'}) // Original person from the graph\nCREATE (c)-[:KNOWS {\n    since: date('2002-01-15'),\n    projects: 3,\n    relationship: 'Professional',\n    lastContact: datetime('2023-05-15T14:30:00Z'),\n    nextMeeting: datetime('2025-04-10T09:00:00Z')\n}]->(t)"
2025-03-06 20:37:44,747 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (l:Person:GeneratedByClaudeAI {name: 'Leonardo DiCaprio'}),\n  (t:Person {name: 'Tom Hanks'}) // Original person from the graph\nCREATE (l)-[:KNOWS {\n    since: date('1997-10-12'),\n    relationship: 'Friends',\n    lastCollaboration: date('2015-12-25'),\n    durationYears: 26,\n    project1: 'The Revenant',\n    year1: 2015,\n    project2: 'Django Unchained',\n    year2: 2012\n}]->(t)"
2025-03-06 20:37:44,795 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes with various data types\nMATCH \n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (c)-[:DIRECTED {\n    year: 2010,\n    daysOnSet: 133,\n    satisfaction: 4.9,\n    awardNominations: 8,\n    completionDate: date('2009-12-15'),\n    premiereEvent: datetime('2010-07-08T19:00:00+01:00'),\n    durationMonths: 5,\n    isFirstCollaboration: false\n}]->(i)"
2025-03-06 20:37:44,800 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships\nMATCH\n  (l:Person:GeneratedByClaudeAI {name: 'Leonardo DiCaprio'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (l)-[:ACTED_IN {\n    roles: ['Dom Cobb'],\n    salary: 20000000,\n    screenTimeMinutes: 148,\n    startDate: date('2009-07-13'),\n    endDate: date('2009-11-22'),\n    scheduleConflicts: false,\n    criticScore: 95,\n    audienceScore: 91,\n    awardNominations: 3\n}]->(i)"
2025-03-06 20:37:44,806 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Marion Cotillard'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (m)-[:ACTED_IN {\n    roles: ['Mal Cobb'],\n    salary: 2000000,\n    screenTimeMinutes: 45,\n    startDate: date('2009-08-10'),\n    endDate: date('2009-09-30'),\n    scheduleConflicts: false,\n    performanceRating: 4.8\n}]->(i)"
2025-03-06 20:37:44,814 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Joseph Gordon-Levitt'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (j)-[:ACTED_IN {\n    roles: ['Arthur'],\n    salary: 1500000,\n    screenTimeMinutes: 73,\n    startDate: date('2009-07-13'),\n    endDate: date('2009-10-15'),\n    stuntPerformed: true,\n    trainingPeriodWeeks: 3\n}]->(i)"
2025-03-06 20:37:44,818 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Production relationships\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (w)-[:PRODUCED {\n    investment: 160000000,\n    return: 836800000,\n    roi: 5.23,\n    contractSigned: date('2008-12-01'),\n    studioShare: 0.6,\n    directorShare: 0.15,\n    producerShare: 0.15,\n    topCastShare: 0.1,\n    marketingBudget: 100000000,\n    isProfitable: true,\n    marketingStart: datetime('2010-01-15T00:00:00Z')\n}]->(i)"
2025-03-06 20:37:44,822 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Inception Principal Photography'})\nCREATE (w)-[:FINANCED {\n    contractDate: date('2008-12-01'),\n    amount: 160000000,\n    isFullyPaid: true\n}]->(p)"
2025-03-06 20:37:44,825 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Inception Principal Photography'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 4,\n    durationDays: 9,\n    locationCount: 6,\n    dailyAverageCost: 480000,\n    scheduleAdherence: 0.95,\n    weatherDelaysDays: 5,\n    originalScheduledEnd: date('2009-11-15')\n}]->(i)"
2025-03-06 20:37:44,830 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Review relationships\nMATCH\n  (j:Person {name: 'Jessica Thompson'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'A Mind-Bending Masterpiece'})\nCREATE (j)-[:WROTE {\n    date: date('2010-07-18'),\n    timeSpentMinutes: 45,\n    wordCount: 523,\n    isVerified: true,\n    submissionTime: time('14:23:45+01:00')\n}]->(r)"
2025-03-06 20:37:44,833 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'A Mind-Bending Masterpiece'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 128634,\n    shares: 4327,\n    comments: 1252,\n    featuredDurationDays: 14,\n    publicationDateTime: datetime('2010-07-18T14:30:00+01:00')\n}]->(i)"
2025-03-06 20:37:44,836 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationship\nMATCH\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (i)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2011,\n    ceremony: 83,\n    isWinner: false,\n    ceremonyDate: date('2011-02-27'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 2345,\n    votesAgainst: 2567\n}]->(a)"
2025-03-06 20:37:44,841 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (c)-[:NOMINATED_FOR {\n    category: 'Best Director',\n    year: 2011,\n    ceremony: 83,\n    isWinner: false,\n    ceremonyDate: date('2011-02-27'),\n    announcementTime: localtime('20:30:00'),\n    votesFor: 2132,\n    votesAgainst: 2780\n}]->(a)"
2025-03-06 20:37:44,846 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Additional connections to existing graph\nMATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (t:Person {name: 'Tom Hanks'}) // Original person from the graph\nCREATE (c)-[:KNOWS {\n    since: date('2002-01-15'),\n    projects: 3,\n    relationship: 'Professional',\n    lastContact: datetime('2023-05-15T14:30:00Z'),\n    nextMeeting: datetime('2025-04-10T09:00:00Z')\n}]->(t)"
2025-03-06 20:37:44,851 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (l:Person:GeneratedByClaudeAI {name: 'Leonardo DiCaprio'}),\n  (t:Person {name: 'Tom Hanks'}) // Original person from the graph\nCREATE (l)-[:KNOWS {\n    since: date('1997-10-12'),\n    relationship: 'Friends',\n    lastCollaboration: date('2015-12-25'),\n    durationYears: 26,\n    project1: 'The Revenant',\n    year1: 2015,\n    project2: 'Django Unchained',\n    year2: 2012\n}]->(t)"
2025-03-06 20:37:44,883 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes with various data types\nMATCH \n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'})\nCREATE (c)-[:DIRECTED {\n    year: 2014,\n    daysOnSet: 124,\n    satisfaction: 4.8,\n    awardNominations: 5,\n    completionDate: date('2014-09-22'),\n    premiereEvent: datetime('2014-10-26T18:30:00Z'),\n    durationMonths: 4,\n    isFirstCollaboration: false\n}]->(i)"
2025-03-06 20:37:44,886 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships for Interstellar\nMATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Matthew McConaughey'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'})\nCREATE (m)-[:ACTED_IN {\n    roles: ['Joseph Cooper'],\n    salary: 15000000,\n    screenTimeMinutes: 135,\n    startDate: date('2013-08-13'),\n    endDate: date('2013-12-14'),\n    scheduleConflicts: false,\n    criticScore: 92,\n    audienceScore: 94,\n    awardNominations: 4\n}]->(i)"
2025-03-06 20:37:44,889 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Jessica Chastain'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'})\nCREATE (j)-[:ACTED_IN {\n    roles: ['Murphy Cooper'],\n    salary: 3500000,\n    screenTimeMinutes: 45,\n    startDate: date('2013-09-10'),\n    endDate: date('2013-11-15'),\n    scheduleConflicts: true,\n    performanceRating: 4.7\n}]->(i)"
2025-03-06 20:37:44,893 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships for Arrival\nMATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Amy Adams'}),\n  (r:Movie:GeneratedByClaudeAI {title: 'Arrival'})\nCREATE (a)-[:ACTED_IN {\n    roles: ['Dr. Louise Banks'],\n    salary: 5000000,\n    screenTimeMinutes: 104,\n    startDate: date('2015-06-07'),\n    endDate: date('2015-08-28'),\n    scheduleConflicts: false,\n    criticScore: 94,\n    audienceScore: 89,\n    awardNominations: 5\n}]->(r)"
2025-03-06 20:37:44,896 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Director to Movie relationships for Arrival\nMATCH\n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'}),\n  (r:Movie:GeneratedByClaudeAI {title: 'Arrival'})\nCREATE (d)-[:DIRECTED {\n    year: 2016,\n    daysOnSet: 81,\n    satisfaction: 4.9,\n    awardNominations: 8,\n    completionDate: date('2016-08-15'),\n    premiereEvent: datetime('2016-09-01T20:15:00+02:00'),\n    durationMonths: 3,\n    isFirstCollaboration: true\n}]->(r)"
2025-03-06 20:37:44,899 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Studio relationships\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'})\nCREATE (w)-[:PRODUCED {\n    investment: 165000000,\n    return: 701800000,\n    roi: 4.25,\n    contractSigned: date('2012-08-15'),\n    studioShare: 0.55,\n    directorShare: 0.2,\n    producerShare: 0.15,\n    topCastShare: 0.1,\n    marketingBudget: 80000000,\n    isProfitable: true,\n    marketingStart: datetime('2014-05-15T00:00:00Z')\n}]->(i)"
2025-03-06 20:37:44,902 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Studio:GeneratedByClaudeAI {name: 'A24'}),\n  (r:Movie:GeneratedByClaudeAI {title: 'Arrival'})\nCREATE (a)-[:PRODUCED {\n    investment: 47000000,\n    return: 203400000,\n    roi: 4.33,\n    contractSigned: date('2014-11-10'),\n    studioShare: 0.6,\n    directorShare: 0.15,\n    producerShare: 0.15,\n    topCastShare: 0.1,\n    marketingBudget: 30000000,\n    isProfitable: true,\n    marketingStart: datetime('2016-04-12T00:00:00Z')\n}]->(r)"
2025-03-06 20:37:44,905 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Interstellar Principal Photography'})\nCREATE (w)-[:FINANCED {\n    contractDate: date('2012-08-15'),\n    amount: 165000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2013-01-10T00:00:00Z'),\n    transferTime2: datetime('2013-04-15T00:00:00Z'),\n    transferTime3: datetime('2013-07-01T00:00:00Z'),\n    paymentDate1: date('2013-01-10'),\n    paymentAmount1: 50000000,\n    paymentDate2: date('2013-04-15'),\n    paymentAmount2: 65000000,\n    paymentDate3: date('2013-07-01'),\n    paymentAmount3: 50000000\n}]->(p)"
2025-03-06 20:37:44,907 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Studio:GeneratedByClaudeAI {name: 'A24'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Arrival Principal Photography'})\nCREATE (a)-[:FINANCED {\n    contractDate: date('2014-11-10'),\n    amount: 47000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2015-01-15T00:00:00Z'),\n    transferTime2: datetime('2015-03-30T00:00:00Z'),\n    paymentDate1: date('2015-01-15'),\n    paymentAmount1: 22000000,\n    paymentDate2: date('2015-03-30'),\n    paymentAmount2: 25000000\n}]->(p)"
2025-03-06 20:37:44,910 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Interstellar Principal Photography'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 4,\n    durationDays: 1,\n    locationCount: 8,\n    dailyAverageCost: 520000,\n    scheduleAdherence: 0.92,\n    weatherDelaysDays: 8,\n    originalScheduledEnd: date('2013-12-05')\n}]->(i)"
2025-03-06 20:37:44,913 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Arrival Principal Photography'}),\n  (r:Movie:GeneratedByClaudeAI {title: 'Arrival'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 2,\n    durationDays: 21,\n    locationCount: 5,\n    dailyAverageCost: 290000,\n    scheduleAdherence: 0.98,\n    weatherDelaysDays: 2,\n    originalScheduledEnd: date('2015-08-25')\n}]->(r)"
2025-03-06 20:37:44,917 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Review relationships\nMATCH\n  (j:Person {name: 'James Thompson'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'A Cosmic Emotional Journey'})\nCREATE (j)-[:WROTE {\n    date: date('2014-11-10'),\n    timeSpentMinutes: 50,\n    wordCount: 612,\n    isVerified: true,\n    submissionTime: time('16:42:18+01:00')\n}]->(r)"
2025-03-06 20:37:44,920 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person {name: 'Angela Scope'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'A Linguistic Masterpiece'})\nCREATE (a)-[:WROTE {\n    date: date('2016-11-14'),\n    timeSpentMinutes: 45,\n    wordCount: 568,\n    isVerified: true,\n    submissionTime: time('20:15:36+01:00')\n}]->(r)"
2025-03-06 20:37:44,923 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'A Cosmic Emotional Journey'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 152487,\n    shares: 6842,\n    comments: 2156,\n    featuredDurationDays: 21,\n    publicationDateTime: datetime('2014-11-10T17:00:00+01:00')\n}]->(i)"
2025-03-06 20:37:44,924 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'A Linguistic Masterpiece'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Arrival'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 98245,\n    shares: 3621,\n    comments: 1583,\n    featuredDurationDays: 14,\n    publicationDateTime: datetime('2016-11-14T21:00:00+01:00')\n}]->(i)"
2025-03-06 20:37:44,927 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationships\nMATCH\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (i)-[:NOMINATED_FOR {\n    category: 'Best Original Score',\n    year: 2015,\n    ceremony: 87,\n    isWinner: false,\n    ceremonyDate: date('2015-02-22'),\n    announcementTime: localtime('21:15:00'),\n    votesFor: 2856,\n    votesAgainst: 3012\n}]->(a)"
2025-03-06 20:37:44,930 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'}),\n  (b:Ceremony:GeneratedByClaudeAI {name: 'BAFTA Film Awards'})\nCREATE (i)-[:NOMINATED_FOR {\n    category: 'Best Original Music',\n    year: 2015,\n    ceremony: 68,\n    isWinner: true,\n    ceremonyDate: date('2015-02-08'),\n    announcementTime: localtime('20:45:00'),\n    votesFor: 1523,\n    votesAgainst: 1287\n}]->(b)"
2025-03-06 20:37:44,933 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Movie:GeneratedByClaudeAI {title: 'Arrival'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (r)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2017,\n    ceremony: 89,\n    isWinner: false,\n    ceremonyDate: date('2017-02-26'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 2785,\n    votesAgainst: 3142\n}]->(a)"
2025-03-06 20:37:44,937 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (d)-[:NOMINATED_FOR {\n    category: 'Best Director',\n    year: 2017,\n    ceremony: 89,\n    isWinner: false,\n    ceremonyDate: date('2017-02-26'),\n    announcementTime: localtime('21:00:00'),\n    votesFor: 2456,\n    votesAgainst: 3471\n}]->(a)"
2025-03-06 20:37:44,943 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "// Professional relationships between people\nMATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'})\nCREATE (c)-[:KNOWS {\n    since: date('2010-09-12'),\n    projects: 0,\n    relationship: 'Professional Acquaintance',\n    lastContact: datetime('2023-11-15T11:30:00Z'),\n    nextMeeting: datetime('2025-06-20T14:00:00Z')\n}]->(d)"
2025-03-06 20:37:44,947 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (j))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Matthew McConaughey'}),\n  (j:Person:GeneratedByClaudeAI {name: 'Jessica Chastain'})\nCREATE (m)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'Interstellar',\n    firstYear: 2014,\n    chemistry: 4.8,\n    interviews: 15,\n    jointSceneMinutes: 12,\n    relationship: 'Co-stars',\n    nextProjectPlanned: date('2026-03-15')\n}]->(j)"
2025-03-06 20:37:44,952 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (m))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (l:Person:GeneratedByClaudeAI {name: 'Leonardo DiCaprio'}),\n  (m:Person:GeneratedByClaudeAI {name: 'Matthew McConaughey'})\nCREATE (l)-[:KNOWS {\n    since: date('2006-11-23'),\n    relationship: 'Friends',\n    lastMeeting: date('2023-12-15'),\n    durationYears: 17,\n    commonFriends: 8,\n    commonProjects: 0\n}]->(m)"
2025-03-06 20:37:44,956 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (j))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Amy Adams'}),\n  (j:Person:GeneratedByClaudeAI {name: 'Jessica Chastain'})\nCREATE (a)-[:KNOWS {\n    since: date('2011-05-07'),\n    relationship: 'Friends and Colleagues',\n    lastMeeting: date('2024-01-22'),\n    durationYears: 13,\n    commonAwards: 5,\n    commonGenres: ['Drama', 'Sci-Fi']\n}]->(j)"
2025-03-06 20:37:44,961 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Connection with original graph\nMATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (t:Person {name: 'Tom Cruise'}) // Original person from the graph\nCREATE (c)-[:ADMIRES {\n    since: date('1998-07-25'),\n    projects: 0,\n    relationship: 'Professional Admiration',\n    lastContact: null,\n    inspirationLevel: 4.7,\n    influencedWorks: ['Inception', 'Tenet']\n}]->(t)"
2025-03-06 20:37:44,965 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'}),\n  (r:Person {name: 'Rob Reiner'}) // Original person from the graph\nCREATE (d)-[:INSPIRED_BY {\n    since: date('1987-10-15'),\n    favouriteFilm: 'Stand By Me',\n    impactLevel: 4.8,\n    mentionedInInterviews: 12,\n    influencedWorks: ['Arrival', 'Prisoners']\n}]->(r)"
2025-03-06 20:37:44,971 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 16, column: 1, offset: 480} for query: "// Create additional node types\nCREATE (TeslaModel:CarModel:GeneratedByClaudeAI {\n    name: 'Tesla Model S',\n    introduced: date('2012-06-22'),\n    featured: true,\n    featuredInMovies: ['Interstellar Behind the Scenes'],\n    featuredInYears: [2014],\n    productPlacementCost: 0,\n    vehicleType: 'Electric Sedan',\n    maxSpeed: 322,\n    maxSpeedUnit: 'km/h',\n    manufactureLocation: 'Fremont, California',\n    manufactureLocationLat: 37.4924,\n    manufactureLocationLong: -121.9465\n})\nWITH 1 as dummy\nMATCH (m:Movie:GeneratedByClaudeAI {title: 'Interstellar'}),\n      (c:CarModel:GeneratedByClaudeAI {name: 'Tesla Model S'})\nCREATE (c)-[:FEATURED_IN {\n    screenTimeSeconds: 45,\n    isProminentPlacement: false,\n    sceneCount: 2,\n    firstAppearance: time('00:32:15'),\n    lastAppearance: time('01:45:22'),\n    contractDate: date('2013-05-12')\n}]->(m)"
2025-03-06 20:37:44,975 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 343} for query: "// Create prop node\nCREATE (InceptionTotem:Prop:GeneratedByClaudeAI {\n    name: 'Spinning Top',\n    movie: 'Inception',\n    material: 'Metal',\n    weight: 0.12,\n    weightUnit: 'kg',\n    createdDate: date('2009-05-22'),\n    screenTime: duration({minutes: 6, seconds: 45}),\n    isIconic: true,\n    auctionValue: 15000,\n    copiesMade: 5\n})\nWITH 1 as dummy\nMATCH (i:Movie:GeneratedByClaudeAI {title: 'Inception'}),\n      (p:Prop:GeneratedByClaudeAI {name: 'Spinning Top'})\nCREATE (p)-[:USED_IN {\n    scenes: ['Opening', 'Hotel', 'Ending'],\n    sceneCount: 3,\n    firstAppearance: time('00:04:15'),\n    lastAppearance: time('02:28:15'),\n    isCloseup: true,\n    significance: 'Critical plot device'\n}]->(i)"
2025-03-06 20:37:44,978 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 15, column: 1, offset: 487} for query: "// Create soundtrack node\nCREATE (InterstellarSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'Interstellar: Original Motion Picture Soundtrack',\n    composer: 'Hans Zimmer',\n    released: date('2014-11-18'),\n    duration: duration({minutes: 71, seconds: 49}),\n    trackCount: 16,\n    recordingStudio: 'Air Lyndhurst Hall, London',\n    recordingStudioLat: 51.5454,\n    recordingStudioLong: -0.1388,\n    peakChartPosition: 2,\n    salesUnits: 250000,\n    streamingCount: 150000000\n})\nWITH 1 as dummy\nMATCH (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'}),\n      (s:Soundtrack:GeneratedByClaudeAI {title: 'Interstellar: Original Motion Picture Soundtrack'})\nCREATE (s)-[:COMPOSED_FOR {\n    contractDate: date('2013-01-15'),\n    completion: date('2014-09-15'),\n    nominatedAwards: ['Academy Award', 'BAFTA', 'Golden Globe'],\n    wonAwards: ['BAFTA'],\n    spotifyStreams: 250000000,\n    youtubeViews: 45000000\n}]->(i)"
2025-03-06 20:37:44,980 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 16, column: 1, offset: 420} for query: "// Create location node\nCREATE (IcelandLocation:FilmingLocation:GeneratedByClaudeAI {\n    name: 'Svínafellsjökull',\n    country: 'Iceland',\n    region: 'Vatnajökull National Park',\n    latitude: 64.0080,\n    longitude: -16.3832,\n    elevation: 120,\n    elevationUnit: 'm',\n    climate: 'Subarctic',\n    permitCost: 85000,\n    permitCurrency: 'USD',\n    firstUsed: date('2013-09-25'),\n    lastUsed: date('2013-10-12')\n})\nWITH 1 as dummy\nMATCH (i:Movie:GeneratedByClaudeAI {title: 'Interstellar'}),\n      (l:FilmingLocation:GeneratedByClaudeAI {name: 'Svínafellsjökull'})\nCREATE (i)-[:FILMED_AT {\n    startDate: date('2013-09-25'),\n    endDate: date('2013-10-12'),\n    sceneCount: 8,\n    totalDays: 18,\n    weatherDelayDays: 3,\n    crewSize: 132,\n    logisticsCost: 450000,\n    accommodationCost: 320000,\n    characterPresent: ['Cooper', 'Brand']\n}]->(l)"
2025-03-06 20:37:45,020 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes with various data types\nMATCH \n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (d)-[:DIRECTED {\n    year: 2017,\n    daysOnSet: 136,\n    satisfaction: 4.9,\n    awardNominations: 7,\n    completionDate: date('2017-07-15'),\n    premiereEvent: datetime('2017-10-03T19:30:00+01:00'),\n    durationMonths: 4,\n    isFirstCollaboration: false\n}]->(b)"
2025-03-06 20:37:45,023 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (j:Person:GeneratedByClaudeAI {name: 'Jonathan Demme'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'})\nCREATE (j)-[:DIRECTED {\n    year: 1991,\n    daysOnSet: 105,\n    satisfaction: 4.9,\n    awardNominations: 10,\n    completionDate: date('1990-11-15'),\n    premiereEvent: datetime('1991-01-30T19:00:00-05:00'),\n    durationMonths: 5,\n    isFirstCollaboration: true\n}]->(s)"
2025-03-06 20:37:45,026 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships\nMATCH\n  (r:Person:GeneratedByClaudeAI {name: 'Ryan Gosling'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (r)-[:ACTED_IN {\n    roles: ['Officer K'],\n    salary: 10000000,\n    screenTimeMinutes: 143,\n    startDate: date('2016-07-12'),\n    endDate: date('2016-11-25'),\n    scheduleConflicts: false,\n    criticScore: 94,\n    audienceScore: 90,\n    awardNominations: 3\n}]->(b)"
2025-03-06 20:37:45,029 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Jodie Foster'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'})\nCREATE (j)-[:ACTED_IN {\n    roles: ['Clarice Starling'],\n    salary: 1200000,\n    screenTimeMinutes: 102,\n    startDate: date('1989-11-15'),\n    endDate: date('1990-03-01'),\n    scheduleConflicts: false,\n    criticScore: 97,\n    audienceScore: 95,\n    awardNominations: 8,\n    awardWins: 5\n}]->(s)"
2025-03-06 20:37:45,032 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Anthony Hopkins'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'})\nCREATE (a)-[:ACTED_IN {\n    roles: ['Dr. Hannibal Lecter'],\n    salary: 1000000,\n    screenTimeMinutes: 16,\n    startDate: date('1989-12-10'),\n    endDate: date('1990-01-15'),\n    scheduleConflicts: false,\n    criticScore: 99,\n    audienceScore: 97,\n    awardNominations: 8,\n    awardWins: 6\n}]->(s)"
2025-03-06 20:37:45,035 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (h:Person:GeneratedByClaudeAI {name: 'Hailee Steinfeld'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (h)-[:VOICED_IN {\n    roles: ['Gwen Stacy / Spider-Gwen'],\n    salary: 750000,\n    recordingDays: 14,\n    startDate: date('2017-04-15'),\n    endDate: date('2018-06-22'),\n    recordingSessions: 8,\n    linesCount: 425,\n    performanceRating: 4.8\n}]->(s)"
2025-03-06 20:37:45,039 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "// Studio relationships\nMATCH\n  (a:Studio:GeneratedByClaudeAI {name: 'A24'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (a)-[:CO_PRODUCED {\n    investment: 45000000,\n    return: 63000000,\n    roi: 1.4,\n    contractSigned: date('2015-06-22'),\n    studioShare: 0.15,\n    marketingContribution: 12000000,\n    isProfitable: true,\n    marketingStart: datetime('2017-03-15T00:00:00Z'),\n    profitDate: date('2018-02-28')\n}]->(b)"
2025-03-06 20:37:45,042 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (w)-[:PRODUCED {\n    investment: 140000000,\n    return: 196300000,\n    roi: 1.4,\n    contractSigned: date('2015-02-10'),\n    studioShare: 0.6,\n    directorShare: 0.1,\n    producerShare: 0.1,\n    topCastShare: 0.05,\n    marketingBudget: 150000000,\n    isProfitable: false,\n    marketingStart: datetime('2017-01-15T00:00:00Z')\n}]->(b)"
2025-03-06 20:37:45,045 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (o:Studio:GeneratedByClaudeAI {name: 'Orion Pictures'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'})\nCREATE (o)-[:PRODUCED {\n    investment: 19000000,\n    return: 272700000,\n    roi: 14.35,\n    contractSigned: date('1989-06-15'),\n    studioShare: 0.65,\n    directorShare: 0.08,\n    producerShare: 0.07,\n    topCastShare: 0.2,\n    marketingBudget: 9000000,\n    isProfitable: true,\n    marketingStart: datetime('1990-11-15T00:00:00Z'),\n    breakEvenDate: date('1991-03-22')\n}]->(s)"
2025-03-06 20:37:45,049 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (sv))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Studio:GeneratedByClaudeAI {name: 'Sony Pictures'}),\n  (sv:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (s)-[:PRODUCED {\n    investment: 90000000,\n    return: 375500000,\n    roi: 4.17,\n    contractSigned: date('2015-09-30'),\n    studioShare: 0.7,\n    directorShare: 0.08,\n    producerShare: 0.12,\n    topCastShare: 0.1,\n    marketingBudget: 110000000,\n    isProfitable: true,\n    marketingStart: datetime('2018-05-15T00:00:00Z'),\n    breakEvenDate: date('2019-01-18')\n}]->(sv)"
2025-03-06 20:37:45,052 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Blade Runner 2049 Principal Photography'})\nCREATE (w)-[:FINANCED {\n    contractDate: date('2015-02-10'),\n    amount: 140000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2016-02-15T00:00:00Z'),\n    transferTime2: datetime('2016-05-12T00:00:00Z'),\n    transferTime3: datetime('2016-06-30T00:00:00Z'),\n    paymentDate1: date('2016-02-15'),\n    paymentAmount1: 40000000,\n    paymentDate2: date('2016-05-12'),\n    paymentAmount2: 50000000,\n    paymentDate3: date('2016-06-30'),\n    paymentAmount3: 50000000\n}]->(p)"
2025-03-06 20:37:45,054 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (o:Studio:GeneratedByClaudeAI {name: 'Orion Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'The Silence of the Lambs Principal Photography'})\nCREATE (o)-[:FINANCED {\n    contractDate: date('1989-06-15'),\n    amount: 19000000,\n    isFullyPaid: true,\n    transferTime1: datetime('1989-08-22T00:00:00Z'),\n    transferTime2: datetime('1989-10-30T00:00:00Z'),\n    paymentDate1: date('1989-08-22'),\n    paymentAmount1: 9000000,\n    paymentDate2: date('1989-10-30'),\n    paymentAmount2: 10000000\n}]->(p)"
2025-03-06 20:37:45,056 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Studio:GeneratedByClaudeAI {name: 'Sony Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Spider-Verse Animation Production'})\nCREATE (s)-[:FINANCED {\n    contractDate: date('2015-09-30'),\n    amount: 90000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2016-01-15T00:00:00Z'),\n    transferTime2: datetime('2016-12-15T00:00:00Z'),\n    transferTime3: datetime('2017-06-30T00:00:00Z'),\n    transferTime4: datetime('2018-01-15T00:00:00Z'),\n    paymentDate1: date('2016-01-15'),\n    paymentAmount1: 20000000,\n    paymentDate2: date('2016-12-15'),\n    paymentAmount2: 25000000,\n    paymentDate3: date('2017-06-30'),\n    paymentAmount3: 30000000,\n    paymentDate4: date('2018-01-15'),\n    paymentAmount4: 15000000\n}]->(p)"
2025-03-06 20:37:45,059 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Blade Runner 2049 Principal Photography'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 4,\n    durationDays: 13,\n    locationCount: 7,\n    dailyAverageCost: 580000,\n    scheduleAdherence: 0.94,\n    weatherDelaysDays: 6,\n    originalScheduledEnd: date('2016-11-15')\n}]->(b)"
2025-03-06 20:37:45,062 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'The Silence of the Lambs Principal Photography'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 3,\n    durationDays: 16,\n    locationCount: 12,\n    dailyAverageCost: 150000,\n    scheduleAdherence: 0.96,\n    weatherDelaysDays: 4,\n    originalScheduledEnd: date('1990-02-20')\n}]->(s)"
2025-03-06 20:37:45,064 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Spider-Verse Animation Production'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 28,\n    durationDays: 16,\n    animationStudios: 3,\n    dailyAverageCost: 110000,\n    scheduleAdherence: 0.92,\n    technologyDelaysDays: 45,\n    originalScheduledEnd: date('2018-08-15'),\n    animationFrames: 168452,\n    renderingHours: 55800\n}]->(s)"
2025-03-06 20:37:45,067 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Review relationships\nMATCH\n  (a:Person {name: 'Angela Scope'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'A Worthy Successor to a Classic'})\nCREATE (a)-[:WROTE {\n    date: date('2017-10-10'),\n    timeSpentMinutes: 55,\n    wordCount: 645,\n    isVerified: true,\n    submissionTime: time('18:23:45+01:00')\n}]->(r)"
2025-03-06 20:37:45,074 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person {name: 'Jessica Thompson'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'Masterful Psychological Horror'})\nCREATE (j)-[:WROTE {\n    date: date('1991-02-20'),\n    timeSpentMinutes: 60,\n    wordCount: 712,\n    isVerified: true,\n    submissionTime: time('14:15:30-05:00'),\n    publicationName: 'Film Journal',\n    isRetroReview: false\n}]->(r)"
2025-03-06 20:37:45,078 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Person {name: 'Paul Blythe'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'Animation Revolution'})\nCREATE (p)-[:WROTE {\n    date: date('2018-12-18'),\n    timeSpentMinutes: 50,\n    wordCount: 685,\n    isVerified: true,\n    submissionTime: time('21:34:18-08:00')\n}]->(r)"
2025-03-06 20:37:45,080 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'A Worthy Successor to a Classic'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 183452,\n    shares: 7562,\n    comments: 2875,\n    featuredDurationDays: 28,\n    publicationDateTime: datetime('2017-10-10T19:30:00+01:00')\n}]->(b)"
2025-03-06 20:37:45,083 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'Masterful Psychological Horror'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 345782,\n    shares: 2845,\n    comments: 1923,\n    featuredDurationDays: 45,\n    publicationDateTime: datetime('1991-02-20T15:30:00-05:00'),\n    reprintCount: 8,\n    digitalArchiveDate: date('1998-05-12')\n}]->(s)"
2025-03-06 20:37:45,085 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'Animation Revolution'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 256893,\n    shares: 15478,\n    comments: 3562,\n    featuredDurationDays: 30,\n    publicationDateTime: datetime('2018-12-18T22:15:00-08:00')\n}]->(s)"
2025-03-06 20:37:45,088 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationships\nMATCH\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (b)-[:NOMINATED_FOR {\n    category: 'Best Cinematography',\n    year: 2018,\n    ceremony: 90,\n    isWinner: true,\n    ceremonyDate: date('2018-03-04'),\n    announcementTime: localtime('20:15:00'),\n    votesFor: 4567,\n    votesAgainst: 2123\n}]->(a)"
2025-03-06 20:37:45,091 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'}),\n  (g:Ceremony:GeneratedByClaudeAI {name: 'Golden Globe Awards'})\nCREATE (b)-[:NOMINATED_FOR {\n    category: 'Best Original Score',\n    year: 2018,\n    ceremony: 75,\n    isWinner: false,\n    ceremonyDate: date('2018-01-07'),\n    announcementTime: localtime('21:30:00'),\n    votesFor: 32,\n    votesAgainst: 58\n}]->(g)"
2025-03-06 20:37:45,094 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (s)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 1992,\n    ceremony: 64,\n    isWinner: true,\n    ceremonyDate: date('1992-03-30'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 4786,\n    votesAgainst: 1234\n}]->(a)"
2025-03-06 20:37:45,099 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Jodie Foster'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (j)-[:NOMINATED_FOR {\n    category: 'Best Actress',\n    year: 1992,\n    ceremony: 64,\n    isWinner: true,\n    ceremonyDate: date('1992-03-30'),\n    announcementTime: localtime('20:25:00'),\n    votesFor: 4562,\n    votesAgainst: 1458,\n    speechDuration: duration({minutes: 2, seconds: 47})\n}]->(a)"
2025-03-06 20:37:45,105 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Anthony Hopkins'}),\n  (c:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (a)-[:NOMINATED_FOR {\n    category: 'Best Actor',\n    year: 1992,\n    ceremony: 64,\n    isWinner: true,\n    ceremonyDate: date('1992-03-30'),\n    announcementTime: localtime('20:55:00'),\n    votesFor: 4876,\n    votesAgainst: 1144,\n    speechDuration: null\n}]->(c)"
2025-03-06 20:37:45,109 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Jonathan Demme'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (j)-[:NOMINATED_FOR {\n    category: 'Best Director',\n    year: 1992,\n    ceremony: 64,\n    isWinner: true,\n    ceremonyDate: date('1992-03-30'),\n    announcementTime: localtime('21:15:00'),\n    votesFor: 4352,\n    votesAgainst: 1668,\n    speechDuration: duration({minutes: 3, seconds: 12})\n}]->(a)"
2025-03-06 20:37:45,113 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (s)-[:NOMINATED_FOR {\n    category: 'Best Animated Feature Film',\n    year: 2019,\n    ceremony: 91,\n    isWinner: true,\n    ceremonyDate: date('2019-02-24'),\n    announcementTime: localtime('19:35:00'),\n    votesFor: 4879,\n    votesAgainst: 1121\n}]->(a)"
2025-03-06 20:37:45,115 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Annie Awards'})\nCREATE (s)-[:NOMINATED_FOR {\n    category: 'Best Animated Feature',\n    year: 2019,\n    ceremony: 46,\n    isWinner: true,\n    ceremonyDate: date('2019-02-02'),\n    announcementTime: localtime('20:45:00'),\n    categories: 7,\n    wins: 7\n}]->(a)"
2025-03-06 20:37:45,118 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "// Professional relationships between people\nMATCH\n  (r:Person:GeneratedByClaudeAI {name: 'Ryan Gosling'}),\n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'})\nCREATE (r)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'Blade Runner 2049',\n    firstYear: 2017,\n    chemistry: 4.9,\n    interviews: 28,\n    relationship: 'Actor-Director',\n    nextProjectPlanned: date('2026-06-15')\n}]->(d)"
2025-03-06 20:37:45,122 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Jodie Foster'}),\n  (a:Person:GeneratedByClaudeAI {name: 'Anthony Hopkins'})\nCREATE (j)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'The Silence of the Lambs',\n    firstYear: 1991,\n    chemistry: 5.0,\n    interviews: 45,\n    jointSceneMinutes: 22,\n    relationship: 'Co-stars',\n    reunionAttempts: 3\n}]->(a)"
2025-03-06 20:37:45,125 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (jd))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Jodie Foster'}),\n  (jd:Person:GeneratedByClaudeAI {name: 'Jonathan Demme'})\nCREATE (j)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'The Silence of the Lambs',\n    firstYear: 1991,\n    chemistry: 4.9,\n    interviews: 32,\n    relationship: 'Actor-Director',\n    awards: ['Academy Award', 'Golden Globe', 'BAFTA']\n}]->(jd)"
2025-03-06 20:37:45,129 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (jd))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Anthony Hopkins'}),\n  (jd:Person:GeneratedByClaudeAI {name: 'Jonathan Demme'})\nCREATE (a)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'The Silence of the Lambs',\n    firstYear: 1991,\n    chemistry: 4.8,\n    interviews: 28,\n    relationship: 'Actor-Director',\n    filmedDays: 14\n}]->(jd)"
2025-03-06 20:37:45,132 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (h:Person:GeneratedByClaudeAI {name: 'Hailee Steinfeld'}),\n  (r:Person:GeneratedByClaudeAI {name: 'Ryan Gosling'})\nCREATE (h)-[:KNOWS {\n    since: date('2016-08-12'),\n    relationship: 'Professional Acquaintances',\n    lastMeeting: date('2023-05-18'),\n    durationYears: 7,\n    commonFriends: 5,\n    commonProjects: 0\n}]->(r)"
2025-03-06 20:37:45,136 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (j))} {position: line: 1, column: 9, offset: 8} for query: "// Connection with original graph\nMATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Anthony Hopkins'}),\n  (j:Person {name: 'Jack Nicholson'}) // Original person from the graph\nCREATE (a)-[:ADMIRES {\n    since: date('1975-11-08'),\n    projects: 0,\n    relationship: 'Professional Admiration',\n    lastContact: date('2019-06-22'),\n    inspirationLevel: 4.9,\n    influencedWorks: ['The Silence of the Lambs', 'The Father']\n}]->(j)"
2025-03-06 20:37:45,140 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Jodie Foster'}),\n  (r:Person {name: 'Renee Zellweger'}) // Original person from the graph\nCREATE (j)-[:KNOWS {\n    since: date('1995-03-15'),\n    relationship: 'Friends',\n    lastMeeting: date('2022-11-28'),\n    durationYears: 28,\n    commonEvents: 15,\n    commonFriends: 8\n}]->(r)"
2025-03-06 20:37:45,145 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 387} for query: "// Create custom prop node for The Silence of the Lambs\nCREATE (MothCocoon:Prop:GeneratedByClaudeAI {\n    name: 'Death\\'s-head Hawkmoth Cocoon',\n    movie: 'The Silence of the Lambs',\n    material: 'Resin and mixed media',\n    weight: 0.05,\n    weightUnit: 'kg',\n    createdDate: date('1989-10-15'),\n    screenTime: duration({minutes: 0, seconds: 45}),\n    isIconic: true,\n    auctionValue: 8500,\n    copiesMade: 15\n})\nWITH 1 as dummy\nMATCH (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'}),\n      (p:Prop:GeneratedByClaudeAI {name: 'Death\\'s-head Hawkmoth Cocoon'})\nCREATE (p)-[:USED_IN {\n    scenes: ['Autopsy', 'Evidence'],\n    sceneCount: 2,\n    firstAppearance: time('00:35:22'),\n    lastAppearance: time('00:36:07'),\n    isCloseup: true,\n    significance: 'Critical clue'\n}]->(s)"
2025-03-06 20:37:45,148 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (st))} {position: line: 15, column: 1, offset: 488} for query: "// Create soundtrack node for Silence of the Lambs\nCREATE (SilenceSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'The Silence of the Lambs: Original Motion Picture Soundtrack',\n    composer: 'Howard Shore',\n    released: date('1991-02-12'),\n    duration: duration({minutes: 53, seconds: 20}),\n    trackCount: 15,\n    recordingStudio: 'CTS Studios, London',\n    recordingStudioLat: 51.5074,\n    recordingStudioLong: -0.1278,\n    peakChartPosition: 120,\n    salesUnits: 75000,\n    streamingCount: 12000000\n})\nWITH 1 as dummy\nMATCH (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'}),\n      (st:Soundtrack:GeneratedByClaudeAI {title: 'The Silence of the Lambs: Original Motion Picture Soundtrack'})\nCREATE (st)-[:COMPOSED_FOR {\n    contractDate: date('1989-08-15'),\n    completion: date('1990-12-10'),\n    nominatedAwards: ['Saturn Award'],\n    wonAwards: [],\n    spotifyStreams: 8500000,\n    youtubeViews: 6200000\n}]->(s)"
2025-03-06 20:37:45,150 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 16, column: 1, offset: 413} for query: "// Create location node for Silence of the Lambs\nCREATE (PittsburghLocation:FilmingLocation:GeneratedByClaudeAI {\n    name: 'Western Pennsylvania',\n    country: 'USA',\n    region: 'Pittsburgh area',\n    latitude: 40.4406,\n    longitude: -79.9959,\n    elevation: 232,\n    elevationUnit: 'm',\n    climate: 'Temperate',\n    permitCost: 45000,\n    permitCurrency: 'USD',\n    firstUsed: date('1989-11-15'),\n    lastUsed: date('1990-02-10')\n})\nWITH 1 as dummy\nMATCH (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'}),\n      (l:FilmingLocation:GeneratedByClaudeAI {name: 'Western Pennsylvania'})\nCREATE (s)-[:FILMED_AT {\n    startDate: date('1989-11-15'),\n    endDate: date('1990-02-10'),\n    sceneCount: 32,\n    totalDays: 87,\n    weatherDelayDays: 8,\n    crewSize: 85,\n    logisticsCost: 180000,\n    accommodationCost: 145000,\n    characterPresent: ['Clarice Starling', 'Jack Crawford', 'Buffalo Bill']\n}]->(l)"
2025-03-06 20:37:45,152 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (sv))} {position: line: 14, column: 1, offset: 400} for query: "// Create animation studio node\nCREATE (SonyAnimation:AnimationStudio:GeneratedByClaudeAI {\n    name: 'Sony Pictures Animation',\n    founded: date('2002-05-09'),\n    headquartersLat: 34.0211,\n    headquartersLong: -118.3787,\n    employeeCount: 800,\n    animationStyle: 'Mixed/Various',\n    specialization: 'Feature Animation',\n    yearlyProductions: 2.5,\n    technologyBudget: 45000000,\n    awardWins: 15\n})\nWITH 1 as dummy\nMATCH (s:AnimationStudio:GeneratedByClaudeAI {name: 'Sony Pictures Animation'}),\n      (sv:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (s)-[:ANIMATED {\n    startDate: date('2016-06-15'),\n    endDate: date('2018-09-15'),\n    teamSize: 142,\n    leadAnimators: 28,\n    technicalInnovations: ['Comic book visual style', 'Mixed frame rates', 'Hand-drawn elements'],\n    softwareUsed: ['Maya', 'Houdini', 'Proprietary tools'],\n    renderingHours: 55800,\n    totalFrames: 168452\n}]->(sv)"
2025-03-06 20:37:45,156 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 14, column: 1, offset: 363} for query: "// Create director relationships for Spider-Verse\nCREATE (BobP:Person:GeneratedByClaudeAI {\n    name: 'Bob Persichetti',\n    born: 1973,\n    birthdate: date('1973-01-17'),\n    nationality: 'American',\n    oscarWins: 1,\n    isActive: true,\n    firstFilm: datetime('2018-12-14T00:00:00Z'),\n    animationBackground: true,\n    specialization: 'Animation Direction',\n    yearsInIndustry: 25\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Bob Persichetti'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (p)-[:CO_DIRECTED {\n    year: 2018,\n    daysOnProject: 912,\n    satisfaction: 4.9,\n    awardNominations: 12,\n    awardWins: 8,\n    completionDate: date('2018-10-01'),\n    premiereEvent: datetime('2018-12-01T19:00:00-08:00'),\n    durationMonths: 30,\n    responsibility: 'Animation Direction',\n    isFirstDirectingRole: true\n}]->(s)"
2025-03-06 20:37:45,167 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 15, column: 1, offset: 424} for query: "// Create costume designer for Silence of the Lambs\nCREATE (ColetteA:Person:GeneratedByClaudeAI {\n    name: 'Colleen Atwood',\n    born: 1948,\n    birthdate: date('1948-09-25'),\n    nationality: 'American',\n    oscarWins: 4,\n    oscarNominations: 12,\n    isActive: true,\n    firstFilm: datetime('1984-11-09T00:00:00Z'),\n    designStyle: 'Period-accurate with subtle character elements',\n    heightInMeters: 1.65,\n    specialization: 'Costume Design'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Colleen Atwood'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'The Silence of the Lambs'})\nCREATE (p)-[:DESIGNED_COSTUMES_FOR {\n    year: 1991,\n    costumesCreated: 248,\n    budget: 380000,\n    awardNominations: 3,\n    awardWins: 1,\n    startDate: date('1989-09-15'),\n    completionDate: date('1989-11-10'),\n    specialCostumes: ['Buffalo Bill', 'Hannibal Lecter restraints', 'FBI uniforms'],\n    researchHours: 120\n}]->(s)"
2025-03-06 20:37:45,171 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 15, column: 1, offset: 427} for query: "// Create cinematographer for Blade Runner 2049\nCREATE (RogerD:Person:GeneratedByClaudeAI {\n    name: 'Roger Deakins',\n    born: 1949,\n    birthdate: date('1949-05-24'),\n    nationality: 'British',\n    oscarWins: 2,\n    oscarNominations: 15,\n    isActive: true,\n    firstFilm: datetime('1984-01-20T00:00:00Z'),\n    knighted: date('2021-02-12'),\n    cameraPreference: 'ARRI Alexa',\n    visualStyle: 'Naturalistic lighting with striking composition'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Roger Deakins'}),\n      (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (p)-[:CINEMATOGRAPHY_FOR {\n    year: 2017,\n    cameras: ['ARRI Alexa XT', 'ARRI Alexa Mini'],\n    lenses: ['Zeiss Master Primes', 'Cooke S4'],\n    awardNominations: 15,\n    awardWins: 12,\n    startDate: date('2016-07-12'),\n    completionDate: date('2016-11-25'),\n    signature_shots: ['Las Vegas ruins', 'Snow fight', 'Ocean wall'],\n    lighting_setups: 137\n}]->(b)"
2025-03-06 20:37:45,174 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 15, column: 1, offset: 417} for query: "// Create fan community node for Blade Runner\nCREATE (BladeRunnerFandom:FanCommunity:GeneratedByClaudeAI {\n    name: 'Blade Runner Fan Community',\n    established: date('1982-06-25'),\n    expansion2049: date('2017-10-06'),\n    memberCount: 356000,\n    onlinePlatforms: 5,\n    annualConventions: 3,\n    largestEventAttendance: 8500,\n    contentCreators: 15800,\n    fanfictionCount: 12500,\n    fanArtCount: 35600,\n    academicPapers: 248\n})\nWITH 1 as dummy\nMATCH (f:FanCommunity:GeneratedByClaudeAI {name: 'Blade Runner Fan Community'}),\n      (b:Movie:GeneratedByClaudeAI {title: 'Blade Runner 2049'})\nCREATE (f)-[:ENGAGED_WITH {\n    anticipationScore: 9.5,\n    reviewsSubmitted: 45800,\n    averageRating: 8.7,\n    onlineDiscussions: 12500,\n    theoriesGenerated: 3400,\n    preReleaseEvents: 28,\n    postReleaseEvents: 112,\n    merchandiseSales: 3800000,\n    reissuesCampaigns: 5\n}]->(b)"
2025-03-06 20:37:45,177 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 14, column: 1, offset: 420} for query: "// Create technical innovation node for Spider-Verse\nCREATE (SpiderVerseInnovation:TechnicalInnovation:GeneratedByClaudeAI {\n    name: 'Spider-Verse Animation Style',\n    developedDate: date('2016-09-25'),\n    patented: date('2019-03-15'),\n    teamSize: 38,\n    developmentCost: 15000000,\n    mainApplication: 'Animated Feature Films',\n    secondaryApplications: 3,\n    technicalPapersPublished: 8,\n    industryAwards: 12,\n    adoptionRate: 0.65\n})\nWITH 1 as dummy\nMATCH (t:TechnicalInnovation:GeneratedByClaudeAI {name: 'Spider-Verse Animation Style'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (t)-[:USED_IN {\n    implementationDate: date('2016-09-25'),\n    fullIntegrationDate: date('2018-05-15'),\n    developmentPhases: 4,\n    testingIterations: 15,\n    successMetric: 'Visual distinction and audience response',\n    successScore: 9.8,\n    industryInfluence: 'Major',\n    subsequentAdopters: 12\n}]->(s)"
2025-03-06 20:37:45,181 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 15, column: 1, offset: 402} for query: "// Create music composer for Spider-Verse\nCREATE (DanielP:Person:GeneratedByClaudeAI {\n    name: 'Daniel Pemberton',\n    born: 1977,\n    birthdate: date('1977-11-03'),\n    nationality: 'British',\n    awardWins: 5,\n    awardNominations: 15,\n    isActive: true,\n    firstFilm: datetime('2011-05-25T00:00:00Z'),\n    musicStyle: 'Eclectic with electronic elements',\n    instrumentsPlayed: 6,\n    studioLocation: 'London'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Daniel Pemberton'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'Spider-Man: Into the Spider-Verse'})\nCREATE (p)-[:COMPOSED_MUSIC_FOR {\n    year: 2018,\n    tracksComposed: 25,\n    recordingDays: 42,\n    instrumentsUsed: 28,\n    electronicallyProduced: true,\n    collaboratingArtists: 8,\n    startDate: date('2017-05-15'),\n    completionDate: date('2018-09-10'),\n    signature_themes: ['Miles\\' Theme', 'Spider-Heroes', 'Leap of Faith'],\n    recording_studios: 3\n}]->(s)"
2025-03-06 20:37:45,227 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes with various data types\nMATCH \n  (o:Person:GeneratedByClaudeAI {name: 'Orson Welles'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (o)-[:DIRECTED {\n    year: 1941,\n    daysOnSet: 101,\n    satisfaction: 4.8,\n    studioPressure: 'High',\n    completionDate: date('1940-10-23'),\n    premiereEvent: datetime('1941-05-01T19:30:00-05:00'),\n    durationMonths: 3,\n    isFirstFeatureFilm: true,\n    age: 25\n}]->(c)"
2025-03-06 20:37:45,231 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (b:Person:GeneratedByClaudeAI {name: 'Bong Joon-ho'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (b)-[:DIRECTED {\n    year: 2019,\n    daysOnSet: 74,\n    satisfaction: 4.9,\n    awardWins: 213,\n    completionDate: date('2018-11-25'),\n    premiereEvent: datetime('2019-05-21T19:00:00+02:00'),\n    durationMonths: 4,\n    isFirstInternationalBreakout: false,\n    personalThemes: ['Class inequality', 'Family dynamics', 'Dark humor']\n}]->(p)"
2025-03-06 20:37:45,235 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (m))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (l:Person:GeneratedByClaudeAI {name: 'Luc Jacquet'}),\n  (m:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'})\nCREATE (l)-[:DIRECTED {\n    year: 2005,\n    daysInAntarctica: 314,\n    fieldworkPhases: 3,\n    satisfaction: 4.7,\n    awardWins: 24,\n    completionDate: date('2004-11-15'),\n    premiereEvent: datetime('2005-01-26T20:00:00+01:00'),\n    durationMonths: 13,\n    isFirstMajorDocumentary: true,\n    scientificConsultants: 8\n}]->(m)"
2025-03-06 20:37:45,240 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships\nMATCH\n  (o:Person:GeneratedByClaudeAI {name: 'Orson Welles'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (o)-[:ACTED_IN {\n    roles: ['Charles Foster Kane'],\n    salary: 100000,\n    screenTimeMinutes: 95,\n    startDate: date('1940-07-22'),\n    endDate: date('1940-10-23'),\n    scheduleConflicts: false,\n    dualRoleComplexity: 'Very High',\n    makeupHoursDaily: 3.5,\n    ageTransformationYears: 44\n}]->(c)"
2025-03-06 20:37:45,245 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Person:GeneratedByClaudeAI {name: 'Song Kang-ho'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (s)-[:ACTED_IN {\n    roles: ['Kim Ki-taek'],\n    salary: 750000,\n    screenTimeMinutes: 85,\n    startDate: date('2018-05-18'),\n    endDate: date('2018-09-19'),\n    scheduleConflicts: false,\n    criticScore: 98,\n    audienceScore: 95,\n    awardNominations: 36,\n    awardWins: 22,\n    languagesSpoken: ['Korean']\n}]->(p)"
2025-03-06 20:37:45,252 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "// Cinematographer relationship\nMATCH\n  (g:Person:GeneratedByClaudeAI {name: 'Gregg Toland'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (g)-[:CINEMATOGRAPHY_FOR {\n    year: 1941,\n    cameras: ['Mitchell BNC', 'Mitchell NC'],\n    lenses: ['Bausch & Lomb Super Baltar', 'Cooke S1'],\n    innovationsTested: ['Ultra-deep focus', 'Low-angle shots', 'Ceiling shots'],\n    innovationsSuccessRate: [0.95, 0.98, 0.92],\n    startDate: date('1940-07-22'),\n    completionDate: date('1940-10-23'),\n    signatureTechniques: ['Deep focus', 'Dramatic lighting', 'Low-angle shots'],\n    technicalChallengesOvercome: 12\n}]->(c)"
2025-03-06 20:37:45,256 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 334} for query: "// Narrator relationship\nCREATE (MorganF:Person:GeneratedByClaudeAI {\n    name: 'Morgan Freeman',\n    born: 1937,\n    birthdate: date('1937-06-01'),\n    nationality: 'American',\n    oscarWins: 1,\n    oscarNominations: 5,\n    isActive: true,\n    voiceRecognition: 9.8,\n    voiceType: 'Authoritative baritone',\n    narratorRanking: 1\n})\nWITH 1 as dummy\nMATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Morgan Freeman'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'})\nCREATE (m)-[:NARRATED {\n    year: 2005,\n    language: 'English',\n    recordingDays: 5,\n    studioLocation: 'Los Angeles',\n    recordingSessionHours: 25,\n    scriptPages: 65,\n    audienceImpactRating: 9.5,\n    recordingCompletionDate: date('2004-12-05'),\n    rerecordingRequired: false\n}]->(p)"
2025-03-06 20:37:45,260 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "// Writer relationship\nMATCH\n  (o:Person:GeneratedByClaudeAI {name: 'Orson Welles'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (o)-[:WROTE {\n    year: 1940,\n    coWriter: 'Herman J. Mankiewicz',\n    draftCount: 7,\n    finalPageCount: 156,\n    writingStartDate: date('1939-07-01'),\n    writingCompletionDate: date('1940-05-15'),\n    inspirationSources: ['William Randolph Hearst', 'Joseph Pulitzer', 'Samuel Insull'],\n    controversyLevel: 'Very High',\n    scriptNominations: 2,\n    scriptWins: 1\n}]->(c)"
2025-03-06 20:37:45,263 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (b:Person:GeneratedByClaudeAI {name: 'Bong Joon-ho'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (b)-[:WROTE {\n    year: 2018,\n    coWriter: 'Han Jin-won',\n    draftCount: 5,\n    finalPageCount: 131,\n    writingStartDate: date('2017-01-15'),\n    writingCompletionDate: date('2018-02-20'),\n    inspirationSources: ['Class inequality', 'Social architecture', 'Personal experiences'],\n    thematicElements: ['Class struggle', 'Infiltration', 'Deception', 'Symbiosis'],\n    scriptNominations: 23,\n    scriptWins: 18\n}]->(p)"
2025-03-06 20:37:45,266 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "// Studio relationships\nMATCH\n  (r:Studio:GeneratedByClaudeAI {name: 'RKO Pictures'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (r)-[:PRODUCED {\n    investment: 839727,\n    return: 1585634,\n    roi: 1.89,\n    contractSigned: date('1939-07-22'),\n    studioRisk: 'Very High',\n    executiveSupport: 'Mixed',\n    marketingBudget: 150000,\n    isProfitable: true,\n    marketingStartDate: datetime('1941-01-15T00:00:00-05:00'),\n    controversyHandling: 'Aggressive defense',\n    heartNegativePressureLevel: 9.7\n}]->(c)"
2025-03-06 20:37:45,268 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Studio:GeneratedByClaudeAI {name: 'CJ Entertainment'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (c)-[:PRODUCED {\n    investment: 11400000,\n    return: 263100000,\n    roi: 23.08,\n    contractSigned: date('2017-09-15'),\n    studioShare: 0.6,\n    directorShare: 0.2,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 25000000,\n    isProfitable: true,\n    marketingStart: datetime('2019-02-15T00:00:00+09:00'),\n    internationalMarketingBoost: datetime('2019-05-25T00:00:00+02:00'),\n    breakEvenDate: date('2019-08-01')\n}]->(p)"
2025-03-06 20:37:45,270 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (d:Studio:GeneratedByClaudeAI {name: 'Disneynature'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'})\nCREATE (d)-[:DISTRIBUTED {\n    territories: ['North America'],\n    acquisitionDate: date('2005-01-30'),\n    acquisitionCost: 1000000,\n    marketingBudget: 15000000,\n    marketingStart: datetime('2005-04-15T00:00:00-04:00'),\n    isProfitable: true,\n    returnOnInvestment: 38.4,\n    educationalProgramCreated: true,\n    conservationDonation: 1000000,\n    familyMarketingFocus: 0.85\n}]->(p)"
2025-03-06 20:37:45,273 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (r:Studio:GeneratedByClaudeAI {name: 'RKO Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Citizen Kane Production'})\nCREATE (r)-[:FINANCED {\n    contractDate: date('1939-07-22'),\n    amount: 839727,\n    isFullyPaid: true,\n    transferTime1: datetime('1939-08-15T00:00:00-05:00'),\n    transferTime2: datetime('1939-11-30T00:00:00-05:00'),\n    transferTime3: datetime('1940-06-15T00:00:00-05:00'),\n    paymentDate1: date('1939-08-15'),\n    paymentAmount1: 250000,\n    paymentDate2: date('1939-11-30'),\n    paymentAmount2: 250000,\n    paymentDate3: date('1940-06-15'),\n    paymentAmount3: 339727,\n    executiveOversight: 'Minimal initially, Heavy later'\n}]->(p)"
2025-03-06 20:37:45,275 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Studio:GeneratedByClaudeAI {name: 'CJ Entertainment'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Parasite Production'})\nCREATE (c)-[:FINANCED {\n    contractDate: date('2017-09-15'),\n    amount: 11400000,\n    isFullyPaid: true,\n    transferTime1: datetime('2018-02-01T00:00:00+09:00'),\n    transferTime2: datetime('2018-05-01T00:00:00+09:00'),\n    transferTime3: datetime('2018-08-01T00:00:00+09:00'),\n    paymentDate1: date('2018-02-01'),\n    paymentAmount1: 3400000,\n    paymentDate2: date('2018-05-01'),\n    paymentAmount2: 4500000,\n    paymentDate3: date('2018-08-01'),\n    paymentAmount3: 3500000\n}]->(p)"
2025-03-06 20:37:45,277 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Citizen Kane Production'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 3,\n    durationDays: 1,\n    setCount: 16,\n    soundstageCount: 8,\n    locationCount: 3,\n    dailyAverageCost: 8312,\n    scheduleAdherence: 0.88,\n    originalScheduledEnd: date('1940-10-15'),\n    technicalChallengesOvercome: 14,\n    innovationSuccessRate: 0.92\n}]->(c)"
2025-03-06 20:37:45,280 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (m))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Parasite Production'}),\n  (m:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 4,\n    durationDays: 1,\n    setCount: 12,\n    customSetsBudget: 3500000,\n    locationCount: 8,\n    dailyAverageCost: 125000,\n    scheduleAdherence: 0.95,\n    originalScheduledEnd: date('2018-09-15'),\n    perfectShotTakes: 247,\n    totalTakes: 1845\n}]->(m)"
2025-03-06 20:37:45,282 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (m))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'March of the Penguins Filming'}),\n  (m:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 13,\n    durationDays: 5,\n    totalFootage: 869,\n    footageUnit: 'Hours',\n    extremeConditionDays: 280,\n    dailyAverageCost: 20000,\n    equipmentMalfunctions: 42,\n    scheduleExtensions: 3,\n    originalScheduledEnd: date('2003-11-30'),\n    scientificValueRating: 9.2\n}]->(m)"
2025-03-06 20:37:45,285 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationships\nMATCH\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (c)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 1942,\n    ceremony: 14,\n    isWinner: false,\n    ceremonyDate: date('1942-02-26'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 325,\n    votesAgainst: 352,\n    historicalReassessment: 'Should have won',\n    controversyLevel: 'Very High'\n}]->(a)"
2025-03-06 20:37:45,290 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (o:Person:GeneratedByClaudeAI {name: 'Orson Welles'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (o)-[:NOMINATED_FOR {\n    category: 'Best Original Screenplay',\n    year: 1942,\n    ceremony: 14,\n    isWinner: true,\n    ceremonyDate: date('1942-02-26'),\n    announcementTime: localtime('20:15:00'),\n    coRecipient: 'Herman J. Mankiewicz',\n    attendance: false,\n    reasonForAbsence: 'Political tensions',\n    historicalSignificance: 'Only Oscar win for Welles'\n}]->(a)"
2025-03-06 20:37:45,293 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Movie:GeneratedByClaudeAI {title: 'Parasite'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (p)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2020,\n    ceremony: 92,\n    isWinner: true,\n    ceremonyDate: date('2020-02-09'),\n    announcementTime: localtime('21:55:00'),\n    votesFor: 5823,\n    votesAgainst: 3215,\n    historicalSignificance: 'First non-English language Best Picture',\n    audienceReaction: 'Standing ovation',\n    ovationLength: duration({minutes: 3, seconds: 12})\n}]->(a)"
2025-03-06 20:37:45,299 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (b:Person:GeneratedByClaudeAI {name: 'Bong Joon-ho'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (b)-[:NOMINATED_FOR {\n    category: 'Best Director',\n    year: 2020,\n    ceremony: 92,\n    isWinner: true,\n    ceremonyDate: date('2020-02-09'),\n    announcementTime: localtime('21:35:00'),\n    votesFor: 6123,\n    votesAgainst: 2915,\n    speechDuration: duration({minutes: 2, seconds: 43}),\n    translatorUsed: true,\n    memorableQuote: 'I will drink until next morning'\n}]->(a)"
2025-03-06 20:37:45,302 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (m)-[:NOMINATED_FOR {\n    category: 'Best Documentary Feature',\n    year: 2006,\n    ceremony: 78,\n    isWinner: true,\n    ceremonyDate: date('2006-03-05'),\n    announcementTime: localtime('20:25:00'),\n    votesFor: 3521,\n    votesAgainst: 1485,\n    significanceRating: 'Major for nature documentaries',\n    audienceShareDuringAnnouncement: 0.32\n}]->(a)"
2025-03-06 20:37:45,305 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (v))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Movie:GeneratedByClaudeAI {title: 'Parasite'}),\n  (v:Ceremony:GeneratedByClaudeAI {name: 'Venice Film Festival'})\nCREATE (p)-[:NOMINATED_FOR {\n    category: 'Golden Lion',\n    year: 2019,\n    ceremony: 76,\n    isWinner: false,\n    ceremonyDate: date('2019-09-07'),\n    announcementTime: localtime('20:30:00'),\n    screeningDate: date('2019-09-03'),\n    screeningTime: localtime('19:00:00'),\n    screeningVenue: 'Sala Grande',\n    audienceReaction: 'Standing ovation',\n    reactionDuration: duration({minutes: 8, seconds: 45})\n}]->(v)"
2025-03-06 20:37:45,307 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (f))} {position: line: 1, column: 9, offset: 8} for query: "// Preservation relationship\nMATCH\n  (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'}),\n  (f:Organization:GeneratedByClaudeAI {name: 'National Film Preservation Board'})\nCREATE (c)-[:PRESERVED_BY {\n    year: 1989,\n    preservationRound: 1,\n    selectionCriteria: ['Cultural significance', 'Technical innovation', 'Artistic merit'],\n    criteriaScore: [10, 10, 10],\n    preservationDate: date('1989-12-14'),\n    restoration: true,\n    restorationDate: date('1998-11-25'),\n    restorationCost: 850000,\n    digitalFormat: '4K',\n    preservationMedium: ['Film negative', 'Digital master']\n}]->(f)"
2025-03-06 20:37:45,310 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 15, column: 1, offset: 415} for query: "// Create additional node types and relationships\n\n// Create educational institution using film for teaching\nCREATE (FilmStudiesInstitute:Institution:GeneratedByClaudeAI {\n    name: 'National Film Studies Institute',\n    founded: date('1967-09-15'),\n    headquartersLat: 34.0922,\n    headquartersLong: -118.3731,\n    studentCount: 1250,\n    facultyCount: 85,\n    courseCount: 145,\n    filmArchiveSize: 25000,\n    digitalArchiveSize: 15000,\n    digitalArchiveUnit: 'TB',\n    annualBudget: 45000000\n})\nWITH 1 as dummy\nMATCH (i:Institution:GeneratedByClaudeAI {name: 'National Film Studies Institute'}),\n      (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (i)-[:TEACHES_WITH {\n    yearAdded: 1968,\n    coursesUsedIn: 28,\n    primaryFocus: ['Cinematography technique', 'Narrative structure', 'Film history'],\n    studentPapersCount: 12450,\n    mostCommonAnalysisTopics: ['Deep focus', 'Rosebud symbolism', 'Narrative framework'],\n    teachingHoursAnnually: 620,\n    requiredForDegrees: ['BA Film Studies', 'MFA Directing', 'MFA Cinematography'],\n    teachingValue: 9.8\n}]->(c)"
2025-03-06 20:37:45,313 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 16, column: 1, offset: 584} for query: "// Add camera technology for Citizen Kane\nCREATE (MitchellBNCCamera:Equipment:GeneratedByClaudeAI {\n    name: 'Mitchell BNC Camera',\n    manufactured: date('1934-05-10'),\n    manufacturerLat: 34.0922,\n    manufacturerLong: -118.3731,\n    weight: 52,\n    weightUnit: 'kg',\n    cost: 15000,\n    purchaseYear: 1939,\n    revolutionaryFeatures: ['Silent operation', 'Rack-over viewing', 'High-precision movement'],\n    featureImpact: [9.2, 8.9, 9.5],\n    technicalSpecifications: 'Silent operation with rack-over viewing system',\n    historicalSignificance: 'Industry standard for Hollywood productions'\n})\nWITH 1 as dummy\nMATCH (e:Equipment:GeneratedByClaudeAI {name: 'Mitchell BNC Camera'}),\n      (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (e)-[:USED_IN {\n    operator: 'Gregg Toland',\n    setupTime: duration({minutes: 45}),\n    unitCount: 2,\n    technicalInnovations: ['Low-angle mounting', 'Floor embedding'],\n    innovationSuccess: [10, 9.5],\n    maintenanceEvents: 8,\n    operationalDays: 98,\n    signatureShots: ['Low angle with ceiling', 'Deep focus wide shots', 'Tracking sequences'],\n    techniqueInfluence: 9.8\n}]->(c)"
2025-03-06 20:37:45,315 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 442} for query: "// Create special costume for Parasite\nCREATE (ParasiteCostumes:Costume:GeneratedByClaudeAI {\n    name: 'Parasite Family Wardrobes',\n    designed: date('2018-03-15'),\n    designer: 'Choi Se-yeon',\n    costumePieces: 245,\n    materialTypes: 15,\n    colorPalette: ['Gray', 'Black', 'Muted green', 'Rich blue'],\n    paletteMeaning: ['Poverty', 'Deception', 'Hope', 'Wealth'],\n    constructionHours: 1850,\n    costumeBudget: 120000,\n    symbolismRating: 9.5\n})\nWITH 1 as dummy\nMATCH (c:Costume:GeneratedByClaudeAI {name: 'Parasite Family Wardrobes'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (c)-[:FEATURED_IN {\n    characterCount: 9,\n    costumesPerCharacter: [12, 14, 16, 18, 8, 6, 5, 4, 3],\n    characterClassIndication: ['Lower', 'Lower', 'Lower', 'Lower', 'Upper', 'Upper', 'Upper', 'Upper', 'Hidden'],\n    symbolicElements: ['Stain-resistant fabric', 'Aspirational brands', 'Weathered textures', 'Color progression'],\n    elementPurpose: ['Status marker', 'Desire indicator', 'History visual', 'Narrative arc'],\n    designAwards: 3\n}]->(p)"
2025-03-06 20:37:45,318 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 17, column: 1, offset: 488} for query: "// Create extreme weather challenge for Penguins\nCREATE (AntarcticConditions:EnvironmentalFactor:GeneratedByClaudeAI {\n    name: 'Antarctic Winter Conditions',\n    location: 'Dumont d\\'Urville Station area',\n    latitude: -66.6628,\n    longitude: 140.0014,\n    averageTemperature: -60,\n    temperatureUnit: 'Celsius',\n    windSpeedAverage: 80,\n    windSpeedUnit: 'km/h',\n    windSpeedMax: 200,\n    daylight: 'Limited to none',\n    precipitationAnnual: 250,\n    precipitationUnit: 'mm',\n    extremityIndex: 9.8\n})\nWITH 1 as dummy\nMATCH (e:EnvironmentalFactor:GeneratedByClaudeAI {name: 'Antarctic Winter Conditions'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'})\nCREATE (e)-[:IMPACTED {\n    daysExperienced: 280,\n    equipmentFailureRate: 0.35,\n    humanEnduranceLimit: duration({hours: 4}),\n    rotationalSchedule: 'Two weeks on, one week shelter',\n    equipmentAdaptations: ['Thermal insulation', 'Battery protection', 'Anti-fog systems'],\n    adaptationSuccessRates: [0.82, 0.76, 0.65],\n    footageLostToCold: '32 hours',\n    crewmedicalIncidents: 8,\n    documentaryValueAdded: 9.7\n}]->(p)"
2025-03-06 20:37:45,320 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 13, column: 1, offset: 424} for query: "// Create cultural impact relationship\nCREATE (FilmHistory:AcademicField:GeneratedByClaudeAI {\n    name: 'Film History Studies',\n    established: date('1915-03-10'),\n    institutionsCount: 2850,\n    scholarCount: 15400,\n    peerReviewedJournals: 124,\n    annualPublications: 3250,\n    mostCitedTheories: ['Auteur theory', 'Montage theory', 'Apparatus theory'],\n    theoriesDevelopmentYears: [1954, 1925, 1970],\n    digitalArchives: 278\n})\nWITH 1 as dummy\nMATCH (f:AcademicField:GeneratedByClaudeAI {name: 'Film History Studies'}),\n      (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (f)-[:INFLUENCED_BY {\n    yearFirstStudied: 1942,\n    academicPapersCount: 2850,\n    textbookReferences: 98,\n    percentageCoursesTeaching: 95,\n    criticalTheoriesGenerated: ['Deep focus semiotics', 'Narrative fragmentation', 'Cinematic authorship'],\n    theoryInfluence: [9.4, 9.6, 9.8],\n    canonicalPosition: 1,\n    canonicalSurveys: 12,\n    surveyYears: [1952, 1962, 1972, 1982, 1992, 2002, 2012, 2022]\n}]->(c)"
2025-03-06 20:37:45,323 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 413} for query: "// Create cultural movement relationship for Parasite\nCREATE (NewKoreanCinema:CulturalMovement:GeneratedByClaudeAI {\n    name: 'New Korean Cinema',\n    established: date('1998-05-15'),\n    influentialDirectors: 12,\n    internationalFestivals: 35,\n    majorAwards: 58,\n    criticalReception: 'Revolutionary',\n    geographicalSpread: 'Global',\n    periodStart: date('1998-05-15'),\n    periodPeak: date('2019-05-21'),\n    academicStudies: 145\n})\nWITH 1 as dummy\nMATCH (c:CulturalMovement:GeneratedByClaudeAI {name: 'New Korean Cinema'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (c)-[:CULMINATED_WITH {\n    significanceRating: 9.9,\n    globalImpact: 'Transformative',\n    boxOfficeMultiplierEffect: 3.2,\n    koreanFilmExportsIncrease: 0.45,\n    subsequentDistributionDeals: 28,\n    academicAnalyses: 85,\n    filmSchoolAdoption: 'Immediate and widespread',\n    newFilmmakersInspired: 'Thousands globally',\n    culturalBarrierReduction: 'Significant',\n    subtitleAcceptanceIncrease: 0.65\n}]->(p)"
2025-03-06 20:37:45,325 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 16, column: 1, offset: 416} for query: "// Create special effects company\nCREATE (WetaDigital:TechCompany:GeneratedByClaudeAI {\n    name: 'Weta Digital',\n    founded: date('1993-05-22'),\n    headquartersLat: -41.3053,\n    headquartersLong: 174.8239,\n    employeeCount: 1550,\n    annualRevenue: 245000000,\n    technologyPatents: 58,\n    oscarsWon: 6,\n    technicalAwards: 127,\n    proprietarySoftware: 12,\n    computingPower: 72000,\n    computingUnit: 'CPU cores'\n})\nWITH 1 as dummy\nMATCH (t:TechCompany:GeneratedByClaudeAI {name: 'Weta Digital'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'})\nCREATE (t)-[:PROVIDED_SERVICES_FOR {\n    year: 2004,\n    serviceType: ['Digital restoration', 'Color correction', 'Digital stabilization'],\n    teamSize: 12,\n    workDuration: duration({months: 3}),\n    contractValue: 850000,\n    proprietaryTechniquesUsed: 3,\n    footageProcessed: 85,\n    footageUnit: 'Hours',\n    transformationQuality: 9.5,\n    temperatureExtremesVisualized: true,\n    visualizationAccuracy: 'Scientific-grade'\n}]->(p)"
2025-03-06 20:37:45,328 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 16, column: 1, offset: 474} for query: "// Create theme park attraction\nCREATE (CitizenKaneExhibit:Attraction:GeneratedByClaudeAI {\n    name: 'The Art of Citizen Kane: Interactive Exhibit',\n    opened: date('2008-05-15'),\n    locationLat: 34.1381,\n    locationLong: -118.3534,\n    visitorCapacity: 500,\n    visitorDuration: duration({minutes: 45}),\n    annualVisitors: 250000,\n    exhibitSize: 15000,\n    sizeUnit: 'Square feet',\n    developmentCost: 12000000,\n    interactiveElements: 28,\n    historicalArtifacts: 125\n})\nWITH 1 as dummy\nMATCH (a:Attraction:GeneratedByClaudeAI {name: 'The Art of Citizen Kane: Interactive Exhibit'}),\n      (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (a)-[:BASED_ON {\n    filmElementsFeatured: ['Cinematography', 'Set design', 'Narrative structure', 'Sound design'],\n    educationalFocus: 0.8,\n    entertainmentFocus: 0.2,\n    audienceRating: 9.2,\n    filmHistoryContextualization: 'Comprehensive',\n    originalPropsCurated: 15,\n    reproductionProps: 85,\n    filmingTechniqueDemonstrations: 12,\n    rosebudSymbolismExhibits: 5,\n    culturalImpactMetrics: ['Industry influence', 'Artistic recognition', 'Technical innovation']\n}]->(c)"
2025-03-06 20:37:45,331 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 16, column: 1, offset: 495} for query: "// Create merchandising relationship\nCREATE (PenguinPlush:Merchandise:GeneratedByClaudeAI {\n    name: 'Emperor Penguin Family Plush Collection',\n    released: date('2005-06-15'),\n    manufacturer: 'National Geographic Products',\n    manufacturerLocationLat: 38.9053,\n    manufacturerLocationLong: -77.0332,\n    retailPrice: 29.99,\n    priceCurrency: 'USD',\n    productionRun: 500000,\n    conservationContribution: 3.00,\n    contributionPercentage: 0.10,\n    educationalMaterials: true,\n    ageRange: '3+'\n})\nWITH 1 as dummy\nMATCH (m:Merchandise:GeneratedByClaudeAI {name: 'Emperor Penguin Family Plush Collection'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'March of the Penguins'})\nCREATE (m)-[:DERIVED_FROM {\n    licensingDeal: date('2005-03-12'),\n    unitsSold: 435000,\n    geographicalDistribution: ['North America', 'Europe', 'Asia', 'Australia'],\n    salesDistribution: [0.65, 0.20, 0.10, 0.05],\n    retailersCarrying: 7850,\n    conservationFundsRaised: 1305000,\n    educationalImpact: 'Significant - classroom adoption',\n    brandRecognition: 0.85,\n    merchandisingLongevity: 'Still in production - limited quantities',\n    sequelMerchandisingEffect: 'Reissued for Penguin 2'\n}]->(p)"
2025-03-06 20:37:45,334 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 495} for query: "// Create educational program\nCREATE (ParasiteStudyProgram:EducationalProgram:GeneratedByClaudeAI {\n    name: 'Parasite: Film & Society Curriculum',\n    developed: date('2020-04-15'),\n    institutionsAdopting: 1230,\n    targetEducationLevels: ['University', 'High School Advanced'],\n    materialFormats: ['Digital', 'Print', 'Video supplements'],\n    languagesAvailable: 12,\n    courseDuration: duration({weeks: 6}),\n    totalLessonHours: 45,\n    scholarlyEndorsements: 35,\n    educatorRating: 9.4\n})\nWITH 1 as dummy\nMATCH (e:EducationalProgram:GeneratedByClaudeAI {name: 'Parasite: Film & Society Curriculum'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'Parasite'})\nCREATE (e)-[:ANALYZES {\n    focusAreas: ['Class structure', 'Visual symbolism', 'Narrative techniques', 'Cultural context', 'Globalization'],\n    focusDistribution: [0.25, 0.20, 0.20, 0.15, 0.20],\n    analyticalApproaches: ['Sociological', 'Cinematic', 'Economic', 'Cultural'],\n    studentFeedbackScore: 9.2,\n    criticalThinkingDevelopment: 'Very High',\n    culturalComprehensionExpansion: 'Significant',\n    crossCulturalDialoguePromotion: 'Extensive',\n    filmmakingTechniquesExamined: 45,\n    globalAdoption: 'Growing rapidly',\n    academicPaperGeneration: 185\n}]->(p)"
2025-03-06 20:37:45,338 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 16, column: 1, offset: 439} for query: "// Create 4K restoration project\nCREATE (CitizenKaneRestoration:DigitalProject:GeneratedByClaudeAI {\n    name: 'Citizen Kane 4K Restoration',\n    started: date('2010-02-15'),\n    completed: date('2011-09-22'),\n    teamSize: 22,\n    originalNegativeUsed: true,\n    resolutionOutput: '4096x3112',\n    colorDepth: '16-bit',\n    storageSizeRaw: 175,\n    storageSizeUnit: 'TB',\n    finalMasterSize: 12,\n    finalMasterUnit: 'TB',\n    budget: 1250000\n})\nWITH 1 as dummy\nMATCH (d:DigitalProject:GeneratedByClaudeAI {name: 'Citizen Kane 4K Restoration'}),\n      (c:Movie:GeneratedByClaudeAI {title: 'Citizen Kane'})\nCREATE (d)-[:PRESERVED {\n    frameCorrectionCount: 486500,\n    frameTotalCount: 172584,\n    originalDamagePercentage: 0.12,\n    restorationFidelity: 0.985,\n    audioChannelsPreserved: 2,\n    audioSamplingRate: 96,\n    audioSamplingUnit: 'kHz',\n    primaryRestorationChallenges: ['Nitrate decomposition', 'Scratches', 'Stabilization', 'Contrast preservation'],\n    challengeComplexity: [9.2, 8.5, 7.8, 9.5],\n    technologiesUsed: ['AI frame interpolation', 'Manual restoration', 'Wetgate scanning', 'HDR grading'],\n    historicalConsultants: 5,\n    academicValidation: 'Peer-reviewed & certified authentic',\n    preservationStandard: 'Library of Congress Archival'\n}]->(c)"
2025-03-06 20:37:45,370 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (du))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes\nMATCH \n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'}),\n  (du:Movie:GeneratedByClaudeAI {title: 'Dune'})\nCREATE (d)-[:DIRECTED {\n    year: 2021,\n    daysOnSet: 130,\n    satisfaction: 4.9,\n    awardNominations: 10,\n    completionDate: date('2020-07-15'),\n    premiereEvent: datetime('2021-09-03T19:30:00+02:00'),\n    durationMonths: 4,\n    isFirstCollaboration: false\n}]->(du)"
2025-03-06 20:37:45,374 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (e))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (dk:Person:GeneratedByClaudeAI {name: 'Daniel Kwan'}),\n  (e:Movie:GeneratedByClaudeAI {title: 'Everything Everywhere All at Once'})\nCREATE (dk)-[:DIRECTED {\n    year: 2022,\n    daysOnSet: 70,\n    coDirector: 'Daniel Scheinert',\n    satisfaction: 4.9,\n    awardNominations: 11,\n    awardWins: 7,\n    completionDate: date('2020-07-30'),\n    premiereEvent: datetime('2022-03-11T18:30:00-06:00'),\n    durationMonths: 2,\n    isFirstCollaboration: false\n}]->(e)"
2025-03-06 20:37:45,380 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'})\nCREATE (c)-[:DIRECTED {\n    year: 2023,\n    daysOnSet: 114,\n    satisfaction: 4.9,\n    awardNominations: 13,\n    awardWins: 7,\n    completionDate: date('2023-03-15'),\n    premiereEvent: datetime('2023-07-13T19:00:00+01:00'),\n    durationMonths: 3,\n    isFirstCollaboration: false\n}]->(o)"
2025-03-06 20:37:45,383 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships\nMATCH\n  (t:Person:GeneratedByClaudeAI {name: 'Timothée Chalamet'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'Dune'})\nCREATE (t)-[:ACTED_IN {\n    roles: ['Paul Atreides'],\n    salary: 2000000,\n    screenTimeMinutes: 125,\n    startDate: date('2019-03-18'),\n    endDate: date('2019-07-26'),\n    scheduleConflicts: false,\n    criticScore: 95,\n    audienceScore: 92,\n    awardNominations: 5\n}]->(d)"
2025-03-06 20:37:45,391 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (e))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Michelle Yeoh'}),\n  (e:Movie:GeneratedByClaudeAI {title: 'Everything Everywhere All at Once'})\nCREATE (m)-[:ACTED_IN {\n    roles: ['Evelyn Wang'],\n    salary: 1000000,\n    screenTimeMinutes: 120,\n    startDate: date('2020-01-15'),\n    endDate: date('2020-03-25'),\n    scheduleConflicts: false,\n    criticScore: 97,\n    audienceScore: 95,\n    awardNominations: 8,\n    awardWins: 6\n}]->(e)"
2025-03-06 20:37:45,414 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Cillian Murphy'}),\n  (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'})\nCREATE (c)-[:ACTED_IN {\n    roles: ['J. Robert Oppenheimer'],\n    salary: 5000000,\n    screenTimeMinutes: 160,\n    startDate: date('2022-02-22'),\n    endDate: date('2022-05-18'),\n    scheduleConflicts: false,\n    criticScore: 98,\n    audienceScore: 95,\n    awardNominations: 7,\n    awardWins: 5\n}]->(o)"
2025-03-06 20:37:45,421 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "// Studio relationships\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'Dune'})\nCREATE (w)-[:PRODUCED {\n    investment: 165000000,\n    return: 401800000,\n    roi: 2.43,\n    contractSigned: date('2018-07-15'),\n    studioShare: 0.65,\n    directorShare: 0.15,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 140000000,\n    isProfitable: true,\n    marketingStart: datetime('2021-02-15T00:00:00Z')\n}]->(d)"
2025-03-06 20:37:45,424 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (e))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Studio:GeneratedByClaudeAI {name: 'A24 Studios'}),\n  (e:Movie:GeneratedByClaudeAI {title: 'Everything Everywhere All at Once'})\nCREATE (a)-[:PRODUCED {\n    investment: 25000000,\n    return: 140200000,\n    roi: 5.61,\n    contractSigned: date('2019-03-22'),\n    studioShare: 0.6,\n    directorShare: 0.2,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 15000000,\n    isProfitable: true,\n    marketingStart: datetime('2022-01-15T00:00:00Z')\n}]->(e)"
2025-03-06 20:37:45,428 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (u:Studio:GeneratedByClaudeAI {name: 'Universal Pictures'}),\n  (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'})\nCREATE (u)-[:PRODUCED {\n    investment: 100000000,\n    return: 976156348,\n    roi: 9.76,\n    contractSigned: date('2021-05-10'),\n    studioShare: 0.6,\n    directorShare: 0.2,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 150000000,\n    isProfitable: true,\n    marketingStart: datetime('2023-01-15T00:00:00Z')\n}]->(o)"
2025-03-06 20:37:45,431 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Dune Principal Photography'})\nCREATE (w)-[:FINANCED {\n    contractDate: date('2018-07-15'),\n    amount: 165000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2018-12-15T00:00:00Z'),\n    transferTime2: datetime('2019-02-28T00:00:00Z'),\n    transferTime3: datetime('2019-05-15T00:00:00Z'),\n    paymentDate1: date('2018-12-15'),\n    paymentAmount1: 50000000,\n    paymentDate2: date('2019-02-28'),\n    paymentAmount2: 65000000,\n    paymentDate3: date('2019-05-15'),\n    paymentAmount3: 50000000\n}]->(p)"
2025-03-06 20:37:45,434 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Studio:GeneratedByClaudeAI {name: 'A24 Studios'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Everything Everywhere All at Once Production'})\nCREATE (a)-[:FINANCED {\n    contractDate: date('2019-03-22'),\n    amount: 25000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2019-09-15T00:00:00Z'),\n    transferTime2: datetime('2019-12-15T00:00:00Z'),\n    paymentDate1: date('2019-09-15'),\n    paymentAmount1: 15000000,\n    paymentDate2: date('2019-12-15'),\n    paymentAmount2: 10000000\n}]->(p)"
2025-03-06 20:37:45,436 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (u:Studio:GeneratedByClaudeAI {name: 'Universal Pictures'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Oppenheimer Principal Photography'})\nCREATE (u)-[:FINANCED {\n    contractDate: date('2021-05-10'),\n    amount: 100000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2021-09-15T00:00:00Z'),\n    transferTime2: datetime('2021-12-20T00:00:00Z'),\n    transferTime3: datetime('2022-02-10T00:00:00Z'),\n    paymentDate1: date('2021-09-15'),\n    paymentAmount1: 30000000,\n    paymentDate2: date('2021-12-20'),\n    paymentAmount2: 40000000,\n    paymentDate3: date('2022-02-10'),\n    paymentAmount3: 30000000\n}]->(p)"
2025-03-06 20:37:45,439 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Dune Principal Photography'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'Dune'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 4,\n    durationDays: 8,\n    locationCount: 8,\n    dailyAverageCost: 560000,\n    scheduleAdherence: 0.95,\n    weatherDelaysDays: 5,\n    originalScheduledEnd: date('2019-07-20')\n}]->(d)"
2025-03-06 20:37:45,442 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (e))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Everything Everywhere All at Once Production'}),\n  (e:Movie:GeneratedByClaudeAI {title: 'Everything Everywhere All at Once'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 2,\n    durationDays: 10,\n    locationCount: 12,\n    dailyAverageCost: 150000,\n    scheduleAdherence: 0.97,\n    weatherDelaysDays: 2,\n    originalScheduledEnd: date('2020-03-20')\n}]->(e)"
2025-03-06 20:37:45,444 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Oppenheimer Principal Photography'}),\n  (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 3,\n    durationDays: 24,\n    locationCount: 9,\n    dailyAverageCost: 350000,\n    scheduleAdherence: 0.98,\n    weatherDelaysDays: 3,\n    originalScheduledEnd: date('2022-05-15')\n}]->(o)"
2025-03-06 20:37:45,449 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Review relationships\nMATCH\n  (j:Person {name: 'Jessica Thompson'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'A Masterful Sci-Fi Epic'})\nCREATE (j)-[:WROTE {\n    date: date('2021-10-25'),\n    timeSpentMinutes: 65,\n    wordCount: 728,\n    isVerified: true,\n    submissionTime: time('15:30:42+01:00')\n}]->(r)"
2025-03-06 20:37:45,452 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person {name: 'Angela Scope'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'A Mind-Bending Multiverse Masterpiece'})\nCREATE (a)-[:WROTE {\n    date: date('2022-04-10'),\n    timeSpentMinutes: 70,\n    wordCount: 785,\n    isVerified: true,\n    submissionTime: time('19:22:15-04:00')\n}]->(r)"
2025-03-06 20:37:45,455 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Person {name: 'Paul Blythe'}), // Original person from the graph\n  (r:Review:GeneratedByClaudeAI {title: 'Historical Filmmaking at its Finest'})\nCREATE (p)-[:WROTE {\n    date: date('2023-07-25'),\n    timeSpentMinutes: 75,\n    wordCount: 812,\n    isVerified: true,\n    submissionTime: time('14:45:30-04:00')\n}]->(r)"
2025-03-06 20:37:45,458 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'A Masterful Sci-Fi Epic'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'Dune'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 184532,\n    shares: 8642,\n    comments: 3156,\n    featuredDurationDays: 21,\n    publicationDateTime: datetime('2021-10-25T16:30:00+01:00')\n}]->(d)"
2025-03-06 20:37:45,460 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (e))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'A Mind-Bending Multiverse Masterpiece'}),\n  (e:Movie:GeneratedByClaudeAI {title: 'Everything Everywhere All at Once'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 215689,\n    shares: 12548,\n    comments: 4852,\n    featuredDurationDays: 28,\n    publicationDateTime: datetime('2022-04-10T20:15:00-04:00')\n}]->(e)"
2025-03-06 20:37:45,463 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (r:Review:GeneratedByClaudeAI {title: 'Historical Filmmaking at its Finest'}),\n  (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'})\nCREATE (r)-[:FOR_MOVIE {\n    isPublished: true,\n    views: 245832,\n    shares: 15462,\n    comments: 5238,\n    featuredDurationDays: 30,\n    publicationDateTime: datetime('2023-07-25T16:00:00-04:00')\n}]->(o)"
2025-03-06 20:37:45,466 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationships\nMATCH\n  (d:Movie:GeneratedByClaudeAI {title: 'Dune'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (d)-[:NOMINATED_FOR {\n    category: 'Best Cinematography',\n    year: 2022,\n    ceremony: 94,\n    isWinner: true,\n    ceremonyDate: date('2022-03-27'),\n    announcementTime: localtime('20:15:00'),\n    votesFor: 5821,\n    votesAgainst: 2154\n}]->(a)"
2025-03-06 20:37:45,469 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (e:Movie:GeneratedByClaudeAI {title: 'Everything Everywhere All at Once'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (e)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2023,\n    ceremony: 95,\n    isWinner: true,\n    ceremonyDate: date('2023-03-12'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 6534,\n    votesAgainst: 2154\n}]->(a)"
2025-03-06 20:37:45,474 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Michelle Yeoh'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (m)-[:NOMINATED_FOR {\n    category: 'Best Actress',\n    year: 2023,\n    ceremony: 95,\n    isWinner: true,\n    ceremonyDate: date('2023-03-12'),\n    announcementTime: localtime('21:15:00'),\n    votesFor: 6254,\n    votesAgainst: 2435,\n    speechDuration: duration({minutes: 3, seconds: 12})\n}]->(a)"
2025-03-06 20:37:45,477 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (o)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2024,\n    ceremony: 96,\n    isWinner: true,\n    ceremonyDate: date('2024-03-10'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 6832,\n    votesAgainst: 1985\n}]->(a)"
2025-03-06 20:37:45,482 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Cillian Murphy'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (c)-[:NOMINATED_FOR {\n    category: 'Best Actor',\n    year: 2024,\n    ceremony: 96,\n    isWinner: true,\n    ceremonyDate: date('2024-03-10'),\n    announcementTime: localtime('21:15:00'),\n    votesFor: 6754,\n    votesAgainst: 2105,\n    speechDuration: duration({minutes: 2, seconds: 45})\n}]->(a)"
2025-03-06 20:37:45,485 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "// Professional relationships between people\nMATCH\n  (t:Person:GeneratedByClaudeAI {name: 'Timothée Chalamet'}),\n  (d:Person:GeneratedByClaudeAI {name: 'Denis Villeneuve'})\nCREATE (t)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'Dune',\n    firstYear: 2021,\n    chemistry: 4.8,\n    interviews: 25,\n    relationship: 'Actor-Director',\n    nextProjectPlanned: date('2024-11-15')\n}]->(d)"
2025-03-06 20:37:45,489 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (dk))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Michelle Yeoh'}),\n  (dk:Person:GeneratedByClaudeAI {name: 'Daniel Kwan'})\nCREATE (m)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'Everything Everywhere All at Once',\n    firstYear: 2022,\n    chemistry: 4.9,\n    interviews: 32,\n    relationship: 'Actor-Director',\n    awards: ['Academy Award', 'Golden Globe', 'SAG Award']\n}]->(dk)"
2025-03-06 20:37:45,493 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (cn))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Cillian Murphy'}),\n  (cn:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'})\nCREATE (c)-[:WORKED_WITH {\n    projects: 6,\n    firstProject: 'Batman Begins',\n    firstYear: 2005,\n    chemistry: 4.9,\n    interviews: 45,\n    relationship: 'Actor-Director',\n    awards: ['Academy Award']\n}]->(cn)"
2025-03-06 20:37:45,496 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 15, column: 1, offset: 464} for query: "// Create soundtracks\nCREATE (DuneSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'Dune (Original Motion Picture Soundtrack)',\n    composer: 'Hans Zimmer',\n    released: date('2021-09-17'),\n    duration: duration({minutes: 97, seconds: 38}),\n    trackCount: 22,\n    recordingStudio: 'Remote (COVID-19)',\n    recordingStudioLat: 51.5074,\n    recordingStudioLong: -0.1278,\n    peakChartPosition: 24,\n    salesUnits: 120000,\n    streamingCount: 180000000\n})\nWITH 1 as dummy\nMATCH (d:Movie:GeneratedByClaudeAI {title: 'Dune'}),\n      (s:Soundtrack:GeneratedByClaudeAI {title: 'Dune (Original Motion Picture Soundtrack)'})\nCREATE (s)-[:COMPOSED_FOR {\n    contractDate: date('2019-12-15'),\n    completion: date('2021-06-20'),\n    nominatedAwards: ['Academy Award', 'BAFTA', 'Golden Globe'],\n    wonAwards: ['Academy Award', 'Golden Globe'],\n    spotifyStreams: 250000000,\n    youtubeViews: 65000000\n}]->(d)"
2025-03-06 20:37:45,499 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 15, column: 1, offset: 484} for query: "CREATE (OppenheimerSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'Oppenheimer (Original Motion Picture Soundtrack)',\n    composer: 'Ludwig Göransson',\n    released: date('2023-07-21'),\n    duration: duration({minutes: 72, seconds: 15}),\n    trackCount: 19,\n    recordingStudio: 'AIR Studios, London',\n    recordingStudioLat: 51.5454,\n    recordingStudioLong: -0.1755,\n    peakChartPosition: 18,\n    salesUnits: 85000,\n    streamingCount: 145000000\n})\nWITH 1 as dummy\nMATCH (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'}),\n      (s:Soundtrack:GeneratedByClaudeAI {title: 'Oppenheimer (Original Motion Picture Soundtrack)'})\nCREATE (s)-[:COMPOSED_FOR {\n    contractDate: date('2022-01-15'),\n    completion: date('2023-05-20'),\n    nominatedAwards: ['Academy Award', 'BAFTA', 'Golden Globe'],\n    wonAwards: ['Academy Award'],\n    spotifyStreams: 175000000,\n    youtubeViews: 42000000\n}]->(o)"
2025-03-06 20:37:45,501 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 16, column: 1, offset: 407} for query: "// Create filming location\nCREATE (MoroccoLocation:FilmingLocation:GeneratedByClaudeAI {\n    name: 'Wadi Rum Desert',\n    country: 'Jordan',\n    region: 'Southern Jordan',\n    latitude: 29.5833,\n    longitude: 35.4167,\n    elevation: 1600,\n    elevationUnit: 'm',\n    climate: 'Desert',\n    permitCost: 2500000,\n    permitCurrency: 'USD',\n    firstUsed: date('2019-05-15'),\n    lastUsed: date('2019-06-28')\n})\nWITH 1 as dummy\nMATCH (d:Movie:GeneratedByClaudeAI {title: 'Dune'}),\n      (l:FilmingLocation:GeneratedByClaudeAI {name: 'Wadi Rum Desert'})\nCREATE (d)-[:FILMED_AT {\n    startDate: date('2019-05-15'),\n    endDate: date('2019-06-28'),\n    sceneCount: 32,\n    totalDays: 45,\n    weatherDelayDays: 6,\n    crewSize: 350,\n    logisticsCost: 3500000,\n    accommodationCost: 1800000,\n    characterPresent: ['Paul Atreides', 'Lady Jessica', 'Fremen']\n}]->(l)"
2025-03-06 20:37:45,504 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 386} for query: "// Create prop for Oppenheimer\nCREATE (TrinityDevice:Prop:GeneratedByClaudeAI {\n    name: 'Trinity Test Device Replica',\n    movie: 'Oppenheimer',\n    material: 'Mixed materials, electronics',\n    weight: 350,\n    weightUnit: 'kg',\n    createdDate: date('2022-01-10'),\n    screenTime: duration({minutes: 8, seconds: 45}),\n    isIconic: true,\n    constructionCost: 250000,\n    copiesMade: 3\n})\nWITH 1 as dummy\nMATCH (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'}),\n      (p:Prop:GeneratedByClaudeAI {name: 'Trinity Test Device Replica'})\nCREATE (p)-[:USED_IN {\n    scenes: ['Trinity Test', 'Laboratory'],\n    sceneCount: 5,\n    firstAppearance: time('01:45:22'),\n    lastAppearance: time('02:15:08'),\n    isCloseup: true,\n    significance: 'Central plot device',\n    historicalAccuracy: 'Very high'\n}]->(o)"
2025-03-06 20:37:45,506 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 15, column: 1, offset: 404} for query: "// Create fan community\nCREATE (DuneFandom:FanCommunity:GeneratedByClaudeAI {\n    name: 'Dune Fan Community',\n    established: date('1965-08-15'),\n    reactivation: date('2021-10-22'),\n    memberCount: 3250000,\n    onlinePlatforms: 8,\n    annualConventions: 5,\n    largestEventAttendance: 15000,\n    contentCreators: 28500,\n    fanfictionCount: 45000,\n    fanArtCount: 120000,\n    academicPapers: 450\n})\nWITH 1 as dummy\nMATCH (f:FanCommunity:GeneratedByClaudeAI {name: 'Dune Fan Community'}),\n      (d:Movie:GeneratedByClaudeAI {title: 'Dune'})\nCREATE (f)-[:ENGAGED_WITH {\n    anticipationScore: 9.7,\n    reviewsSubmitted: 185000,\n    averageRating: 8.6,\n    onlineDiscussions: 85000,\n    theoriesGenerated: 15000,\n    preReleaseEvents: 45,\n    postReleaseEvents: 230,\n    merchandiseSales: 75000000,\n    sequelAnticipation: 9.8\n}]->(d)"
2025-03-06 20:37:45,510 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "// Connect more actors\nMATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Amy Adams'}),\n  (c:Person:GeneratedByClaudeAI {name: 'Cillian Murphy'})\nCREATE (a)-[:KNOWS {\n    since: date('2013-08-15'),\n    relationship: 'Professional Colleagues',\n    lastMeeting: date('2023-09-22'),\n    durationYears: 10,\n    commonFriends: 12,\n    commonEvents: 8\n}]->(c)"
2025-03-06 20:37:45,514 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Michelle Yeoh'}),\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'})\nCREATE (m)-[:ADMIRES {\n    since: date('2010-07-16'),\n    projects: 0,\n    relationship: 'Professional Admiration',\n    lastContact: date('2023-02-28'),\n    inspirationLevel: 4.8,\n    influencedWorks: ['Everything Everywhere All at Once']\n}]->(c)"
2025-03-06 20:37:45,517 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 14, column: 1, offset: 427} for query: "// Create costume design relationship\nCREATE (JacquelineWest:Person:GeneratedByClaudeAI {\n    name: 'Jacqueline West',\n    born: 1950,\n    birthdate: date('1950-10-15'),\n    nationality: 'American',\n    oscarNominations: 4,\n    isActive: true,\n    firstFilm: datetime('1998-11-20T00:00:00Z'),\n    specialization: 'Costume Design',\n    careerLength: duration({years: 25}),\n    designStyle: 'Historical authenticity with symbolic elements'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Jacqueline West'}),\n      (d:Movie:GeneratedByClaudeAI {title: 'Dune'})\nCREATE (p)-[:DESIGNED_COSTUMES_FOR {\n    year: 2021,\n    costumesCreated: 1200,\n    budget: 2500000,\n    awardNominations: 5,\n    awardWins: 2,\n    startDate: date('2018-10-15'),\n    completionDate: date('2019-02-28'),\n    specialCostumes: ['Stillsuits', 'House Atreides uniforms', 'Bene Gesserit robes'],\n    researchHours: 850,\n    conceptualDesigns: 280\n}]->(d)"
2025-03-06 20:37:45,520 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (o))} {position: line: 15, column: 1, offset: 425} for query: "// Create cinematographer relationship\nCREATE (HoyteVanHoytema:Person:GeneratedByClaudeAI {\n    name: 'Hoyte van Hoytema',\n    born: 1971,\n    birthdate: date('1971-10-04'),\n    nationality: 'Dutch-Swedish',\n    oscarNominations: 3,\n    oscarWins: 1,\n    isActive: true,\n    firstFilm: datetime('2002-09-15T00:00:00Z'),\n    visualStyle: 'Natural lighting with IMAX optimization',\n    cameraPreference: 'IMAX 65mm',\n    collaborations: 4\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Hoyte van Hoytema'}),\n      (o:Movie:GeneratedByClaudeAI {title: 'Oppenheimer'})\nCREATE (p)-[:CINEMATOGRAPHY_FOR {\n    year: 2023,\n    cameras: ['IMAX 65mm', 'Panavision 65mm'],\n    lenses: ['IMAX', 'Panavision System 65'],\n    awardNominations: 12,\n    awardWins: 8,\n    startDate: date('2022-02-22'),\n    completionDate: date('2022-05-18'),\n    signature_shots: ['Trinity explosion', 'Quantum discussions', 'Hearing sequences'],\n    lighting_setups: 165,\n    filmedOnLocation: true\n}]->(o)"
2025-03-06 20:37:45,656 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes\nMATCH \n  (r:Person {name: 'Robert Wise'}), // Assuming Robert Wise exists from original data\n  (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (r)-[:DIRECTED {\n    year: 1965,\n    daysOnSet: 145,\n    satisfaction: 4.9,\n    awardNominations: 10,\n    completionDate: date('1964-11-15'),\n    premiereEvent: datetime('1965-03-02T19:30:00-05:00'),\n    durationMonths: 5,\n    isFirstMusical: false,\n    onLocationPercentage: 60\n}]->(s)"
2025-03-06 20:37:45,666 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (a:Person:GeneratedByClaudeAI {name: 'Alfred Hitchcock'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Psycho'})\nCREATE (a)-[:DIRECTED {\n    year: 1960,\n    daysOnSet: 45,\n    satisfaction: 4.8,\n    studioInterference: 'Low',\n    completionDate: date('1960-02-01'),\n    premiereEvent: datetime('1960-06-16T20:00:00-05:00'),\n    durationMonths: 2,\n    isLowBudget: true,\n    blackAndWhiteDecision: 'Artistic and practical'\n}]->(p)"
2025-03-06 20:37:45,677 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (j:Person:GeneratedByClaudeAI {name: 'James Cameron'}),\n  (a:Movie:GeneratedByClaudeAI {title: 'Avatar'})\nCREATE (j)-[:DIRECTED {\n    year: 2009,\n    daysOnSet: 198,\n    satisfaction: 4.9,\n    awardNominations: 9,\n    completionDate: date('2009-11-01'),\n    premiereEvent: datetime('2009-12-10T19:00:00-05:00'),\n    durationMonths: 8,\n    isTechnicalInnovation: true,\n    developmentYears: 15\n}]->(a)"
2025-03-06 20:37:45,689 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (r:Person:GeneratedByClaudeAI {name: 'Ryan Coogler'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Black Panther'})\nCREATE (r)-[:DIRECTED {\n    year: 2018,\n    daysOnSet: 132,\n    satisfaction: 4.9,\n    awardNominations: 7,\n    completionDate: date('2017-11-10'),\n    premiereEvent: datetime('2018-01-29T20:00:00-05:00'),\n    durationMonths: 3,\n    marvelInvolvement: 'Supportive',\n    culturalConsultants: 12\n}]->(b)"
2025-03-06 20:37:45,702 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (s:Person:GeneratedByClaudeAI {name: 'Sofia Coppola'}),\n  (l:Movie:GeneratedByClaudeAI {title: 'Lost in Translation'})\nCREATE (s)-[:DIRECTED {\n    year: 2003,\n    daysOnSet: 27,\n    satisfaction: 4.9,\n    awardNominations: 4,\n    awardWins: 1,\n    completionDate: date('2002-12-15'),\n    premiereEvent: datetime('2003-08-29T19:30:00+02:00'),\n    durationMonths: 1,\n    isPersonalStory: true,\n    improvisation: 'Significant'\n}]->(l)"
2025-03-06 20:37:45,714 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships\nMATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Julie Andrews'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (j)-[:ACTED_IN {\n    roles: ['Maria von Trapp'],\n    salary: 150000,\n    screenTimeMinutes: 145,\n    startDate: date('1964-03-26'),\n    endDate: date('1964-09-01'),\n    scheduleConflicts: false,\n    criticScore: 95,\n    audienceScore: 98,\n    awardNominations: 5,\n    awardWins: 1,\n    songsPerformed: 10\n}]->(s)"
2025-03-06 20:37:45,725 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Anthony Perkins'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Psycho'})\nCREATE (a)-[:ACTED_IN {\n    roles: ['Norman Bates'],\n    salary: 40000,\n    screenTimeMinutes: 60,\n    startDate: date('1959-11-11'),\n    endDate: date('1960-02-01'),\n    scheduleConflicts: false,\n    criticScore: 96,\n    audienceScore: 93,\n    awardNominations: 1,\n    careerDefiningRole: true\n}]->(p)"
2025-03-06 20:37:45,736 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Person:GeneratedByClaudeAI {name: 'Sam Worthington'}),\n  (a:Movie:GeneratedByClaudeAI {title: 'Avatar'})\nCREATE (s)-[:ACTED_IN {\n    roles: ['Jake Sully'],\n    salary: 5000000,\n    screenTimeMinutes: 138,\n    startDate: date('2007-04-16'),\n    endDate: date('2007-12-15'),\n    scheduleConflicts: false,\n    criticScore: 90,\n    audienceScore: 92,\n    motionCaptureHours: 1250,\n    physicalTrainingMonths: 6\n}]->(a)"
2025-03-06 20:37:45,747 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Chadwick Boseman'}),\n  (b:Movie:GeneratedByClaudeAI {title: 'Black Panther'})\nCREATE (c)-[:ACTED_IN {\n    roles: ['T\\'Challa/Black Panther'],\n    salary: 2000000,\n    screenTimeMinutes: 105,\n    startDate: date('2017-01-15'),\n    endDate: date('2017-04-19'),\n    scheduleConflicts: false,\n    criticScore: 97,\n    audienceScore: 96,\n    awardNominations: 2,\n    stuntTrainingHours: 375,\n    dialectCoaching: true\n}]->(b)"
2025-03-06 20:37:45,758 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Person:GeneratedByClaudeAI {name: 'Scarlett Johansson'}),\n  (l:Movie:GeneratedByClaudeAI {title: 'Lost in Translation'})\nCREATE (s)-[:ACTED_IN {\n    roles: ['Charlotte'],\n    salary: 750000,\n    screenTimeMinutes: 85,\n    startDate: date('2002-09-29'),\n    endDate: date('2002-10-25'),\n    scheduleConflicts: false,\n    criticScore: 95,\n    audienceScore: 90,\n    awardNominations: 5,\n    awardWins: 1,\n    ageAtFilming: 17\n}]->(l)"
2025-03-06 20:37:45,768 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "// Studio relationships\nMATCH\n  (t:Studio:GeneratedByClaudeAI {name: 'TwentiethCenturyFox'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (t)-[:PRODUCED {\n    investment: 8200000,\n    return: 286214286,\n    roi: 34.9,\n    contractSigned: date('1963-08-15'),\n    studioShare: 0.7,\n    directorShare: 0.1,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 2000000,\n    isProfitable: true,\n    marketingStart: datetime('1964-12-15T00:00:00Z'),\n    recordBreakingSuccess: true\n}]->(s)"
2025-03-06 20:37:45,779 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (ps))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Studio:GeneratedByClaudeAI {name: 'Paramount Pictures'}),\n  (ps:Movie:GeneratedByClaudeAI {title: 'Psycho'})\nCREATE (p)-[:PRODUCED {\n    investment: 806947,\n    return: 50000000,\n    roi: 61.96,\n    contractSigned: date('1959-08-23'),\n    studioShare: 0.6,\n    directorShare: 0.3,\n    producerShare: 0.05,\n    topCastShare: 0.05,\n    marketingBudget: 500000,\n    isProfitable: true,\n    marketingStart: datetime('1960-04-15T00:00:00Z'),\n    hitchcockDeal: 'Backend percentage'\n}]->(ps)"
2025-03-06 20:37:45,789 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (t:Studio:GeneratedByClaudeAI {name: 'TwentiethCenturyFox'}),\n  (a:Movie:GeneratedByClaudeAI {title: 'Avatar'})\nCREATE (t)-[:PRODUCED {\n    investment: 237000000,\n    return: 2923706026,\n    roi: 12.34,\n    contractSigned: date('2005-10-15'),\n    studioShare: 0.5,\n    directorShare: 0.3,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 150000000,\n    isProfitable: true,\n    marketingStart: datetime('2009-05-15T00:00:00Z'),\n    highestGrossingMilestone: date('2010-01-25')\n}]->(a)"
2025-03-06 20:37:45,798 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (d:Studio {name: 'The Walt Disney Company'}), // Assuming Disney exists in original data\n  (b:Movie:GeneratedByClaudeAI {title: 'Black Panther'})\nCREATE (d)-[:PRODUCED {\n    investment: 200000000,\n    return: 1347280838,\n    roi: 6.74,\n    contractSigned: date('2016-04-10'),\n    studioShare: 0.7,\n    directorShare: 0.1,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 150000000,\n    isProfitable: true,\n    marketingStart: datetime('2017-07-22T00:00:00Z'),\n    marvelCinematicUniverseEntry: 18\n}]->(b)"
2025-03-06 20:37:45,808 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (f:Studio:GeneratedByClaudeAI {name: 'Focus Features'}),\n  (l:Movie:GeneratedByClaudeAI {title: 'Lost in Translation'})\nCREATE (f)-[:PRODUCED {\n    investment: 4000000,\n    return: 119723856,\n    roi: 29.93,\n    contractSigned: date('2002-06-15'),\n    studioShare: 0.5,\n    directorShare: 0.25,\n    producerShare: 0.15,\n    topCastShare: 0.1,\n    marketingBudget: 10000000,\n    isProfitable: true,\n    marketingStart: datetime('2003-07-15T00:00:00Z'),\n    indieBreakoutStatus: true\n}]->(l)"
2025-03-06 20:37:45,820 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (t:Studio:GeneratedByClaudeAI {name: 'TwentiethCenturyFox'}),\n  (p:Production:GeneratedByClaudeAI {name: 'The Sound of Music Production'})\nCREATE (t)-[:FINANCED {\n    contractDate: date('1963-08-15'),\n    amount: 8200000,\n    isFullyPaid: true,\n    transferTime1: datetime('1963-10-15T00:00:00Z'),\n    transferTime2: datetime('1964-01-15T00:00:00Z'),\n    transferTime3: datetime('1964-04-15T00:00:00Z'),\n    paymentDate1: date('1963-10-15'),\n    paymentAmount1: 2500000,\n    paymentDate2: date('1964-01-15'),\n    paymentAmount2: 3000000,\n    paymentDate3: date('1964-04-15'),\n    paymentAmount3: 2700000,\n    locationPermitHandling: 'Studio managed'\n}]->(p)"
2025-03-06 20:37:45,831 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (pr))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Studio:GeneratedByClaudeAI {name: 'Paramount Pictures'}),\n  (pr:Production:GeneratedByClaudeAI {name: 'Psycho Production'})\nCREATE (p)-[:FINANCED {\n    contractDate: date('1959-08-23'),\n    amount: 806947,\n    isFullyPaid: true,\n    transferTime1: datetime('1959-10-01T00:00:00Z'),\n    transferTime2: datetime('1959-12-15T00:00:00Z'),\n    paymentDate1: date('1959-10-01'),\n    paymentAmount1: 400000,\n    paymentDate2: date('1959-12-15'),\n    paymentAmount2: 406947,\n    hitchcockOwnPercentage: 60,\n    unusualDeal: true\n}]->(pr)"
2025-03-06 20:37:45,844 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (t:Studio:GeneratedByClaudeAI {name: 'TwentiethCenturyFox'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Avatar Production'})\nCREATE (t)-[:FINANCED {\n    contractDate: date('2005-10-15'),\n    amount: 237000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2006-01-15T00:00:00Z'),\n    transferTime2: datetime('2006-07-15T00:00:00Z'),\n    transferTime3: datetime('2007-01-15T00:00:00Z'),\n    transferTime4: datetime('2007-07-15T00:00:00Z'),\n    paymentDate1: date('2006-01-15'),\n    paymentAmount1: 50000000,\n    paymentDate2: date('2006-07-15'),\n    paymentAmount2: 60000000,\n    paymentDate3: date('2007-01-15'),\n    paymentAmount3: 70000000,\n    paymentDate4: date('2007-07-15'),\n    paymentAmount4: 57000000,\n    technologyDevelopmentFunding: true\n}]->(p)"
2025-03-06 20:37:45,854 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'The Sound of Music Production'}),\n  (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 5,\n    durationDays: 6,\n    locationCount: 15,\n    soundstageCount: 8,\n    dailyAverageCost: 56000,\n    scheduleAdherence: 0.92,\n    weatherDelaysDays: 10,\n    originalScheduledEnd: date('1964-08-20'),\n    locationFilmingPercentage: 60,\n    musicalNumbersFilmed: 15\n}]->(s)"
2025-03-06 20:37:45,865 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (ps))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Psycho Production'}),\n  (ps:Movie:GeneratedByClaudeAI {title: 'Psycho'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 2,\n    durationDays: 21,\n    setCount: 12,\n    studioFilmingPercentage: 90,\n    dailyAverageCost: 12000,\n    scheduleAdherence: 0.95,\n    originalScheduledEnd: date('1960-01-25'),\n    blackAndWhiteFormat: true,\n    crewSize: 85,\n    secrecyLevel: 'Extreme'\n}]->(ps)"
2025-03-06 20:37:45,876 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationships\nMATCH\n  (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (s)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 1966,\n    ceremony: 38,\n    isWinner: true,\n    ceremonyDate: date('1966-04-18'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 2451,\n    votesAgainst: 1254,\n    producerAccepting: 'Robert Wise',\n    culturalImpact: 'Mainstream musical legitimacy'\n}]->(a)"
2025-03-06 20:37:45,890 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Julie Andrews'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (j)-[:NOMINATED_FOR {\n    category: 'Best Actress',\n    year: 1966,\n    ceremony: 38,\n    isWinner: false,\n    ceremonyDate: date('1966-04-18'),\n    announcementTime: localtime('20:30:00'),\n    votesFor: 1854,\n    votesAgainst: 1978,\n    previousWin: true,\n    previousWinYear: 1965\n}]->(a)"
2025-03-06 20:37:45,902 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a2))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Movie:GeneratedByClaudeAI {title: 'Avatar'}),\n  (a2:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (a)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2010,\n    ceremony: 82,\n    isWinner: false,\n    ceremonyDate: date('2010-03-07'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 2350,\n    votesAgainst: 2650,\n    techAwards: 3,\n    competitionWinner: 'The Hurt Locker'\n}]->(a2)"
2025-03-06 20:37:45,913 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (b:Movie:GeneratedByClaudeAI {title: 'Black Panther'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (b)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 2019,\n    ceremony: 91,\n    isWinner: false,\n    ceremonyDate: date('2019-02-24'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 1850,\n    votesAgainst: 2050,\n    historicalSignificance: 'First superhero film nominated',\n    culturalMilestone: true\n}]->(a)"
2025-03-06 20:37:45,926 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Person:GeneratedByClaudeAI {name: 'Sofia Coppola'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (s)-[:NOMINATED_FOR {\n    category: 'Best Original Screenplay',\n    year: 2004,\n    ceremony: 76,\n    isWinner: true,\n    ceremonyDate: date('2004-02-29'),\n    announcementTime: localtime('20:15:00'),\n    votesFor: 2456,\n    votesAgainst: 1850,\n    speechDuration: duration({minutes: 1, seconds: 45}),\n    secondGenerationWinner: true\n}]->(a)"
2025-03-06 20:37:45,937 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (r))} {position: line: 1, column: 9, offset: 8} for query: "// Professional relationships between people\nMATCH\n  (j:Person:GeneratedByClaudeAI {name: 'Julie Andrews'}),\n  (r:Person {name: 'Rob Reiner'}) // Original person from graph\nCREATE (j)-[:KNOWS {\n    since: date('1972-05-15'),\n    relationship: 'Professional Colleagues',\n    lastMeeting: date('2019-12-10'),\n    durationYears: 47,\n    commonProjects: 0,\n    industryEvents: 23\n}]->(r)"
2025-03-06 20:37:45,947 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Alfred Hitchcock'}),\n  (t:Person {name: 'Tom Hanks'}) // Original person from graph\nCREATE (a)-[:INFLUENCED {\n    startYear: 1960,\n    directInfluence: false,\n    mentionedInInterviews: 15,\n    cinematicTechniques: ['Camera movement', 'Suspense building', 'Audience manipulation'],\n    influenceStrength: [8.5, 9.2, 8.8],\n    culturalConnection: 'Directorial craft'\n}]->(t)"
2025-03-06 20:37:45,958 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'James Cameron'}),\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'})\nCREATE (j)-[:KNOWS {\n    since: date('2000-07-22'),\n    relationship: 'Professional Peers',\n    lastMeeting: date('2023-11-15'),\n    durationYears: 23,\n    mutualRespectLevel: 'Very High',\n    technicalExchanges: 8\n}]->(c)"
2025-03-06 20:37:45,969 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s2))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Person:GeneratedByClaudeAI {name: 'Sofia Coppola'}),\n  (s2:Person:GeneratedByClaudeAI {name: 'Scarlett Johansson'})\nCREATE (s)-[:WORKED_WITH {\n    projects: 1,\n    firstProject: 'Lost in Translation',\n    firstYear: 2003,\n    chemistry: 4.9,\n    interviews: 42,\n    relationship: 'Director-Actor',\n    awardsCelebrated: 5,\n    reunionDiscussions: 3\n}]->(s2)"
2025-03-06 20:37:45,985 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (st))} {position: line: 17, column: 1, offset: 561} for query: "// Create soundtracks\nCREATE (SoundOfMusicSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'The Sound of Music (Original Motion Picture Soundtrack)',\n    composer: 'Richard Rodgers',\n    lyricist: 'Oscar Hammerstein II',\n    released: date('1965-03-02'),\n    duration: duration({minutes: 87, seconds: 12}),\n    trackCount: 20,\n    recordingStudio: 'Todd-AO Scoring Stage',\n    recordingStudioLat: 34.1381,\n    recordingStudioLong: -118.3534,\n    peakChartPosition: 1,\n    weeksAtNumberOne: 70,\n    salesUnits: 20000000,\n    streamingCount: 120000000\n})\nWITH 1 as dummy\nMATCH (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'}),\n      (st:Soundtrack:GeneratedByClaudeAI {title: 'The Sound of Music (Original Motion Picture Soundtrack)'})\nCREATE (st)-[:COMPOSED_FOR {\n    contractDate: date('1964-01-15'),\n    completion: date('1964-11-22'),\n    nominatedAwards: ['Academy Award', 'Grammy Award'],\n    wonAwards: ['Academy Award', 'Grammy Award'],\n    goldRecords: 1,\n    platinumRecords: 2,\n    iconicSongs: ['Do-Re-Mi', 'My Favorite Things', 'Edelweiss', 'Climb Ev\\'ry Mountain']\n}]->(s)"
2025-03-06 20:37:46,004 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (st))} {position: line: 16, column: 1, offset: 503} for query: "CREATE (PsychoSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'Psycho (Original Motion Picture Soundtrack)',\n    composer: 'Bernard Herrmann',\n    released: date('1960-09-16'),\n    duration: duration({minutes: 45, seconds: 38}),\n    trackCount: 14,\n    recordingStudio: 'Paramount Scoring Stage',\n    recordingStudioLat: 34.0841,\n    recordingStudioLong: -118.3213,\n    peakChartPosition: 32,\n    salesUnits: 250000,\n    streamingCount: 85000000,\n    stringsOnly: true\n})\nWITH 1 as dummy\nMATCH (p:Movie:GeneratedByClaudeAI {title: 'Psycho'}),\n      (st:Soundtrack:GeneratedByClaudeAI {title: 'Psycho (Original Motion Picture Soundtrack)'})\nCREATE (st)-[:COMPOSED_FOR {\n    contractDate: date('1959-12-01'),\n    completion: date('1960-01-15'),\n    nominatedAwards: ['Grammy Award'],\n    wonAwards: [],\n    iconicTracks: ['The Murder', 'Prelude', 'The Cellar'],\n    culturalInfluence: 'Revolutionized horror scoring',\n    stringInstrumentCount: 18,\n    recordingDays: 7\n}]->(p)"
2025-03-06 20:37:46,018 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 17, column: 1, offset: 428} for query: "// Create filming locations\nCREATE (SalzburgLocation:FilmingLocation:GeneratedByClaudeAI {\n    name: 'Salzburg',\n    country: 'Austria',\n    region: 'Salzburg State',\n    latitude: 47.8095,\n    longitude: 13.0550,\n    elevation: 424,\n    elevationUnit: 'm',\n    climate: 'Temperate',\n    permitCost: 150000,\n    permitCurrency: 'USD',\n    firstUsed: date('1964-04-15'),\n    lastUsed: date('1964-06-28'),\n    tourismIncrease: 250\n})\nWITH 1 as dummy\nMATCH (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'}),\n      (l:FilmingLocation:GeneratedByClaudeAI {name: 'Salzburg'})\nCREATE (s)-[:FILMED_AT {\n    startDate: date('1964-04-15'),\n    endDate: date('1964-06-28'),\n    sceneCount: 45,\n    totalDays: 75,\n    weatherDelayDays: 10,\n    crewSize: 150,\n    logisticsCost: 850000,\n    accommodationCost: 450000,\n    characterPresent: ['Maria', 'Von Trapp Family', 'Captain von Trapp'],\n    touristSiteToday: true\n}]->(l)"
2025-03-06 20:37:46,041 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 16, column: 1, offset: 406} for query: "CREATE (UniversalLot:FilmingLocation:GeneratedByClaudeAI {\n    name: 'Universal Studios Backlot',\n    country: 'USA',\n    region: 'California',\n    latitude: 34.1381,\n    longitude: -118.3534,\n    elevation: 210,\n    elevationUnit: 'm',\n    climate: 'Mediterranean',\n    studioOwned: true,\n    firstUsed: date('1915-03-15'),\n    lastUsed: date('2024-01-15'),\n    filmCount: 8452\n})\nWITH 1 as dummy\nMATCH (p:Movie:GeneratedByClaudeAI {title: 'Psycho'}),\n      (l:FilmingLocation:GeneratedByClaudeAI {name: 'Universal Studios Backlot'})\nCREATE (p)-[:FILMED_AT {\n    startDate: date('1959-11-11'),\n    endDate: date('1960-02-01'),\n    sceneCount: 85,\n    totalDays: 40,\n    weatherDelayDays: 2,\n    crewSize: 85,\n    setsBulit: 12,\n    iconicSet: 'Bates Motel',\n    setPreservationStatus: 'Tourist attraction',\n    touristVisitsAnnually: 5000000\n}]->(l)"
2025-03-06 20:37:46,061 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 17, column: 1, offset: 485} for query: "// Create costume designers\nCREATE (DorotyJeakins:Person:GeneratedByClaudeAI {\n    name: 'Dorothy Jeakins',\n    born: 1914,\n    died: 1995,\n    birthdate: date('1914-01-11'),\n    deathdate: date('1995-11-27'),\n    nationality: 'American',\n    oscarWins: 3,\n    oscarNominations: 12,\n    isActive: false,\n    firstFilm: datetime('1946-08-15T00:00:00Z'),\n    lastFilm: datetime('1987-06-25T00:00:00Z'),\n    careerLength: duration({years: 41}),\n    specialization: 'Period Costume Design'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Dorothy Jeakins'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (p)-[:DESIGNED_COSTUMES_FOR {\n    year: 1965,\n    costumesCreated: 850,\n    budget: 400000,\n    awardNominations: 1,\n    awardWins: 0,\n    startDate: date('1963-12-15'),\n    completionDate: date('1964-03-10'),\n    specialCostumes: ['Maria\\'s wedding dress', 'Children\\'s play clothes', 'Baroness evening gowns'],\n    researchHours: 350,\n    historicalAccuracy: 'High with artistic license',\n    fabricsUsed: 85\n}]->(s)"
2025-03-06 20:37:46,080 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (ps))} {position: line: 16, column: 1, offset: 467} for query: "CREATE (HelenColvig:Person:GeneratedByClaudeAI {\n    name: 'Helen Colvig',\n    born: 1918,\n    died: 1991,\n    birthdate: date('1918-05-22'),\n    deathdate: date('1991-08-15'),\n    nationality: 'American',\n    oscarNominations: 1,\n    isActive: false,\n    firstFilm: datetime('1952-06-15T00:00:00Z'),\n    lastFilm: datetime('1980-11-22T00:00:00Z'),\n    careerLength: duration({years: 28}),\n    specialization: 'Contemporary Costume Design'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Helen Colvig'}),\n      (ps:Movie:GeneratedByClaudeAI {title: 'Psycho'})\nCREATE (p)-[:DESIGNED_COSTUMES_FOR {\n    year: 1960,\n    costumesCreated: 120,\n    budget: 35000,\n    awardNominations: 0,\n    awardWins: 0,\n    startDate: date('1959-10-01'),\n    completionDate: date('1959-11-05'),\n    specialCostumes: ['Norman\\'s sweaters', 'Marion\\'s suits', 'Mother\\'s dress'],\n    researchHours: 125,\n    psychologicalSignificance: 'High',\n    blackAndWhiteConsiderations: true\n}]->(ps)"
2025-03-06 20:37:46,101 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 16, column: 1, offset: 457} for query: "// Create cinematographer relationships\nCREATE (TedMcCord:Person:GeneratedByClaudeAI {\n    name: 'Ted McCord',\n    born: 1900,\n    died: 1976,\n    birthdate: date('1900-08-02'),\n    deathdate: date('1976-01-19'),\n    nationality: 'American',\n    oscarNominations: 3,\n    isActive: false,\n    firstFilm: datetime('1930-05-15T00:00:00Z'),\n    lastFilm: datetime('1968-11-22T00:00:00Z'),\n    careerLength: duration({years: 38}),\n    visualStyle: 'Vivid color compositions'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Ted McCord'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (p)-[:CINEMATOGRAPHY_FOR {\n    year: 1965,\n    cameras: ['Mitchell BNC', 'Todd-AO Cameras'],\n    lenses: ['Todd-AO Lenses', 'Panavision Anamorphic'],\n    awardNominations: 1,\n    awardWins: 0,\n    startDate: date('1964-03-26'),\n    completionDate: date('1964-09-01'),\n    signature_shots: ['Mountain opening', 'Gazebo scenes', 'Wedding procession'],\n    lighting_setups: 215,\n    colorProcess: 'DeLuxe Color',\n    aspectRatio: '2.20:1'\n}]->(s)"
2025-03-06 20:37:46,122 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (ps))} {position: line: 16, column: 1, offset: 470} for query: "CREATE (JohnLRussell:Person:GeneratedByClaudeAI {\n    name: 'John L. Russell',\n    born: 1905,\n    died: 1967,\n    birthdate: date('1905-01-03'),\n    deathdate: date('1967-02-01'),\n    nationality: 'American',\n    oscarNominations: 0,\n    isActive: false,\n    firstFilm: datetime('1940-05-15T00:00:00Z'),\n    lastFilm: datetime('1966-11-22T00:00:00Z'),\n    careerLength: duration({years: 26}),\n    visualStyle: 'High contrast black and white'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'John L. Russell'}),\n      (ps:Movie:GeneratedByClaudeAI {title: 'Psycho'})\nCREATE (p)-[:CINEMATOGRAPHY_FOR {\n    year: 1960,\n    cameras: ['Mitchell NC', 'Arriflex 35'],\n    lenses: ['Cooke Speed Panchro', 'Bausch & Lomb Baltar'],\n    awardNominations: 0,\n    awardWins: 0,\n    startDate: date('1959-11-11'),\n    completionDate: date('1960-02-01'),\n    signature_shots: ['Shower scene', 'House on hill', 'Car sinking in swamp'],\n    lighting_setups: 145,\n    blackAndWhiteFilmStock: 'Eastman Double-X Negative',\n    televisionExperience: true\n}]->(ps)"
2025-03-06 20:37:46,134 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Create more connections between original and new graph\nMATCH\n  (o:Person:GeneratedByClaudeAI {name: 'Orson Welles'}),\n  (a:Person:GeneratedByClaudeAI {name: 'Alfred Hitchcock'})\nCREATE (o)-[:ADMIRED {\n    since: date('1940-06-15'),\n    publicStatements: 8,\n    mutualRespect: true,\n    commonTechniques: ['Deep focus', 'Innovative camera angles', 'Psychological suspense'],\n    techniqueOverlap: [9.2, 8.5, 9.7],\n    cinematicInfluence: 'Bidirectional'\n}]->(a)"
2025-03-06 20:37:46,146 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Person:GeneratedByClaudeAI {name: 'Sofia Coppola'}),\n  (b:Person:GeneratedByClaudeAI {name: 'Bong Joon-ho'})\nCREATE (s)-[:KNOWS {\n    since: date('2012-05-22'),\n    relationship: 'Festival circuit colleagues',\n    lastMeeting: date('2023-05-17'),\n    durationYears: 11,\n    festivalEncounters: 8,\n    mutualAdmiration: true\n}]->(b)"
2025-03-06 20:37:46,177 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 15, column: 1, offset: 427} for query: "// Create fan community for classic film\nCREATE (SoundOfMusicFandom:FanCommunity:GeneratedByClaudeAI {\n    name: 'The Sound of Music Fan Community',\n    established: date('1965-06-15'),\n    revival: date('2005-03-02'),\n    memberCount: 850000,\n    onlinePlatforms: 12,\n    annualTours: 850,\n    largestEventAttendance: 25000,\n    singAlongEvents: 450,\n    tourismRevenue: 35000000,\n    tourismRevenueCurrency: 'USD',\n    academicStudies: 85\n})\nWITH 1 as dummy\nMATCH (f:FanCommunity:GeneratedByClaudeAI {name: 'The Sound of Music Fan Community'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (f)-[:CELEBRATES {\n    yearsActive: 59,\n    tourLocations: ['Salzburg', 'Vienna', 'Vermont'],\n    annualFestivals: 5,\n    merchandiseSales: 12000000,\n    generationalAppeal: 'Multi-generational',\n    songbooksPublished: 45,\n    academicConferences: 12,\n    recreationsPerformed: 'Global',\n    culturalPreservation: 'Significant',\n    archivalCollections: 15\n}]->(s)"
2025-03-06 20:37:46,191 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 527} for query: "// Create educational program for classic film studies\nCREATE (HitchcockStudyProgram:EducationalProgram:GeneratedByClaudeAI {\n    name: 'Hitchcock Film Analysis Curriculum',\n    developed: date('1980-05-15'),\n    institutionsAdopting: 2450,\n    targetEducationLevels: ['University', 'Film School', 'High School Advanced'],\n    materialFormats: ['Digital', 'Print', 'Video supplements', 'Interactive'],\n    languagesAvailable: 28,\n    courseDuration: duration({weeks: 12}),\n    totalLessonHours: 85,\n    scholarlyEndorsements: 125,\n    educatorRating: 9.6\n})\nWITH 1 as dummy\nMATCH (e:EducationalProgram:GeneratedByClaudeAI {name: 'Hitchcock Film Analysis Curriculum'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'Psycho'})\nCREATE (e)-[:ANALYZES {\n    focusAreas: ['Suspense techniques', 'Visual symbolism', 'Psychological themes', 'Cultural context', 'Narrative structure'],\n    focusDistribution: [0.25, 0.20, 0.25, 0.15, 0.15],\n    analyticalApproaches: ['Auteur theory', 'Psychoanalytic', 'Feminist', 'Cultural'],\n    studentFeedbackScore: 9.3,\n    criticalThinkingDevelopment: 'Very High',\n    filmTechniqueRecognition: 'Expert',\n    shotByShot: true,\n    filmStudiesImpact: 'Foundational',\n    globalAdoption: 'Standard curriculum',\n    academicPaperGeneration: 850\n}]->(p)"
2025-03-06 20:37:46,206 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 16, column: 1, offset: 456} for query: "// Create theme park attraction\nCREATE (SoundOfMusicTour:Attraction:GeneratedByClaudeAI {\n    name: 'The Original Sound of Music Tour',\n    opened: date('1967-05-15'),\n    locationLat: 47.8095,\n    locationLong: 13.0550,\n    visitorCapacity: 250,\n    visitorDuration: duration({hours: 4, minutes: 0}),\n    annualVisitors: 350000,\n    routeLength: 25,\n    lengthUnit: 'kilometers',\n    developmentCost: 25000,\n    interactiveElements: 8,\n    historicalSites: 15\n})\nWITH 1 as dummy\nMATCH (a:Attraction:GeneratedByClaudeAI {name: 'The Original Sound of Music Tour'}),\n      (s:Movie:GeneratedByClaudeAI {title: 'The Sound of Music'})\nCREATE (a)-[:BASED_ON {\n    filmElementsFeatured: ['Gazebo', 'Nonnberg Abbey', 'Mirabell Gardens', 'Von Trapp villa exterior'],\n    educationalFocus: 0.6,\n    entertainmentFocus: 0.4,\n    audienceRating: 9.5,\n    historicalContextualization: 'Both film and true story',\n    originalSitesCurated: 12,\n    songPerformanceLocations: 8,\n    filmingLocationAccuracy: 'Very high',\n    culturalImpactMetrics: ['Tourism boost', 'City identity', 'Film pilgrimage'],\n    economicContribution: 37500000\n}]->(s)"
2025-03-06 20:37:46,222 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 16, column: 1, offset: 521} for query: "// Create merchandising relationship\nCREATE (AvatarMerchandise:Merchandise:GeneratedByClaudeAI {\n    name: 'Avatar Collector\\'s Edition Box Set',\n    released: date('2010-11-16'),\n    manufacturer: '20th Century Fox Home Entertainment',\n    manufacturerLocationLat: 34.0746,\n    manufacturerLocationLong: -118.3798,\n    retailPrice: 99.99,\n    priceCurrency: 'USD',\n    productionRun: 250000,\n    specialFeatures: 15,\n    limitedEdition: true,\n    packagingInnovation: 'Interactive AR features',\n    collectorValue: 'Appreciating'\n})\nWITH 1 as dummy\nMATCH (m:Merchandise:GeneratedByClaudeAI {name: 'Avatar Collector\\'s Edition Box Set'}),\n      (a:Movie:GeneratedByClaudeAI {title: 'Avatar'})\nCREATE (m)-[:DERIVED_FROM {\n    licensingDeal: date('2010-02-15'),\n    unitsSold: 185000,\n    geographicalDistribution: ['North America', 'Europe', 'Asia', 'Australia'],\n    salesDistribution: [0.60, 0.25, 0.10, 0.05],\n    retailersCarrying: 12500,\n    digitalCodeInclusion: true,\n    specialContentHours: 8.5,\n    brandRecognition: 0.92,\n    merchandisingLongevity: 'Still in demand, secondary market',\n    collectibleResaleValue: 350\n}]->(a)"
2025-03-06 20:37:46,572 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Create relationships between nodes\nMATCH \n  (j:Person:GeneratedByClaudeAI {name: 'James Cameron'}),\n  (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (j)-[:DIRECTED {\n    year: 1997,\n    daysOnSet: 160,\n    satisfaction: 4.8,\n    awardNominations: 14,\n    awardWins: 11,\n    completionDate: date('1997-07-31'),\n    premiereEvent: datetime('1997-12-14T19:30:00-05:00'),\n    durationMonths: 7,\n    budgetOverruns: true,\n    scheduleOverruns: true\n}]->(t)"
2025-03-06 20:37:46,583 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (f:Person:GeneratedByClaudeAI {name: 'Francis Ford Coppola'}),\n  (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'})\nCREATE (f)-[:DIRECTED {\n    year: 1972,\n    daysOnSet: 112,\n    satisfaction: 4.7,\n    awardNominations: 11,\n    awardWins: 3,\n    completionDate: date('1971-11-25'),\n    premiereEvent: datetime('1972-03-14T20:00:00-05:00'),\n    durationMonths: 4,\n    studioFights: true,\n    castingBattles: 'Significant'\n}]->(g)"
2025-03-06 20:37:46,599 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'The Dark Knight'})\nCREATE (c)-[:DIRECTED {\n    year: 2008,\n    daysOnSet: 127,\n    satisfaction: 4.9,\n    awardNominations: 8,\n    awardWins: 2,\n    completionDate: date('2008-04-15'),\n    premiereEvent: datetime('2008-07-14T19:00:00-04:00'),\n    durationMonths: 6,\n    iMAXUsage: 'Extensive',\n    practicalEffectsPercentage: 70\n}]->(d)"
2025-03-06 20:37:46,611 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (q:Person:GeneratedByClaudeAI {name: 'Quentin Tarantino'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Pulp Fiction'})\nCREATE (q)-[:DIRECTED {\n    year: 1994,\n    daysOnSet: 51,\n    satisfaction: 4.9,\n    awardNominations: 7,\n    awardWins: 1,\n    completionDate: date('1994-01-30'),\n    premiereEvent: datetime('1994-05-21T20:30:00+02:00'),\n    durationMonths: 2,\n    scriptToScreen: 'Nearly identical',\n    nonLinearExperiment: true\n}]->(p)"
2025-03-06 20:37:46,623 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "MATCH \n  (a:Person:GeneratedByClaudeAI {name: 'Ang Lee'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Crouching Tiger, Hidden Dragon'})\nCREATE (a)-[:DIRECTED {\n    year: 2000,\n    daysOnSet: 135,\n    satisfaction: 4.8,\n    awardNominations: 10,\n    awardWins: 4,\n    completionDate: date('1999-12-25'),\n    premiereEvent: datetime('2000-05-18T21:00:00+02:00'),\n    durationMonths: 5,\n    crossCulturalChallenges: true,\n    actionChoreography: 'Revolutionary'\n}]->(c)"
2025-03-06 20:37:46,634 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Actor to Movie relationships\nMATCH\n  (k:Person:GeneratedByClaudeAI {name: 'Kate Winslet'}),\n  (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (k)-[:ACTED_IN {\n    roles: ['Rose DeWitt Bukater'],\n    salary: 2000000,\n    screenTimeMinutes: 120,\n    startDate: date('1996-07-31'),\n    endDate: date('1997-03-23'),\n    scheduleConflicts: false,\n    criticScore: 94,\n    audienceScore: 95,\n    awardNominations: 2,\n    awardWins: 0,\n    underwaterScenes: 7\n}]->(t)"
2025-03-06 20:37:46,646 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Al Pacino'}),\n  (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'})\nCREATE (a)-[:ACTED_IN {\n    roles: ['Michael Corleone'],\n    salary: 35000,\n    screenTimeMinutes: 95,\n    startDate: date('1971-03-29'),\n    endDate: date('1971-08-07'),\n    scheduleConflicts: false,\n    criticScore: 98,\n    audienceScore: 97,\n    awardNominations: 1,\n    awardWins: 0,\n    studioOpposition: true\n}]->(g)"
2025-03-06 20:37:46,657 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (h:Person:GeneratedByClaudeAI {name: 'Heath Ledger'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'The Dark Knight'})\nCREATE (h)-[:ACTED_IN {\n    roles: ['Joker'],\n    salary: 5000000,\n    screenTimeMinutes: 33,\n    startDate: date('2007-04-18'),\n    endDate: date('2007-08-25'),\n    scheduleConflicts: false,\n    criticScore: 99,\n    audienceScore: 98,\n    awardNominations: 10,\n    awardWins: 8,\n    characterImmersion: 'Extreme'\n}]->(d)"
2025-03-06 20:37:46,671 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (u:Person:GeneratedByClaudeAI {name: 'Uma Thurman'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Pulp Fiction'})\nCREATE (u)-[:ACTED_IN {\n    roles: ['Mia Wallace'],\n    salary: 500000,\n    screenTimeMinutes: 28,\n    startDate: date('1993-09-20'),\n    endDate: date('1993-10-15'),\n    scheduleConflicts: false,\n    criticScore: 96,\n    audienceScore: 95,\n    awardNominations: 1,\n    awardWins: 0,\n    iconicScenes: ['Twist contest', 'Adrenaline shot']\n}]->(p)"
2025-03-06 20:37:46,683 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Michelle Yeoh'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Crouching Tiger, Hidden Dragon'})\nCREATE (m)-[:ACTED_IN {\n    roles: ['Yu Shu Lien'],\n    salary: 1000000,\n    screenTimeMinutes: 95,\n    startDate: date('1999-04-15'),\n    endDate: date('1999-09-17'),\n    scheduleConflicts: false,\n    criticScore: 97,\n    audienceScore: 94,\n    awardNominations: 5,\n    awardWins: 2,\n    martialArtsPerformed: true,\n    stuntPercentage: 90\n}]->(c)"
2025-03-06 20:37:46,695 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Studio relationships\nMATCH\n  (p:Studio:GeneratedByClaudeAI {name: 'Paramount Pictures'}),\n  (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (p)-[:PRODUCED {\n    investment: 100000000,\n    return: 1097585239,\n    roi: 10.98,\n    contractSigned: date('1995-12-15'),\n    studioShare: 0.5,\n    directorShare: 0.25,\n    producerShare: 0.15,\n    topCastShare: 0.1,\n    marketingBudget: 50000000,\n    isProfitable: true,\n    marketingStart: datetime('1997-06-15T00:00:00Z'),\n    coProduction: 'Fox'\n}]->(t)"
2025-03-06 20:37:46,706 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Studio:GeneratedByClaudeAI {name: 'Paramount Pictures'}),\n  (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'})\nCREATE (p)-[:PRODUCED {\n    investment: 6000000,\n    return: 245066411,\n    roi: 40.84,\n    contractSigned: date('1970-09-15'),\n    studioShare: 0.7,\n    directorShare: 0.1,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 1000000,\n    isProfitable: true,\n    marketingStart: datetime('1972-01-15T00:00:00Z'),\n    executiveOpposition: true\n}]->(g)"
2025-03-06 20:37:46,717 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'The Dark Knight'})\nCREATE (w)-[:PRODUCED {\n    investment: 185000000,\n    return: 1003045358,\n    roi: 5.42,\n    contractSigned: date('2006-08-22'),\n    studioShare: 0.6,\n    directorShare: 0.2,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 100000000,\n    isProfitable: true,\n    marketingStart: datetime('2007-12-15T00:00:00Z'),\n    franchiseEntry: 2\n}]->(d)"
2025-03-06 20:37:46,729 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Studio:GeneratedByClaudeAI {name: 'Miramax Films'}),\n  (p:Movie:GeneratedByClaudeAI {title: 'Pulp Fiction'})\nCREATE (m)-[:PRODUCED {\n    investment: 8000000,\n    return: 213928762,\n    roi: 26.74,\n    contractSigned: date('1993-04-15'),\n    studioShare: 0.6,\n    directorShare: 0.2,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 10000000,\n    isProfitable: true,\n    marketingStart: datetime('1994-05-30T00:00:00Z'),\n    festivalStrategy: 'Cannes premiere'\n}]->(p)"
2025-03-06 20:37:46,739 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (c))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (s:Studio:GeneratedByClaudeAI {name: 'Sony Pictures Entertainment'}),\n  (c:Movie:GeneratedByClaudeAI {title: 'Crouching Tiger, Hidden Dragon'})\nCREATE (s)-[:PRODUCED {\n    investment: 17000000,\n    return: 213525736,\n    roi: 12.56,\n    contractSigned: date('1998-08-15'),\n    studioShare: 0.55,\n    directorShare: 0.15,\n    producerShare: 0.15,\n    topCastShare: 0.15,\n    marketingBudget: 15000000,\n    isProfitable: true,\n    marketingStart: datetime('2000-09-15T00:00:00Z'),\n    internationalFocus: true\n}]->(c)"
2025-03-06 20:37:46,754 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Studio to filming relationship\nMATCH\n  (p:Studio:GeneratedByClaudeAI {name: 'Paramount Pictures'}),\n  (t:Production:GeneratedByClaudeAI {name: 'Titanic Production'})\nCREATE (p)-[:FINANCED {\n    contractDate: date('1995-12-15'),\n    amount: 100000000,\n    isFullyPaid: true,\n    transferTime1: datetime('1996-01-15T00:00:00Z'),\n    transferTime2: datetime('1996-06-15T00:00:00Z'),\n    transferTime3: datetime('1996-12-15T00:00:00Z'),\n    paymentDate1: date('1996-01-15'),\n    paymentAmount1: 30000000,\n    paymentDate2: date('1996-06-15'),\n    paymentAmount2: 40000000,\n    paymentDate3: date('1996-12-15'),\n    paymentAmount3: 30000000,\n    costOverrunConcerns: 'Significant'\n}]->(t)"
2025-03-06 20:37:46,765 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Studio:GeneratedByClaudeAI {name: 'Paramount Pictures'}),\n  (g:Production:GeneratedByClaudeAI {name: 'The Godfather Production'})\nCREATE (p)-[:FINANCED {\n    contractDate: date('1970-09-15'),\n    amount: 6000000,\n    isFullyPaid: true,\n    transferTime1: datetime('1970-12-01T00:00:00Z'),\n    transferTime2: datetime('1971-03-01T00:00:00Z'),\n    paymentDate1: date('1970-12-01'),\n    paymentAmount1: 3000000,\n    paymentDate2: date('1971-03-01'),\n    paymentAmount2: 3000000,\n    budgetControl: 'Strict',\n    producerOversight: 'Heavy'\n}]->(g)"
2025-03-06 20:37:46,778 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (d:Production:GeneratedByClaudeAI {name: 'The Dark Knight Production'})\nCREATE (w)-[:FINANCED {\n    contractDate: date('2006-08-22'),\n    amount: 185000000,\n    isFullyPaid: true,\n    transferTime1: datetime('2007-01-15T00:00:00Z'),\n    transferTime2: datetime('2007-04-15T00:00:00Z'),\n    transferTime3: datetime('2007-07-15T00:00:00Z'),\n    paymentDate1: date('2007-01-15'),\n    paymentAmount1: 60000000,\n    paymentDate2: date('2007-04-15'),\n    paymentAmount2: 70000000,\n    paymentDate3: date('2007-07-15'),\n    paymentAmount3: 55000000,\n    tentpoleStatus: true\n}]->(d)"
2025-03-06 20:37:46,789 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Studio:GeneratedByClaudeAI {name: 'Miramax Films'}),\n  (p:Production:GeneratedByClaudeAI {name: 'Pulp Fiction Production'})\nCREATE (m)-[:FINANCED {\n    contractDate: date('1993-04-15'),\n    amount: 8000000,\n    isFullyPaid: true,\n    transferTime1: datetime('1993-07-01T00:00:00Z'),\n    transferTime2: datetime('1993-09-01T00:00:00Z'),\n    paymentDate1: date('1993-07-01'),\n    paymentAmount1: 4000000,\n    paymentDate2: date('1993-09-01'),\n    paymentAmount2: 4000000,\n    independentBudgeting: true,\n    tightControls: true\n}]->(p)"
2025-03-06 20:37:46,800 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 1, column: 9, offset: 8} for query: "// Filming to movie relationship\nMATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Titanic Production'}),\n  (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 7,\n    durationDays: 23,\n    locationCount: 5,\n    setCount: 35,\n    dailyAverageCost: 450000,\n    scheduleAdherence: 0.75,\n    weatherDelaysDays: 15,\n    originalScheduledEnd: date('1997-01-15'),\n    budgetOverrun: 0.3,\n    scheduleOverrun: 0.4\n}]->(t)"
2025-03-06 20:37:46,811 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'The Godfather Production'}),\n  (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 4,\n    durationDays: 9,\n    locationCount: 12,\n    setCount: 24,\n    dailyAverageCost: 45000,\n    scheduleAdherence: 0.85,\n    weatherDelaysDays: 6,\n    originalScheduledEnd: date('1971-07-20'),\n    castingDisputes: 'Major',\n    studioInterference: 'Significant'\n}]->(g)"
2025-03-06 20:37:46,822 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'The Dark Knight Production'}),\n  (d:Movie:GeneratedByClaudeAI {title: 'The Dark Knight'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 6,\n    durationDays: 24,\n    locationCount: 10,\n    setCount: 28,\n    dailyAverageCost: 430000,\n    scheduleAdherence: 0.9,\n    weatherDelaysDays: 12,\n    originalScheduledEnd: date('2007-10-30'),\n    iMAXPercentage: 28,\n    practicalEffects: 'Extensive'\n}]->(d)"
2025-03-06 20:37:46,835 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (pf))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Production:GeneratedByClaudeAI {name: 'Pulp Fiction Production'}),\n  (pf:Movie:GeneratedByClaudeAI {title: 'Pulp Fiction'})\nCREATE (p)-[:FOR_MOVIE {\n    isCompleted: true,\n    durationMonths: 2,\n    durationDays: 10,\n    locationCount: 25,\n    setCount: 18,\n    dailyAverageCost: 75000,\n    scheduleAdherence: 0.95,\n    weatherDelaysDays: 3,\n    originalScheduledEnd: date('1993-11-25'),\n    castChemistry: 'Exceptional',\n    improvisationLevel: 'Moderate'\n}]->(pf)"
2025-03-06 20:37:46,847 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Award relationships\nMATCH\n  (t:Movie:GeneratedByClaudeAI {title: 'Titanic'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (t)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 1998,\n    ceremony: 70,\n    isWinner: true,\n    ceremonyDate: date('1998-03-23'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 4862,\n    votesAgainst: 2153,\n    totalOscars: 11,\n    recordTying: true\n}]->(a)"
2025-03-06 20:37:46,862 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (j:Person:GeneratedByClaudeAI {name: 'James Cameron'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (j)-[:NOMINATED_FOR {\n    category: 'Best Director',\n    year: 1998,\n    ceremony: 70,\n    isWinner: true,\n    ceremonyDate: date('1998-03-23'),\n    announcementTime: localtime('21:15:00'),\n    votesFor: 4715,\n    votesAgainst: 2300,\n    speechDuration: duration({minutes: 2, seconds: 45}),\n    speechMemorable: true,\n    quotedLine: 'I\\'m the king of the world!'\n}]->(a)"
2025-03-06 20:37:46,875 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (g)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 1973,\n    ceremony: 45,\n    isWinner: true,\n    ceremonyDate: date('1973-03-27'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 3982,\n    votesAgainst: 1573,\n    controversies: 'Marlon Brando boycott',\n    culturalImpact: 'Groundbreaking'\n}]->(a)"
2025-03-06 20:37:46,890 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (h:Person:GeneratedByClaudeAI {name: 'Heath Ledger'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (h)-[:NOMINATED_FOR {\n    category: 'Best Supporting Actor',\n    year: 2009,\n    ceremony: 81,\n    isWinner: true,\n    ceremonyDate: date('2009-02-22'),\n    announcementTime: localtime('20:45:00'),\n    votesFor: 5823,\n    votesAgainst: 842,\n    posthumousAward: true,\n    acceptedBy: 'Family',\n    emotionalImpact: 'Significant'\n}]->(a)"
2025-03-06 20:37:46,901 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Movie:GeneratedByClaudeAI {title: 'Pulp Fiction'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (p)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 1995,\n    ceremony: 67,\n    isWinner: false,\n    ceremonyDate: date('1995-03-27'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 3254,\n    votesAgainst: 3645,\n    competitionWinner: 'Forrest Gump',\n    indieBreakthrough: true\n}]->(a)"
2025-03-06 20:37:46,914 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (q:Person:GeneratedByClaudeAI {name: 'Quentin Tarantino'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (q)-[:NOMINATED_FOR {\n    category: 'Best Original Screenplay',\n    year: 1995,\n    ceremony: 67,\n    isWinner: true,\n    ceremonyDate: date('1995-03-27'),\n    announcementTime: localtime('20:15:00'),\n    votesFor: 4215,\n    votesAgainst: 2682,\n    speechDuration: duration({minutes: 1, seconds: 50}),\n    independentCelebration: true\n}]->(a)"
2025-03-06 20:37:46,926 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Movie:GeneratedByClaudeAI {title: 'Crouching Tiger, Hidden Dragon'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (c)-[:NOMINATED_FOR {\n    category: 'Best Foreign Language Film',\n    year: 2001,\n    ceremony: 73,\n    isWinner: true,\n    ceremonyDate: date('2001-03-25'),\n    announcementTime: localtime('20:30:00'),\n    votesFor: 4561,\n    votesAgainst: 1823,\n    broadestRecognition: 'Foreign language film',\n    additionalNominations: 9\n}]->(a)"
2025-03-06 20:37:46,938 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (k))} {position: line: 1, column: 9, offset: 8} for query: "// Professional relationships between people\nMATCH\n  (j:Person:GeneratedByClaudeAI {name: 'James Cameron'}),\n  (k:Person:GeneratedByClaudeAI {name: 'Kate Winslet'})\nCREATE (j)-[:DIRECTED_ACTOR {\n    films: 1,\n    firstFilm: 'Titanic',\n    firstYear: 1997,\n    chemistry: 4.2,\n    conflicts: 'Notable',\n    intensityLevel: 'Very high',\n    futurePlans: 'None stated',\n    reconciliation: true\n}]->(k)"
2025-03-06 20:37:46,954 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (f:Person:GeneratedByClaudeAI {name: 'Francis Ford Coppola'}),\n  (a:Person:GeneratedByClaudeAI {name: 'Al Pacino'})\nCREATE (f)-[:DIRECTED_ACTOR {\n    films: 3,\n    firstFilm: 'The Godfather',\n    firstYear: 1972,\n    chemistry: 4.9,\n    conflicts: 'Minimal',\n    intensityLevel: 'High',\n    collaborationQuotes: 'Career defining',\n    artisticPartnership: 'Legendary'\n}]->(a)"
2025-03-06 20:37:46,966 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (h))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (h:Person:GeneratedByClaudeAI {name: 'Heath Ledger'})\nCREATE (c)-[:DIRECTED_ACTOR {\n    films: 1,\n    firstFilm: 'The Dark Knight',\n    firstYear: 2008,\n    chemistry: 5.0,\n    conflicts: 'None',\n    intensityLevel: 'Very high',\n    characterCreation: 'Collaborative',\n    characterOwnership: 'Actor-driven',\n    respectLevel: 'Profound'\n}]->(h)"
2025-03-06 20:37:46,978 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (u))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (q:Person:GeneratedByClaudeAI {name: 'Quentin Tarantino'}),\n  (u:Person:GeneratedByClaudeAI {name: 'Uma Thurman'})\nCREATE (q)-[:DIRECTED_ACTOR {\n    films: 3,\n    firstFilm: 'Pulp Fiction',\n    firstYear: 1994,\n    chemistry: 4.9,\n    conflicts: 'Later projects',\n    intensityLevel: 'Very high',\n    museCategorization: true,\n    collaborationLongevity: 'Multi-decade',\n    inspirationLevel: 'Significant'\n}]->(u)"
2025-03-06 20:37:46,989 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (m))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Ang Lee'}),\n  (m:Person:GeneratedByClaudeAI {name: 'Michelle Yeoh'})\nCREATE (a)-[:DIRECTED_ACTOR {\n    films: 1,\n    firstFilm: 'Crouching Tiger, Hidden Dragon',\n    firstYear: 2000,\n    chemistry: 4.8,\n    conflicts: 'None',\n    intensityLevel: 'Moderate',\n    languageBarrier: 'Minimal',\n    physicalDemands: 'Extreme',\n    mutualRespect: 'Very high'\n}]->(m)"
2025-03-06 20:37:47,007 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 16, column: 1, offset: 496} for query: "// Create soundtracks\nCREATE (TitanicSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'Titanic: Music from the Motion Picture',\n    composer: 'James Horner',\n    released: date('1997-11-18'),\n    duration: duration({minutes: 72, seconds: 38}),\n    trackCount: 15,\n    recordingStudio: 'Air Lyndhurst Studios',\n    recordingStudioLat: 51.5689,\n    recordingStudioLong: -0.1781,\n    peakChartPosition: 1,\n    weeksAtNumberOne: 16,\n    salesUnits: 30000000,\n    streamingCount: 320000000\n})\nWITH 1 as dummy\nMATCH (t:Movie:GeneratedByClaudeAI {title: 'Titanic'}),\n      (s:Soundtrack:GeneratedByClaudeAI {title: 'Titanic: Music from the Motion Picture'})\nCREATE (s)-[:COMPOSED_FOR {\n    contractDate: date('1996-05-15'),\n    completion: date('1997-08-25'),\n    nominatedAwards: ['Academy Award', 'Golden Globe', 'Grammy Award'],\n    wonAwards: ['Academy Award', 'Golden Globe', 'Grammy Award'],\n    diamondCertification: true,\n    iconicSongs: ['My Heart Will Go On'],\n    vocalistFeatured: 'Celine Dion',\n    orchestraSize: 85,\n    recordingDays: 25\n}]->(t)"
2025-03-06 20:37:47,022 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (s))} {position: line: 16, column: 1, offset: 532} for query: "CREATE (TheGodfatherSoundtrack:Soundtrack:GeneratedByClaudeAI {\n    title: 'The Godfather: Music from the Original Motion Picture Soundtrack',\n    composer: 'Nino Rota',\n    released: date('1972-03-07'),\n    duration: duration({minutes: 31, seconds: 24}),\n    trackCount: 11,\n    recordingStudio: 'Paramount Studios',\n    recordingStudioLat: 34.0841,\n    recordingStudioLong: -118.3213,\n    peakChartPosition: 45,\n    salesUnits: 500000,\n    streamingCount: 150000000,\n    culturalInfluence: 'Definitive'\n})\nWITH 1 as dummy\nMATCH (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'}),\n      (s:Soundtrack:GeneratedByClaudeAI {title: 'The Godfather: Music from the Original Motion Picture Soundtrack'})\nCREATE (s)-[:COMPOSED_FOR {\n    contractDate: date('1971-02-15'),\n    completion: date('1971-11-10'),\n    nominatedAwards: ['Academy Award', 'Grammy Award'],\n    wonAwards: [],\n    disqualificationReason: 'Previous usage',\n    iconicThemes: ['Love Theme', 'The Godfather Waltz'],\n    culturalResonance: 'Immediate and lasting',\n    ethnicInfluences: 'Sicilian folk music',\n    orchestraSize: 65\n}]->(g)"
2025-03-06 20:37:47,038 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 17, column: 1, offset: 446} for query: "// Create filming locations\nCREATE (MexicoLocation:FilmingLocation:GeneratedByClaudeAI {\n    name: 'Baja Studios',\n    country: 'Mexico',\n    region: 'Baja California',\n    latitude: 32.3662,\n    longitude: -117.0723,\n    elevation: 10,\n    elevationUnit: 'm',\n    climate: 'Mediterranean',\n    permitCost: 15000000,\n    permitCurrency: 'USD',\n    firstUsed: date('1996-07-31'),\n    lastUsed: date('1997-03-23'),\n    purpose: 'Water tank filming'\n})\nWITH 1 as dummy\nMATCH (t:Movie:GeneratedByClaudeAI {title: 'Titanic'}),\n      (l:FilmingLocation:GeneratedByClaudeAI {name: 'Baja Studios'})\nCREATE (t)-[:FILMED_AT {\n    startDate: date('1996-07-31'),\n    endDate: date('1997-03-23'),\n    sceneCount: 95,\n    totalDays: 160,\n    weatherDelayDays: 15,\n    crewSize: 850,\n    logisticsCost: 25000000,\n    accommodationCost: 15000000,\n    setConstruction: 'Full-size ship sections',\n    waterTankGallons: 17000000,\n    specialRequirements: 'Gimbal systems for sinking sequences'\n}]->(l)"
2025-03-06 20:37:47,055 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (l))} {position: line: 17, column: 1, offset: 438} for query: "CREATE (ChicagoLocation:FilmingLocation:GeneratedByClaudeAI {\n    name: 'Chicago',\n    country: 'USA',\n    region: 'Illinois',\n    latitude: 41.8781,\n    longitude: -87.6298,\n    elevation: 182,\n    elevationUnit: 'm',\n    climate: 'Continental',\n    permitCost: 8000000,\n    permitCurrency: 'USD',\n    firstUsed: date('2007-04-18'),\n    lastUsed: date('2007-08-24'),\n    buildingAccess: 'Multiple skyscrapers'\n})\nWITH 1 as dummy\nMATCH (d:Movie:GeneratedByClaudeAI {title: 'The Dark Knight'}),\n      (l:FilmingLocation:GeneratedByClaudeAI {name: 'Chicago'})\nCREATE (d)-[:FILMED_AT {\n    startDate: date('2007-04-18'),\n    endDate: date('2007-08-24'),\n    sceneCount: 75,\n    totalDays: 95,\n    weatherDelayDays: 8,\n    crewSize: 450,\n    logisticsCost: 15000000,\n    accommodationCost: 8000000,\n    characterPresent: ['Batman', 'Joker', 'Harvey Dent'],\n    buildingsUsed: ['Sears Tower', 'Trump Tower', 'Board of Trade'],\n    streetClosures: 42,\n    helicopterShots: 28\n}]->(l)"
2025-03-06 20:37:47,073 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 16, column: 1, offset: 469} for query: "// Create costume designers\nCREATE (JanetPatterson:Person:GeneratedByClaudeAI {\n    name: 'Janet Patterson',\n    born: 1956,\n    died: 2016,\n    birthdate: date('1956-06-27'),\n    deathdate: date('2016-10-21'),\n    nationality: 'Australian',\n    oscarNominations: 4,\n    isActive: false,\n    firstFilm: datetime('1986-06-15T00:00:00Z'),\n    lastFilm: datetime('2015-11-22T00:00:00Z'),\n    careerLength: duration({years: 29}),\n    specialization: 'Period Costume Design'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Janet Patterson'}),\n      (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (p)-[:DESIGNED_COSTUMES_FOR {\n    year: 1997,\n    costumesCreated: 1250,\n    budget: 8500000,\n    awardNominations: 1,\n    awardWins: 1,\n    startDate: date('1995-11-15'),\n    completionDate: date('1996-07-15'),\n    specialCostumes: ['Rose\\'s boarding suit', 'Rose\\'s evening gown', 'Flying dress'],\n    researchHours: 850,\n    historicalAccuracy: 'Very high',\n    costumesSubmerged: 450\n}]->(t)"
2025-03-06 20:37:47,089 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (d))} {position: line: 14, column: 1, offset: 390} for query: "CREATE (LindiHemming:Person:GeneratedByClaudeAI {\n    name: 'Lindy Hemming',\n    born: 1948,\n    birthdate: date('1948-05-21'),\n    nationality: 'British',\n    oscarWins: 1,\n    oscarNominations: 1,\n    isActive: true,\n    firstFilm: datetime('1985-06-15T00:00:00Z'),\n    careerLength: duration({years: 38}),\n    specialization: 'Character-driven Costume Design'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Lindy Hemming'}),\n      (d:Movie:GeneratedByClaudeAI {title: 'The Dark Knight'})\nCREATE (p)-[:DESIGNED_COSTUMES_FOR {\n    year: 2008,\n    costumesCreated: 650,\n    budget: 6500000,\n    awardNominations: 3,\n    awardWins: 1,\n    startDate: date('2006-12-15'),\n    completionDate: date('2007-04-05'),\n    specialCostumes: ['Batsuit', 'Joker costume', 'Two-Face makeup'],\n    researchHours: 450,\n    characterEmphasis: 'Psychological aspects',\n    functionalDesign: true,\n    batSuitIterations: 15\n}]->(d)"
2025-03-06 20:37:47,105 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 15, column: 1, offset: 423} for query: "// Create cinematographer relationships\nCREATE (RussellCarpenter:Person:GeneratedByClaudeAI {\n    name: 'Russell Carpenter',\n    born: 1950,\n    birthdate: date('1950-12-09'),\n    nationality: 'American',\n    oscarWins: 1,\n    oscarNominations: 1,\n    isActive: true,\n    firstFilm: datetime('1983-05-15T00:00:00Z'),\n    visualStyle: 'Cinematic grandeur with intimate moments',\n    cameraPreference: 'Panavision',\n    collaborations: 3\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Russell Carpenter'}),\n      (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (p)-[:CINEMATOGRAPHY_FOR {\n    year: 1997,\n    cameras: ['Panavision Panaflex Platinum', 'Panavision Panaflex Gold'],\n    lenses: ['Panavision Primo', 'Panavision Super High Speed'],\n    awardNominations: 5,\n    awardWins: 1,\n    startDate: date('1996-07-31'),\n    completionDate: date('1997-03-23'),\n    signature_shots: ['Bow flying scene', 'Grand staircase', 'Underwater corridors'],\n    lighting_setups: 485,\n    underwaterChallenges: true,\n    epochalCinematography: true\n}]->(t)"
2025-03-06 20:37:47,122 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 18, column: 1, offset: 543} for query: "CREATE (GordonWillis:Person:GeneratedByClaudeAI {\n    name: 'Gordon Willis',\n    born: 1931,\n    died: 2014,\n    birthdate: date('1931-05-28'),\n    deathdate: date('2014-05-18'),\n    nationality: 'American',\n    oscarNominations: 2,\n    oscarHonoraryAward: true,\n    isActive: false,\n    firstFilm: datetime('1970-01-18T00:00:00Z'),\n    lastFilm: datetime('1997-09-16T00:00:00Z'),\n    careerLength: duration({years: 27}),\n    visualStyle: 'Chiaroscuro lighting with deep shadows',\n    nickname: 'Prince of Darkness'\n})\nWITH 1 as dummy\nMATCH (p:Person:GeneratedByClaudeAI {name: 'Gordon Willis'}),\n      (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'})\nCREATE (p)-[:CINEMATOGRAPHY_FOR {\n    year: 1972,\n    cameras: ['Arriflex 35BL', 'Mitchell BNCR'],\n    lenses: ['Cooke Speed Panchro', 'Angenieux Zoom'],\n    awardNominations: 0,\n    awardWins: 0,\n    startDate: date('1971-03-29'),\n    completionDate: date('1971-08-07'),\n    signature_shots: ['Brando in shadow', 'Wedding sequence', 'Restaurant shooting'],\n    lighting_setups: 215,\n    colorScheme: 'Amber and shadows',\n    innovationLevel: 'Revolutionary',\n    academicStudies: 850\n}]->(g)"
2025-03-06 20:37:47,134 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 14, column: 1, offset: 369} for query: "// Create fan community for blockbuster\nCREATE (TitanicFandom:FanCommunity:GeneratedByClaudeAI {\n    name: 'Titanic Fan Community',\n    established: date('1998-02-15'),\n    memberCount: 1250000,\n    onlinePlatforms: 18,\n    annualEvents: 12,\n    largestEventAttendance: 15000,\n    contentCreators: 35000,\n    fanfictionCount: 85000,\n    fanArtCount: 150000,\n    academicPapers: 350\n})\nWITH 1 as dummy\nMATCH (f:FanCommunity:GeneratedByClaudeAI {name: 'Titanic Fan Community'}),\n      (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (f)-[:ENGAGED_WITH {\n    anniversaryCelebrations: 25,\n    commemorationEvents: ['Ship sinking date', 'Film release date'],\n    romanticFocus: 0.7,\n    historicalFocus: 0.3,\n    debateTopics: ['Door Size Controversy', 'Historical Accuracy', 'Alternate Endings'],\n    fanTheories: 235,\n    museumExhibits: 35,\n    shipwreckExpeditions: 12,\n    merchandiseSales: 450000000,\n    digitalPlatformRevival: 'Significant'\n}]->(t)"
2025-03-06 20:37:47,148 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 387} for query: "// Create TDK Joker Costume\nCREATE (JokerCostume:Prop:GeneratedByClaudeAI {\n    name: 'The Dark Knight Joker Costume',\n    movie: 'The Dark Knight',\n    material: 'Mixed textiles, custom dyes',\n    weight: 5.4,\n    weightUnit: 'kg',\n    createdDate: date('2007-03-15'),\n    screenTime: duration({minutes: 33, seconds: 0}),\n    isIconic: true,\n    auctionValue: 5000000,\n    copiesMade: 8\n})\nWITH 1 as dummy\nMATCH (d:Movie:GeneratedByClaudeAI {title: 'Dark Knight'}),\n      (p:Prop:GeneratedByClaudeAI {name: 'The Dark Knight Joker Costume'})\nCREATE (p)-[:USED_IN {\n    scenes: ['Bank robbery', 'Interrogation room', 'Hospital explosion'],\n    sceneCount: 15,\n    firstAppearance: time('00:04:22'),\n    lastAppearance: time('02:12:15'),\n    isCloseup: true,\n    significance: 'Character defining',\n    historicalImpact: 'Reinvented character visually',\n    costumeElements: ['Purple coat', 'Green vest', 'Hexagonal pattern shirt', 'Makeup'],\n    weatheringTechniques: ['Acid washing', 'Sandpaper distressing', 'Oil staining'],\n    psychologicalImportance: 'Visual manifestation of chaos'\n}]->(d)"
2025-03-06 20:37:47,162 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g))} {position: line: 15, column: 1, offset: 396} for query: "// Create educational institution\nCREATE (FilmSchool:Institution:GeneratedByClaudeAI {\n    name: 'American Film Institute',\n    founded: date('1967-06-05'),\n    headquartersLat: 34.1184,\n    headquartersLong: -118.3004,\n    studentCount: 650,\n    facultyCount: 120,\n    courseCount: 85,\n    filmArchiveSize: 60000,\n    digitalArchiveSize: 45000,\n    digitalArchiveUnit: 'TB',\n    annualBudget: 65000000\n})\nWITH 1 as dummy\nMATCH (i:Institution:GeneratedByClaudeAI {name: 'American Film Institute'}),\n      (g:Movie:GeneratedByClaudeAI {title: 'The Godfather'})\nCREATE (i)-[:TEACHES_WITH {\n    yearAdded: 1973,\n    coursesUsedIn: 35,\n    primaryFocus: ['Direction technique', 'Screenplay structure', 'Character development', 'Cinematography technique'],\n    studentPapersCount: 25850,\n    mostCommonAnalysisTopics: ['Visual storytelling', 'Character transformation', 'Thematic elements', 'Shadow and light'],\n    teachingHoursAnnually: 820,\n    requiredForDegrees: ['MFA Directing', 'MFA Cinematography', 'MFA Screenwriting'],\n    teachingValue: 9.9,\n    preservationEfforts: 'Significant',\n    restorationPartnership: true\n}]->(g)"
2025-03-06 20:37:47,175 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (p))} {position: line: 14, column: 1, offset: 425} for query: "// Create cultural movement for Pulp Fiction\nCREATE (Independent90sCinema:CulturalMovement:GeneratedByClaudeAI {\n    name: '1990s Independent Cinema',\n    established: date('1989-01-15'),\n    influentialDirectors: 25,\n    internationalFestivals: 45,\n    majorAwards: 85,\n    criticalReception: 'Revolutionary',\n    geographicalSpread: 'Global',\n    periodStart: date('1989-01-15'),\n    periodPeak: date('1994-10-14'),\n    academicStudies: 350\n})\nWITH 1 as dummy\nMATCH (c:CulturalMovement:GeneratedByClaudeAI {name: '1990s Independent Cinema'}),\n      (p:Movie:GeneratedByClaudeAI {title: 'Pulp Fiction'})\nCREATE (c)-[:DEFINED_BY {\n    significanceRating: 9.8,\n    globalImpact: 'Transformative',\n    boxOfficeMultiplierEffect: 4.5,\n    independentFilmIncrease: 0.85,\n    subsequentDistributionDeals: 145,\n    academicAnalyses: 525,\n    filmSchoolAdoption: 'Immediate and canonical',\n    newFilmmakersInspired: 'Generation defining',\n    narrativeExperimentation: 'Widespread adoption',\n    dialogueRevolution: 'Industry-changing',\n    genreSubversionTechniques: 'Widely adopted'\n}]->(p)"
2025-03-06 20:37:47,192 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (t))} {position: line: 16, column: 1, offset: 535} for query: "// Create merchandising relationship\nCREATE (TitanicMerchandise:Merchandise:GeneratedByClaudeAI {\n    name: 'Heart of the Ocean Necklace Replica',\n    released: date('1998-01-10'),\n    manufacturer: 'J. Peterman Company',\n    manufacturerLocationLat: 38.0406,\n    manufacturerLocationLong: -84.5037,\n    retailPrice: 198.00,\n    priceCurrency: 'USD',\n    productionRun: 500000,\n    materialQuality: 'Mixed',\n    limitedEdition: false,\n    marketingTagline: 'Inspired by the film that captured the world\\'s heart',\n    collectorValue: 'Moderate'\n})\nWITH 1 as dummy\nMATCH (m:Merchandise:GeneratedByClaudeAI {name: 'Heart of the Ocean Necklace Replica'}),\n      (t:Movie:GeneratedByClaudeAI {title: 'Titanic'})\nCREATE (m)-[:DERIVED_FROM {\n    licensingDeal: date('1997-10-15'),\n    unitsSold: 385000,\n    geographicalDistribution: ['North America', 'Europe', 'Asia', 'Australia', 'South America'],\n    salesDistribution: [0.55, 0.25, 0.10, 0.05, 0.05],\n    retailersCarrying: 18500,\n    valentinesPeaks: 5,\n    anniversarySalesBumps: 3,\n    brandRecognition: 0.85,\n    merchandisingLongevity: '25+ years, still available',\n    collectibleStatus: 'Moderate',\n    reissueVersions: 3\n}]->(t)"
2025-03-06 20:37:47,217 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g2))} {position: line: 1, column: 9, offset: 8} for query: "// Connect Godfather 2 to existing people and studio\nMATCH \n  (f:Person:GeneratedByClaudeAI {name: 'Francis Ford Coppola'}),\n  (g2:Movie:GeneratedByClaudeAI {title: 'The Godfather: Part II'})\nCREATE (f)-[:DIRECTED {\n    year: 1974,\n    daysOnSet: 125,\n    satisfaction: 4.9,\n    awardNominations: 11,\n    awardWins: 6,\n    completionDate: date('1974-10-15'),\n    premiereEvent: datetime('1974-12-12T20:00:00-05:00'),\n    durationMonths: 5,\n    sequelPressure: 'Extreme',\n    creativeControl: 'Complete'\n}]->(g2)"
2025-03-06 20:37:47,228 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g2))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (a:Person:GeneratedByClaudeAI {name: 'Al Pacino'}),\n  (g2:Movie:GeneratedByClaudeAI {title: 'The Godfather: Part II'})\nCREATE (a)-[:ACTED_IN {\n    roles: ['Michael Corleone'],\n    salary: 500000,\n    screenTimeMinutes: 140,\n    startDate: date('1973-10-01'),\n    endDate: date('1974-03-15'),\n    scheduleConflicts: false,\n    criticScore: 99,\n    audienceScore: 96,\n    awardNominations: 4,\n    awardWins: 0,\n    characterEvolution: 'Significant darkness'\n}]->(g2)"
2025-03-06 20:37:47,240 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (g2))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (p:Studio:GeneratedByClaudeAI {name: 'Paramount Pictures'}),\n  (g2:Movie:GeneratedByClaudeAI {title: 'The Godfather: Part II'})\nCREATE (p)-[:PRODUCED {\n    investment: 13000000,\n    return: 93000000,\n    roi: 7.15,\n    contractSigned: date('1972-12-15'),\n    studioShare: 0.6,\n    directorShare: 0.2,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 4000000,\n    isProfitable: true,\n    marketingStart: datetime('1974-09-15T00:00:00Z'),\n    sequelStrategy: 'Quality over commercialism'\n}]->(g2)"
2025-03-06 20:37:47,258 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Connect Godfather 2 to awards\nMATCH\n  (g2:Movie:GeneratedByClaudeAI {title: 'The Godfather: Part II'}),\n  (a:Ceremony:GeneratedByClaudeAI {name: 'Academy Awards'})\nCREATE (g2)-[:NOMINATED_FOR {\n    category: 'Best Picture',\n    year: 1975,\n    ceremony: 47,\n    isWinner: true,\n    ceremonyDate: date('1975-04-08'),\n    announcementTime: localtime('21:45:00'),\n    votesFor: 4125,\n    votesAgainst: 1450,\n    historicalSignificance: 'First sequel to win Best Picture',\n    totalOscars: 6\n}]->(a)"
2025-03-06 20:37:47,293 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Connect Inception to Nolan, DiCaprio and Warner Bros\nMATCH \n  (c:Person:GeneratedByClaudeAI {name: 'Christopher Nolan'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (c)-[:DIRECTED {\n    year: 2010,\n    daysOnSet: 140,\n    satisfaction: 4.9,\n    awardNominations: 8,\n    awardWins: 4,\n    completionDate: date('2010-04-15'),\n    premiereEvent: datetime('2010-07-08T19:30:00+01:00'),\n    durationMonths: 6,\n    originalConcept: true,\n    scriptDevelopmentYears: 10\n}]->(i)"
2025-03-06 20:37:47,311 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (l:Person {name: 'Leonardo DiCaprio'}), // From original graph\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (l)-[:ACTED_IN {\n    roles: ['Dom Cobb'],\n    salary: 20000000,\n    screenTimeMinutes: 125,\n    startDate: date('2009-07-15'),\n    endDate: date('2009-12-22'),\n    scheduleConflicts: false,\n    criticScore: 95,\n    audienceScore: 93,\n    awardNominations: 6,\n    awardWins: 2,\n    psychologicalPreparation: 'Extensive'\n}]->(i)"
2025-03-06 20:37:47,328 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (w)-[:PRODUCED {\n    investment: 160000000,\n    return: 836800000,\n    roi: 5.23,\n    contractSigned: date('2008-12-01'),\n    studioShare: 0.6,\n    directorShare: 0.2,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 100000000,\n    isProfitable: true,\n    marketingStart: datetime('2010-01-15T00:00:00Z'),\n    marketingInnovation: 'Viral mystery campaign'\n}]->(i)"
2025-03-06 20:37:47,343 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "// Also connect Marion Cotillard and Cillian Murphy to Inception\nMATCH\n  (m:Person:GeneratedByClaudeAI {name: 'Marion Cotillard'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (m)-[:ACTED_IN {\n    roles: ['Mal Cobb'],\n    salary: 3500000,\n    screenTimeMinutes: 35,\n    startDate: date('2009-08-10'),\n    endDate: date('2009-11-15'),\n    scheduleConflicts: false,\n    criticScore: 96,\n    audienceScore: 94,\n    characterDepth: 'Psychological antagonist',\n    emotionalImpact: 'Haunting'\n}]->(i)"
2025-03-06 20:37:47,357 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (i))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (c:Person:GeneratedByClaudeAI {name: 'Cillian Murphy'}),\n  (i:Movie:GeneratedByClaudeAI {title: 'Inception'})\nCREATE (c)-[:ACTED_IN {\n    roles: ['Robert Fischer'],\n    salary: 2500000,\n    screenTimeMinutes: 42,\n    startDate: date('2009-08-05'),\n    endDate: date('2009-11-10'),\n    scheduleConflicts: false,\n    criticScore: 93,\n    audienceScore: 92,\n    characterComplexity: 'Target and protagonist',\n    reunionWithDirector: true\n}]->(i)"
2025-03-06 20:37:47,409 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "// Connect Aliens to James Cameron and 20th Century Fox\nMATCH \n  (j:Person:GeneratedByClaudeAI {name: 'James Cameron'}),\n  (a:Movie:GeneratedByClaudeAI {title: 'Aliens'})\nCREATE (j)-[:DIRECTED {\n    year: 1986,\n    daysOnSet: 96,\n    satisfaction: 4.7,\n    awardNominations: 7,\n    awardWins: 2,\n    completionDate: date('1986-04-30'),\n    premiereEvent: datetime('1986-07-14T19:30:00+01:00'),\n    durationMonths: 4,\n    studioConflicts: true,\n    directorStyleForming: 'Technical innovation with character depth'\n}]->(a)"
2025-03-06 20:37:47,421 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (a))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (t:Studio:GeneratedByClaudeAI {name: 'TwentiethCenturyFox'}),\n  (a:Movie:GeneratedByClaudeAI {title: 'Aliens'})\nCREATE (t)-[:PRODUCED {\n    investment: 18500000,\n    return: 183300000,\n    roi: 9.91,\n    contractSigned: date('1985-04-15'),\n    studioShare: 0.7,\n    directorShare: 0.15,\n    producerShare: 0.1,\n    topCastShare: 0.05,\n    marketingBudget: 10000000,\n    isProfitable: true,\n    marketingStart: datetime('1986-03-15T00:00:00Z'),\n    franchiseRevival: true\n}]->(a)"
2025-03-06 20:37:47,449 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (k))} {position: line: 1, column: 9, offset: 8} for query: "// Connect Kill Bill to Tarantino, Thurman and Miramax\nMATCH \n  (q:Person:GeneratedByClaudeAI {name: 'Quentin Tarantino'}),\n  (k:Movie:GeneratedByClaudeAI {title: 'Kill Bill: Vol. 1'})\nCREATE (q)-[:DIRECTED {\n    year: 2003,\n    daysOnSet: 110,\n    satisfaction: 4.9,\n    awardNominations: 5,\n    awardWins: 2,\n    completionDate: date('2003-06-30'),\n    premiereEvent: datetime('2003-09-29T19:00:00+02:00'),\n    durationMonths: 5,\n    genreBlending: 'Martial arts, spaghetti western, samurai',\n    homageLevel: 'Extensive'\n}]->(k)"
2025-03-06 20:37:47,459 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (k))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (u:Person:GeneratedByClaudeAI {name: 'Uma Thurman'}),\n  (k:Movie:GeneratedByClaudeAI {title: 'Kill Bill: Vol. 1'})\nCREATE (u)-[:ACTED_IN {\n    roles: ['The Bride/Beatrix Kiddo'],\n    salary: 12000000,\n    screenTimeMinutes: 95,\n    startDate: date('2002-06-30'),\n    endDate: date('2002-11-25'),\n    scheduleConflicts: false,\n    criticScore: 97,\n    audienceScore: 94,\n    awardNominations: 4,\n    awardWins: 1,\n    martialArtsTraining: 'Intensive 3-month program',\n    characterIconicity: 'Instant classic'\n}]->(k)"
2025-03-06 20:37:47,470 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (k))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (m:Studio:GeneratedByClaudeAI {name: 'Miramax Films'}),\n  (k:Movie:GeneratedByClaudeAI {title: 'Kill Bill: Vol. 1'})\nCREATE (m)-[:PRODUCED {\n    investment: 30000000,\n    return: 180900000,\n    roi: 6.03,\n    contractSigned: date('2001-12-15'),\n    studioShare: 0.55,\n    directorShare: 0.25,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 25000000,\n    isProfitable: true,\n    marketingStart: datetime('2003-05-15T00:00:00Z'),\n    twoPartRelease: true\n}]->(k)"
2025-03-06 20:37:47,499 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (m))} {position: line: 1, column: 9, offset: 8} for query: "// Connect The Matrix to existing studios and new actors\nMATCH\n  (w:Studio:GeneratedByClaudeAI {name: 'Warner Bros. Pictures'}),\n  (m:Movie:GeneratedByClaudeAI {title: 'The Matrix'})\nCREATE (w)-[:PRODUCED {\n    investment: 63000000,\n    return: 463517383,\n    roi: 7.36,\n    contractSigned: date('1997-08-15'),\n    studioShare: 0.7,\n    directorShare: 0.1,\n    producerShare: 0.1,\n    topCastShare: 0.1,\n    marketingBudget: 45000000,\n    isProfitable: true,\n    marketingStart: datetime('1999-01-15T00:00:00Z'),\n    riskAssessment: 'High',\n    gamblePayoff: 'Extraordinary'\n}]->(m)"
2025-03-06 20:37:47,522 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (m))} {position: line: 1, column: 9, offset: 8} for query: "MATCH\n  (k:Person:GeneratedByClaudeAI {name: 'Keanu Reeves'}),\n  (m:Movie:GeneratedByClaudeAI {title: 'The Matrix'})\nCREATE (k)-[:ACTED_IN {\n    roles: ['Neo'],\n    salary: 10000000,\n    screenTimeMinutes: 112,\n    startDate: date('1998-03-31'),\n    endDate: date('1998-08-25'),\n    scheduleConflicts: false,\n    criticScore: 96,\n    audienceScore: 95,\n    martialArtsTraining: '4 months intensive',\n    stuntPercentage: 80,\n    careerDefiningRole: true\n}]->(m)"
2025-03-06 20:37:47,533 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.CartesianProductWarning} {category: } {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (h))} {position: line: 1, column: 9, offset: 8} for query: "// Add a connection between Keanu and Hugo Weaving from the original graph\nMATCH\n  (k:Person:GeneratedByClaudeAI {name: 'Keanu Reeves'}),\n  (h:Person {name: 'Hugo Weaving'}) // From original graph\nCREATE (k)-[:WORKED_WITH {\n    projects: 4,\n    firstProject: 'The Matrix',\n    firstYear: 1999,\n    chemistry: 4.8,\n    interviews: 35,\n    relationship: 'Co-stars',\n    iconic_confrontations: 'Multiple',\n    screen_fights: 12\n}]->(h)"
2025-03-06 20:37:47,549 - Neo4jIngestor - ERROR - Error executing ./step1-create-movie-graph.cql: {code: Neo.ClientError.Statement.SyntaxError} {message: Invalid input '-': expected ":" (line 2708, column 8 (offset: 112594))
"    lab-studio_relationship: 'Long-standing Paramount account',"
        ^}
2025-03-06 20:37:47,553 - Neo4jIngestor - INFO - Closing Neo4j connection
2025-03-06 20:39:25,739 - Neo4jIngestor - INFO - Connecting to Neo4j at bolt://localhost:7687
2025-03-06 20:39:25,739 - Neo4jIngestor - INFO - Processing all CQL files in .
2025-03-06 20:39:25,739 - Neo4jIngestor - INFO - Scanning directory: .
2025-03-06 20:39:25,739 - Neo4jIngestor - INFO - Found 2 CQL files
2025-03-06 20:39:25,739 - Neo4jIngestor - INFO - Building dependency graph
2025-03-06 20:39:25,739 - Neo4jIngestor - INFO - Analyzing file: ./step1-create-movie-graph.cql
2025-03-06 20:39:25,768 - Neo4jIngestor - INFO - Analyzing file: ./enhanced-movie-graph.cql
2025-03-06 20:39:25,797 - Neo4jIngestor - INFO - Dependency graph built with 2 nodes and 0 edges
2025-03-06 20:39:25,797 - Neo4jIngestor - INFO - Determining execution order
2025-03-06 20:39:25,797 - Neo4jIngestor - INFO - Execution order determined: 2 files
2025-03-06 20:39:25,797 - Neo4jIngestor - INFO - Executing: ./step1-create-movie-graph.cql
2025-03-06 20:39:27,613 - Neo4jIngestor - ERROR - Error executing ./step1-create-movie-graph.cql: {code: Neo.ClientError.Statement.SyntaxError} {message: Invalid input '-': expected ":" (line 2708, column 8 (offset: 112594))
"    lab-studio_relationship: 'Long-standing Paramount account',"
        ^}
2025-03-06 20:39:27,620 - Neo4jIngestor - INFO - Closing Neo4j connection
2025-03-06 20:40:37,007 - Neo4jIngestor - INFO - Connecting to Neo4j at bolt://localhost:7687
2025-03-06 20:40:37,007 - Neo4jIngestor - INFO - Processing all CQL files in .
2025-03-06 20:40:37,007 - Neo4jIngestor - INFO - Scanning directory: .
2025-03-06 20:40:37,007 - Neo4jIngestor - INFO - Found 2 CQL files
2025-03-06 20:40:37,007 - Neo4jIngestor - INFO - Building dependency graph
2025-03-06 20:40:37,007 - Neo4jIngestor - INFO - Analyzing file: ./step1-create-movie-graph.cql
2025-03-06 20:40:37,038 - Neo4jIngestor - INFO - Analyzing file: ./enhanced-movie-graph.cql
2025-03-06 20:40:37,067 - Neo4jIngestor - INFO - Dependency graph built with 2 nodes and 0 edges
2025-03-06 20:40:37,067 - Neo4jIngestor - INFO - Determining execution order
2025-03-06 20:40:37,067 - Neo4jIngestor - INFO - Execution order determined: 2 files
2025-03-06 20:40:37,067 - Neo4jIngestor - INFO - Executing: ./step1-create-movie-graph.cql
2025-03-06 20:40:39,018 - Neo4jIngestor - ERROR - Error executing ./step1-create-movie-graph.cql: {code: Neo.ClientError.Statement.SyntaxError} {message: Invalid input '-': expected ":" (line 2708, column 8 (offset: 112594))
"    lab-studio_relationship: 'Long-standing Paramount account',"
        ^}
2025-03-06 20:40:39,025 - Neo4jIngestor - INFO - Closing Neo4j connection
2025-03-06 20:41:10,514 - Neo4jIngestor - INFO - Connecting to Neo4j at bolt://localhost:7687
2025-03-06 20:41:10,514 - Neo4jIngestor - INFO - Processing all CQL files in .
2025-03-06 20:41:10,514 - Neo4jIngestor - INFO - Scanning directory: .
2025-03-06 20:41:10,514 - Neo4jIngestor - INFO - Found 1 CQL files
2025-03-06 20:41:10,514 - Neo4jIngestor - INFO - Building dependency graph
2025-03-06 20:41:10,514 - Neo4jIngestor - INFO - Analyzing file: ./enhanced-movie-graph.cql
2025-03-06 20:41:10,544 - Neo4jIngestor - INFO - Dependency graph built with 1 nodes and 0 edges
2025-03-06 20:41:10,544 - Neo4jIngestor - INFO - Determining execution order
2025-03-06 20:41:10,544 - Neo4jIngestor - INFO - Execution order determined: 1 files
2025-03-06 20:41:10,544 - Neo4jIngestor - INFO - Executing: ./enhanced-movie-graph.cql
2025-03-06 20:41:14,162 - Neo4jIngestor - ERROR - Error executing ./enhanced-movie-graph.cql: {code: Neo.ClientError.Statement.SyntaxError} {message: Invalid input '-': expected ":" (line 2708, column 8 (offset: 112594))
"    lab-studio_relationship: 'Long-standing Paramount account',"
        ^}
2025-03-06 20:41:14,168 - Neo4jIngestor - INFO - Closing Neo4j connection
2025-03-06 20:45:18,952 - Neo4jIngestor - INFO - Connecting to Neo4j at bolt://localhost:7687
2025-03-06 20:45:18,953 - Neo4jIngestor - INFO - Processing all CQL files in .
2025-03-06 20:45:18,953 - Neo4jIngestor - INFO - Scanning directory: .
2025-03-06 20:45:18,953 - Neo4jIngestor - INFO - Found 1 CQL files
2025-03-06 20:45:18,953 - Neo4jIngestor - INFO - Building dependency graph
2025-03-06 20:45:18,953 - Neo4jIngestor - INFO - Analyzing file: ./enhanced-movie-graph.cql
2025-03-06 20:45:18,983 - Neo4jIngestor - INFO - Dependency graph built with 1 nodes and 0 edges
2025-03-06 20:45:18,984 - Neo4jIngestor - INFO - Determining execution order
2025-03-06 20:45:18,984 - Neo4jIngestor - INFO - Execution order determined: 1 files
2025-03-06 20:45:18,984 - Neo4jIngestor - INFO - Executing: ./enhanced-movie-graph.cql
2025-03-06 20:45:22,156 - Neo4jIngestor - ERROR - Error executing ./enhanced-movie-graph.cql: {code: Neo.ClientError.Statement.SyntaxError} {message: Expected exactly one statement per query but got: 118 (line 1, column 0 (offset: 38))
"CREATE (SenseAndSensibility:Movie:GeneratedByClaudeAI {"
 ^}
2025-03-06 20:45:22,164 - Neo4jIngestor - INFO - Closing Neo4j connection
