"""
Compass - Pattern Discovery and Guidance Tool

This application implements the "Compass" pattern for guided graph exploration:
- Pattern discovery through systematic exploration
- Automated guidance for data navigation
- Direction-finding in complex datasets
- Guided learning and discovery workflows

The Compass tool helps users discover patterns in their data through systematic
exploration and automated guidance, like a compass pointing the way to hidden treasures.

Dependencies:
- Flask
- A middleware module generated by the module generator (imported as 'graph_middleware')

Author: H.A.R.B.O.R. Project Team
Version: 1.0
"""

import os
import json
import time
import datetime
import functools
from urllib.parse import quote, unquote
from flask import Flask, request, render_template_string, redirect, url_for, session, flash, Response, g

# Import the middleware generated by the module generator
try:
    import newgraph as gm
except ImportError:
    print("ERROR: Could not import graph middleware. Make sure you've generated it using the module generator.")
    print("Example: python modulegenerator-claude.py -u 'bolt://localhost:7687' -n 'neo4j' -p 'password' -g 'newgraph'")
    raise

# Initialize Flask app
app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY', 'compass-secret-key-change-in-production')

# Global middleware reference
middleware = gm

# Activity logging
def log_activity(activity_type, details=None):
    """Log user activity for analytics and guidance."""
    timestamp = datetime.datetime.now().isoformat()
    log_entry = {
        'timestamp': timestamp,
        'activity': activity_type,
        'details': details or {},
        'session_id': session.get('session_id', 'unknown')
    }
    
    # In a production environment, this would go to a proper logging system
    print(f"COMPASS ACTIVITY: {json.dumps(log_entry)}")

# Authentication decorator
def login_required(f):
    @functools.wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            # For demo purposes, auto-login
            session['user_id'] = 'demo_user'
            session['session_id'] = f"session_{int(time.time())}"
        return f(*args, **kwargs)
    return decorated_function

# Helper functions
def get_node_display_name(node):
    """Get a human-readable name for a node."""
    props = node.get('props', {})
    
    # Try common name properties
    for name_prop in ['name', 'title', 'label', 'display_name']:
        if name_prop in props:
            return str(props[name_prop])
    
    # Fall back to truncated UUID
    return node.get('uuid', 'Unknown')[:8] + '...'

def format_property_value(value):
    """Format a property value for display."""
    if value is None:
        return "null"
    elif isinstance(value, (list, dict)):
        return json.dumps(value, indent=2)
    elif isinstance(value, str) and len(value) > 100:
        return value[:100] + "..."
    else:
        return str(value)

def get_relationship_display(relationship):
    """Create a user-friendly display string for a relationship."""
    rel_type = relationship.get('type', '')
    props = relationship.get('relationship', {}).get('props', {})
    
    # Add key properties to the display if they exist
    property_text = ''
    for key_prop in ['since', 'role', 'year', 'weight']:
        if key_prop in props:
            property_text = f" ({key_prop}: {props[key_prop]})"
            break
    
    return f"{rel_type}{property_text}"

# Pattern discovery functions
def discover_common_patterns():
    """Discover common patterns in the graph data."""
    patterns = []
    
    try:
        # Get node labels and their frequencies
        node_labels = middleware.get_node_labels()
        for label in node_labels:
            nodes = middleware.get_nodes_by_label(label)
            patterns.append({
                'type': 'node_label',
                'name': label,
                'count': len(nodes),
                'description': f"Found {len(nodes)} nodes with label '{label}'"
            })
        
        # Get relationship types and their frequencies
        relationship_types = middleware.get_relationship_types()
        for rel_type in relationship_types:
            # This would need to be implemented in the middleware
            patterns.append({
                'type': 'relationship_type',
                'name': rel_type,
                'description': f"Relationship type '{rel_type}' exists in the graph"
            })
        
        # Discover high-degree nodes (hubs)
        for label in node_labels[:5]:  # Limit to first 5 labels
            try:
                nodes = middleware.get_nodes_by_label(label)
                if nodes:
                    # Find nodes with many connections
                    hub_nodes = []
                    for node in nodes[:10]:  # Check first 10 nodes
                        try:
                            incoming = middleware.get_incoming_relationships(node['uuid'])
                            outgoing = middleware.get_outgoing_relationships(node['uuid'])
                            total_connections = len(incoming) + len(outgoing)
                            
                            if total_connections > 5:  # Threshold for "hub"
                                hub_nodes.append({
                                    'node': node,
                                    'connections': total_connections,
                                    'incoming': len(incoming),
                                    'outgoing': len(outgoing)
                                })
                        except Exception:
                            continue
                    
                    if hub_nodes:
                        patterns.append({
                            'type': 'hub_nodes',
                            'label': label,
                            'nodes': hub_nodes,
                            'description': f"Found {len(hub_nodes)} hub nodes in '{label}'"
                        })
            except Exception:
                continue
                
    except Exception as e:
        print(f"Error discovering patterns: {e}")
    
    return patterns

def generate_exploration_paths():
    """Generate suggested exploration paths based on discovered patterns."""
    paths = []
    
    try:
        # Get some sample nodes to create exploration paths
        node_labels = middleware.get_node_labels()
        
        for label in node_labels[:3]:  # Limit to first 3 labels
            try:
                nodes = middleware.get_nodes_by_label(label)
                if nodes:
                    sample_node = nodes[0]
                    paths.append({
                        'name': f"Explore {label}",
                        'description': f"Start with {get_node_display_name(sample_node)} and discover connections",
                        'starting_point': {
                            'label': label,
                            'node_id': sample_node['uuid'],
                            'display_name': get_node_display_name(sample_node)
                        },
                        'pattern': 'beacon'  # Entity-first navigation
                    })
            except Exception:
                continue
        
        # Add schema-based exploration path
        paths.append({
            'name': "Schema Overview",
            'description': "Start with the database structure and explore systematically",
            'starting_point': {
                'type': 'schema',
                'description': 'Database schema overview'
            },
            'pattern': 'anchor'  # Schema-first navigation
        })
        
    except Exception as e:
        print(f"Error generating exploration paths: {e}")
    
    return paths

# -----------------------------------------------------------------------------
# Compass Routes (Pattern Discovery and Guidance)
# -----------------------------------------------------------------------------

@app.route('/')
@login_required
def index():
    """
    Main compass dashboard that provides guidance and pattern discovery.
    """
    log_activity('view_compass_dashboard')
    
    try:
        # Discover patterns in the data
        patterns = discover_common_patterns()
        
        # Generate exploration paths
        exploration_paths = generate_exploration_paths()
        
        # Get basic schema information
        node_labels = middleware.get_node_labels()
        relationship_types = middleware.get_relationship_types()
        
        return render_template_string('''
            <!DOCTYPE html>
            <html>
            <head>
                <title>Compass - Pattern Discovery and Guidance</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                    .container { max-width: 1200px; margin: 0 auto; }
                    .header { background: #1e3a8a; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                    .card { background: white; border: 1px solid #ddd; padding: 20px; margin: 10px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                    .navigation { background: #f8f9fa; padding: 15px; margin-bottom: 20px; border-radius: 8px; }
                    .navigation a { margin-right: 15px; text-decoration: none; color: #1e3a8a; font-weight: bold; }
                    .navigation a:hover { text-decoration: underline; }
                    .pattern-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
                    .pattern-card { background: #f0f9ff; border-left: 4px solid #1e3a8a; }
                    .path-card { background: #fef3c7; border-left: 4px solid #d97706; }
                    .metric { text-align: center; padding: 10px; }
                    .metric-number { font-size: 2em; font-weight: bold; color: #1e3a8a; }
                    .metric-label { color: #666; }
                    .btn { display: inline-block; padding: 10px 20px; background: #1e3a8a; color: white; text-decoration: none; border-radius: 5px; margin: 5px; }
                    .btn:hover { background: #1e40af; }
                    .btn-secondary { background: #6b7280; }
                    .btn-secondary:hover { background: #4b5563; }
                    .compass-icon { font-size: 2em; margin-right: 10px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1><span class="compass-icon">🧭</span>Compass - Pattern Discovery and Guidance</h1>
                        <p>Navigate your graph data with intelligent pattern discovery and guided exploration</p>
                    </div>
                    
                    <div class="navigation">
                        <a href="{{ url_for('index') }}">Dashboard</a> |
                        <a href="{{ url_for('patterns') }}">Pattern Discovery</a> |
                        <a href="{{ url_for('exploration_paths') }}">Exploration Paths</a> |
                        <a href="{{ url_for('guidance') }}">Guidance</a>
                    </div>
                    
                    <div class="card">
                        <h2>🧭 Compass Overview</h2>
                        <p>Compass helps you discover patterns in your graph data and provides guided exploration paths. Like a compass pointing to hidden treasures, this tool illuminates the structure and relationships in your data.</p>
                        
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0;">
                            <div class="metric">
                                <div class="metric-number">{{ node_labels|length }}</div>
                                <div class="metric-label">Node Types</div>
                            </div>
                            <div class="metric">
                                <div class="metric-number">{{ relationship_types|length }}</div>
                                <div class="metric-label">Relationship Types</div>
                            </div>
                            <div class="metric">
                                <div class="metric-number">{{ patterns|length }}</div>
                                <div class="metric-label">Patterns Discovered</div>
                            </div>
                            <div class="metric">
                                <div class="metric-number">{{ exploration_paths|length }}</div>
                                <div class="metric-label">Exploration Paths</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card">
                        <h2>🔍 Recent Pattern Discoveries</h2>
                        <div class="pattern-grid">
                            {% for pattern in patterns[:6] %}
                            <div class="card pattern-card">
                                <h3>{{ pattern.name if pattern.name else pattern.type.title() }}</h3>
                                <p>{{ pattern.description }}</p>
                                {% if pattern.count %}
                                <p><strong>Count:</strong> {{ pattern.count }}</p>
                                {% endif %}
                            </div>
                            {% endfor %}
                        </div>
                        <a href="{{ url_for('patterns') }}" class="btn">View All Patterns</a>
                    </div>
                    
                    <div class="card">
                        <h2>🗺️ Suggested Exploration Paths</h2>
                        <div class="pattern-grid">
                            {% for path in exploration_paths[:4] %}
                            <div class="card path-card">
                                <h3>{{ path.name }}</h3>
                                <p>{{ path.description }}</p>
                                <p><strong>Pattern:</strong> {{ path.pattern.title() }}</p>
                                <a href="{{ url_for('follow_path', path_index=loop.index0) }}" class="btn">Follow Path</a>
                            </div>
                            {% endfor %}
                        </div>
                        <a href="{{ url_for('exploration_paths') }}" class="btn">View All Paths</a>
                    </div>
                    
                    <div class="card">
                        <h2>🧭 Quick Actions</h2>
                        <a href="{{ url_for('schema_overview') }}" class="btn">⚓ Anchor: Schema Overview</a>
                        <a href="{{ url_for('random_exploration') }}" class="btn">🔦 Beacon: Random Exploration</a>
                        <a href="{{ url_for('pattern_analysis') }}" class="btn">🔍 Pattern Analysis</a>
                        <a href="{{ url_for('guidance') }}" class="btn">🧭 Get Guidance</a>
                    </div>
                </div>
            </body>
            </html>
        ''', patterns=patterns, exploration_paths=exploration_paths, node_labels=node_labels, relationship_types=relationship_types)
        
    except Exception as e:
        flash(f"Error loading compass dashboard: {str(e)}", "error")
        return render_template_string('<h1>Error</h1><p>Could not load compass dashboard.</p>')

@app.route('/patterns')
@login_required
def patterns():
    """
    Detailed pattern discovery view.
    """
    log_activity('view_patterns')
    
    try:
        patterns = discover_common_patterns()
        
        return render_template_string('''
            <!DOCTYPE html>
            <html>
            <head>
                <title>Pattern Discovery - Compass</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                    .container { max-width: 1200px; margin: 0 auto; }
                    .header { background: #1e3a8a; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                    .card { background: white; border: 1px solid #ddd; padding: 20px; margin: 10px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                    .navigation { background: #f8f9fa; padding: 15px; margin-bottom: 20px; border-radius: 8px; }
                    .navigation a { margin-right: 15px; text-decoration: none; color: #1e3a8a; font-weight: bold; }
                    .pattern-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
                    .pattern-card { background: #f0f9ff; border-left: 4px solid #1e3a8a; }
                    .btn { display: inline-block; padding: 10px 20px; background: #1e3a8a; color: white; text-decoration: none; border-radius: 5px; margin: 5px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>🔍 Pattern Discovery</h1>
                        <p>Discover patterns and insights in your graph data</p>
                    </div>
                    
                    <div class="navigation">
                        <a href="{{ url_for('index') }}">Dashboard</a> |
                        <a href="{{ url_for('patterns') }}">Pattern Discovery</a> |
                        <a href="{{ url_for('exploration_paths') }}">Exploration Paths</a> |
                        <a href="{{ url_for('guidance') }}">Guidance</a>
                    </div>
                    
                    <div class="card">
                        <h2>Discovered Patterns</h2>
                        <div class="pattern-grid">
                            {% for pattern in patterns %}
                            <div class="card pattern-card">
                                <h3>{{ pattern.name if pattern.name else pattern.type.title() }}</h3>
                                <p>{{ pattern.description }}</p>
                                {% if pattern.count %}
                                <p><strong>Count:</strong> {{ pattern.count }}</p>
                                {% endif %}
                                {% if pattern.nodes %}
                                <p><strong>Hub Nodes:</strong> {{ pattern.nodes|length }}</p>
                                {% endif %}
                            </div>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </body>
            </html>
        ''', patterns=patterns)
        
    except Exception as e:
        flash(f"Error loading patterns: {str(e)}", "error")
        return redirect(url_for('index'))

@app.route('/exploration-paths')
@login_required
def exploration_paths():
    """
    View all available exploration paths.
    """
    log_activity('view_exploration_paths')
    
    try:
        paths = generate_exploration_paths()
        
        return render_template_string('''
            <!DOCTYPE html>
            <html>
            <head>
                <title>Exploration Paths - Compass</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                    .container { max-width: 1200px; margin: 0 auto; }
                    .header { background: #1e3a8a; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                    .card { background: white; border: 1px solid #ddd; padding: 20px; margin: 10px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                    .navigation { background: #f8f9fa; padding: 15px; margin-bottom: 20px; border-radius: 8px; }
                    .navigation a { margin-right: 15px; text-decoration: none; color: #1e3a8a; font-weight: bold; }
                    .path-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
                    .path-card { background: #fef3c7; border-left: 4px solid #d97706; }
                    .btn { display: inline-block; padding: 10px 20px; background: #1e3a8a; color: white; text-decoration: none; border-radius: 5px; margin: 5px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>🗺️ Exploration Paths</h1>
                        <p>Guided paths for exploring your graph data</p>
                    </div>
                    
                    <div class="navigation">
                        <a href="{{ url_for('index') }}">Dashboard</a> |
                        <a href="{{ url_for('patterns') }}">Pattern Discovery</a> |
                        <a href="{{ url_for('exploration_paths') }}">Exploration Paths</a> |
                        <a href="{{ url_for('guidance') }}">Guidance</a>
                    </div>
                    
                    <div class="card">
                        <h2>Available Paths</h2>
                        <div class="path-grid">
                            {% for path in paths %}
                            <div class="card path-card">
                                <h3>{{ path.name }}</h3>
                                <p>{{ path.description }}</p>
                                <p><strong>Pattern:</strong> {{ path.pattern.title() }}</p>
                                <a href="{{ url_for('follow_path', path_index=loop.index0) }}" class="btn">Follow Path</a>
                            </div>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </body>
            </html>
        ''', paths=paths)
        
    except Exception as e:
        flash(f"Error loading exploration paths: {str(e)}", "error")
        return redirect(url_for('index'))

@app.route('/follow-path/<int:path_index>')
@login_required
def follow_path(path_index):
    """
    Follow a specific exploration path.
    """
    log_activity('follow_path', {'path_index': path_index})
    
    try:
        paths = generate_exploration_paths()
        
        if path_index >= len(paths):
            flash("Invalid path index", "error")
            return redirect(url_for('exploration_paths'))
        
        path = paths[path_index]
        
        # Redirect based on path type
        if path['pattern'] == 'anchor':
            return redirect(url_for('schema_overview'))
        elif path['pattern'] == 'beacon':
            if 'starting_point' in path and 'node_id' in path['starting_point']:
                return redirect(url_for('view_node', 
                                      label=path['starting_point']['label'], 
                                      node_id=path['starting_point']['node_id']))
            else:
                return redirect(url_for('random_exploration'))
        
    except Exception as e:
        flash(f"Error following path: {str(e)}", "error")
        return redirect(url_for('exploration_paths'))

@app.route('/schema')
@login_required
def schema_overview():
    """
    Schema overview (Anchor pattern entry point).
    """
    log_activity('view_schema')
    
    try:
        node_labels = middleware.get_node_labels()
        relationship_types = middleware.get_relationship_types()
        
        return render_template_string('''
            <!DOCTYPE html>
            <html>
            <head>
                <title>Schema Overview - Compass</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                    .container { max-width: 1200px; margin: 0 auto; }
                    .header { background: #1e3a8a; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                    .card { background: white; border: 1px solid #ddd; padding: 20px; margin: 10px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                    .navigation { background: #f8f9fa; padding: 15px; margin-bottom: 20px; border-radius: 8px; }
                    .navigation a { margin-right: 15px; text-decoration: none; color: #1e3a8a; font-weight: bold; }
                    .btn { display: inline-block; padding: 10px 20px; background: #1e3a8a; color: white; text-decoration: none; border-radius: 5px; margin: 5px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>⚓ Schema Overview</h1>
                        <p>Anchor pattern: Start with the database structure</p>
                    </div>
                    
                    <div class="navigation">
                        <a href="{{ url_for('index') }}">Dashboard</a> |
                        <a href="{{ url_for('patterns') }}">Pattern Discovery</a> |
                        <a href="{{ url_for('exploration_paths') }}">Exploration Paths</a> |
                        <a href="{{ url_for('guidance') }}">Guidance</a>
                    </div>
                    
                    <div class="card">
                        <h2>Node Labels</h2>
                        <ul>
                            {% for label in node_labels %}
                            <li><a href="/labels/{{ label }}" class="btn">{{ label }}</a></li>
                            {% endfor %}
                        </ul>
                    </div>
                    
                    <div class="card">
                        <h2>Relationship Types</h2>
                        <ul>
                            {% for rel_type in relationship_types %}
                            <li>{{ rel_type }}</li>
                            {% endfor %}
                        </ul>
                    </div>
                </div>
            </body>
            </html>
        ''', node_labels=node_labels, relationship_types=relationship_types)
        
    except Exception as e:
        flash(f"Error loading schema: {str(e)}", "error")
        return redirect(url_for('index'))

@app.route('/random-exploration')
@login_required
def random_exploration():
    """
    Random exploration (Beacon pattern entry point).
    """
    log_activity('random_exploration')
    
    try:
        # Get a random node to start exploration
        node_labels = middleware.get_node_labels()
        if node_labels:
            label = node_labels[0]
            nodes = middleware.get_nodes_by_label(label)
            if nodes:
                random_node = nodes[0]
                return redirect(url_for('view_node', 
                                      label=label, 
                                      node_id=random_node['uuid']))
        
        flash("No nodes found for exploration", "error")
        return redirect(url_for('index'))
        
    except Exception as e:
        flash(f"Error starting random exploration: {str(e)}", "error")
        return redirect(url_for('index'))

@app.route('/view-node/<label>/<node_id>')
@login_required
def view_node(label, node_id):
    """
    View a specific node and its relationships (Beacon pattern).
    """
    log_activity('view_node', {'label': label, 'node_id': node_id})
    
    try:
        # Find the specific node by ID
        node = middleware.get_node_by_id(label, node_id)
        
        if not node:
            flash(f"Node not found: {node_id}", "error")
            return redirect(url_for('index'))
        
        # Find all relationships connected to this node
        incoming_relationships = middleware.get_incoming_relationships(node_id)
        outgoing_relationships = middleware.get_outgoing_relationships(node_id)
        
        return render_template_string('''
            <!DOCTYPE html>
            <html>
            <head>
                <title>{{ get_node_display_name(node) }} - Compass</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                    .container { max-width: 1200px; margin: 0 auto; }
                    .header { background: #1e3a8a; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                    .card { background: white; border: 1px solid #ddd; padding: 20px; margin: 10px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                    .navigation { background: #f8f9fa; padding: 15px; margin-bottom: 20px; border-radius: 8px; }
                    .navigation a { margin-right: 15px; text-decoration: none; color: #1e3a8a; font-weight: bold; }
                    .btn { display: inline-block; padding: 10px 20px; background: #1e3a8a; color: white; text-decoration: none; border-radius: 5px; margin: 5px; }
                    table { width: 100%; border-collapse: collapse; margin: 10px 0; }
                    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                    th { background-color: #f2f2f2; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>🔦 {{ get_node_display_name(node) }}</h1>
                        <p>Beacon pattern: Explore connections and relationships</p>
                    </div>
                    
                    <div class="navigation">
                        <a href="{{ url_for('index') }}">Dashboard</a> |
                        <a href="{{ url_for('patterns') }}">Pattern Discovery</a> |
                        <a href="{{ url_for('exploration_paths') }}">Exploration Paths</a> |
                        <a href="{{ url_for('guidance') }}">Guidance</a>
                    </div>
                    
                    <div class="card">
                        <h2>Node Properties</h2>
                        <table>
                            <tbody>
                                {% for key, value in node.props.items() %}
                                <tr>
                                    <th>{{ key }}</th>
                                    <td>{{ format_property_value(value) }}</td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    
                    {% if outgoing_relationships %}
                    <div class="card">
                        <h2>Outgoing Relationships ({{ outgoing_relationships|length }})</h2>
                        <table>
                            <thead>
                                <tr>
                                    <th>Relationship</th>
                                    <th>To</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for relationship in outgoing_relationships %}
                                <tr>
                                    <td>{{ get_relationship_display(relationship) }}</td>
                                    <td>{{ get_node_display_name(relationship.target) }}</td>
                                    <td>
                                        <a href="{{ url_for('view_node', label=relationship.target.labels[0], node_id=relationship.target.uuid) }}" class="btn">View</a>
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    {% endif %}
                    
                    {% if incoming_relationships %}
                    <div class="card">
                        <h2>Incoming Relationships ({{ incoming_relationships|length }})</h2>
                        <table>
                            <thead>
                                <tr>
                                    <th>From</th>
                                    <th>Relationship</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for relationship in incoming_relationships %}
                                <tr>
                                    <td>{{ get_node_display_name(relationship.source) }}</td>
                                    <td>{{ get_relationship_display(relationship) }}</td>
                                    <td>
                                        <a href="{{ url_for('view_node', label=relationship.source.labels[0], node_id=relationship.source.uuid) }}" class="btn">View</a>
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    {% endif %}
                </div>
            </body>
            </html>
        ''', node=node, label=label, incoming_relationships=incoming_relationships, outgoing_relationships=outgoing_relationships, get_node_display_name=get_node_display_name, format_property_value=format_property_value, get_relationship_display=get_relationship_display)
        
    except Exception as e:
        flash(f"Error viewing node: {str(e)}", "error")
        return redirect(url_for('index'))

@app.route('/guidance')
@login_required
def guidance():
    """
    Get guidance for data exploration.
    """
    log_activity('get_guidance')
    
    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <title>Guidance - Compass</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; }
                .header { background: #1e3a8a; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                .card { background: white; border: 1px solid #ddd; padding: 20px; margin: 10px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .navigation { background: #f8f9fa; padding: 15px; margin-bottom: 20px; border-radius: 8px; }
                .navigation a { margin-right: 15px; text-decoration: none; color: #1e3a8a; font-weight: bold; }
                .guidance-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
                .guidance-card { background: #f0f9ff; border-left: 4px solid #1e3a8a; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>🧭 Exploration Guidance</h1>
                    <p>Get guidance for exploring your graph data</p>
                </div>
                
                <div class="navigation">
                    <a href="{{ url_for('index') }}">Dashboard</a> |
                    <a href="{{ url_for('patterns') }}">Pattern Discovery</a> |
                    <a href="{{ url_for('exploration_paths') }}">Exploration Paths</a> |
                    <a href="{{ url_for('guidance') }}">Guidance</a>
                </div>
                
                <div class="card">
                    <h2>Navigation Patterns</h2>
                    <div class="guidance-grid">
                        <div class="card guidance-card">
                            <h3>⚓ Anchor Pattern</h3>
                            <p>Start with the database schema and drill down to specific instances. Best for understanding data structure and systematic exploration.</p>
                            <ul>
                                <li>Begin with schema overview</li>
                                <li>Explore node types</li>
                                <li>Drill down to instances</li>
                                <li>Systematic, predictable navigation</li>
                            </ul>
                        </div>
                        <div class="card guidance-card">
                            <h3>🔦 Beacon Pattern</h3>
                            <p>Start with specific entities and illuminate connections between them. Best for discovery and exploratory navigation.</p>
                            <ul>
                                <li>Choose a starting entity</li>
                                <li>Explore connections</li>
                                <li>Navigate to related entities</li>
                                <li>Discover unexpected relationships</li>
                            </ul>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <h2>Exploration Tips</h2>
                    <ul>
                        <li><strong>Start Simple:</strong> Begin with the schema overview to understand your data structure</li>
                        <li><strong>Follow Patterns:</strong> Use discovered patterns to guide your exploration</li>
                        <li><strong>Mix Approaches:</strong> Combine Anchor and Beacon patterns for comprehensive exploration</li>
                        <li><strong>Take Notes:</strong> Document interesting discoveries and patterns</li>
                        <li><strong>Ask Questions:</strong> Formulate specific questions about your data</li>
                    </ul>
                </div>
            </div>
        </body>
        </html>
    ''')

@app.route('/pattern-analysis')
@login_required
def pattern_analysis():
    """
    Advanced pattern analysis.
    """
    log_activity('pattern_analysis')
    
    try:
        patterns = discover_common_patterns()
        
        return render_template_string('''
            <!DOCTYPE html>
            <html>
            <head>
                <title>Pattern Analysis - Compass</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                    .container { max-width: 1200px; margin: 0 auto; }
                    .header { background: #1e3a8a; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                    .card { background: white; border: 1px solid #ddd; padding: 20px; margin: 10px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                    .navigation { background: #f8f9fa; padding: 15px; margin-bottom: 20px; border-radius: 8px; }
                    .navigation a { margin-right: 15px; text-decoration: none; color: #1e3a8a; font-weight: bold; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>🔍 Pattern Analysis</h1>
                        <p>Advanced analysis of discovered patterns</p>
                    </div>
                    
                    <div class="navigation">
                        <a href="{{ url_for('index') }}">Dashboard</a> |
                        <a href="{{ url_for('patterns') }}">Pattern Discovery</a> |
                        <a href="{{ url_for('exploration_paths') }}">Exploration Paths</a> |
                        <a href="{{ url_for('guidance') }}">Guidance</a>
                    </div>
                    
                    <div class="card">
                        <h2>Pattern Analysis Results</h2>
                        <p>Found {{ patterns|length }} patterns in your data.</p>
                        
                        <h3>Pattern Types:</h3>
                        <ul>
                            {% for pattern in patterns %}
                            <li><strong>{{ pattern.type }}:</strong> {{ pattern.description }}</li>
                            {% endfor %}
                        </ul>
                    </div>
                </div>
            </body>
            </html>
        ''', patterns=patterns)
        
    except Exception as e:
        flash(f"Error analyzing patterns: {str(e)}", "error")
        return redirect(url_for('index'))

@app.route('/labels/<label>')
@login_required
def list_nodes(label):
    """
    List all nodes with a specific label (Anchor pattern).
    """
    log_activity('list_nodes', {'label': label})
    
    try:
        nodes = middleware.get_nodes_by_label(label)
        
        return render_template_string('''
            <!DOCTYPE html>
            <html>
            <head>
                <title>{{ label }} Nodes - Compass</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                    .container { max-width: 1200px; margin: 0 auto; }
                    .header { background: #1e3a8a; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                    .card { background: white; border: 1px solid #ddd; padding: 20px; margin: 10px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                    .navigation { background: #f8f9fa; padding: 15px; margin-bottom: 20px; border-radius: 8px; }
                    .navigation a { margin-right: 15px; text-decoration: none; color: #1e3a8a; font-weight: bold; }
                    .btn { display: inline-block; padding: 10px 20px; background: #1e3a8a; color: white; text-decoration: none; border-radius: 5px; margin: 5px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>{{ label }} Nodes</h1>
                        <p>Anchor pattern: Exploring all instances of this type</p>
                    </div>
                    
                    <div class="navigation">
                        <a href="{{ url_for('index') }}">Dashboard</a> |
                        <a href="{{ url_for('patterns') }}">Pattern Discovery</a> |
                        <a href="{{ url_for('exploration_paths') }}">Exploration Paths</a> |
                        <a href="{{ url_for('guidance') }}">Guidance</a>
                    </div>
                    
                    <div class="card">
                        <h2>Found {{ nodes|length }} nodes with label "{{ label }}"</h2>
                        
                        {% if nodes %}
                        <ul>
                            {% for node in nodes[:20] %}
                            <li>
                                <a href="{{ url_for('view_node', label=label, node_id=node.uuid) }}" class="btn">
                                    {{ get_node_display_name(node) }}
                                </a>
                            </li>
                            {% endfor %}
                        </ul>
                        
                        {% if nodes|length > 20 %}
                        <p><em>Showing first 20 nodes. Use pattern discovery to find interesting starting points.</em></p>
                        {% endif %}
                        {% else %}
                        <p>No nodes found with this label.</p>
                        {% endif %}
                    </div>
                </div>
            </body>
            </html>
        ''', label=label, nodes=nodes, get_node_display_name=get_node_display_name)
        
    except Exception as e:
        flash(f"Error listing nodes: {str(e)}", "error")
        return redirect(url_for('index'))

if __name__ == '__main__':
    print("🧭 Compass - Pattern Discovery and Guidance Tool")
    print("Starting Compass on http://localhost:5000")
    print("Navigate your graph data with intelligent pattern discovery and guided exploration")
    app.run(debug=True, host='0.0.0.0', port=5000) 