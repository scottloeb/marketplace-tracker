"""
Helper functions for the G.A.R.D.E.N. Explorer application.

This module provides utilities for handling data formatting,
creating mock data for testing, and other common operations.
"""

import random
from datetime import datetime

def create_mock_middleware():
    """
    Create a mock middleware for demonstration purposes.
    
    This function is used when the real middleware generated by the Module Generator
    is not available. It creates a simplified mock that mimics the structure and
    functionality of the real middleware, using the movie graph schema.
    
    Returns:
        An object that mimics the middleware interface
    """
    class MockNodes:
        """Mock implementation of the nodes interface."""
        
        def movie(self, uuid=None, **props):
            """Get movie nodes."""
            movies = [
                {
                    'uuid': '123movie1',
                    'labels': ['Movie'],
                    'props': {
                        'title': 'Inception',
                        'released': 2010,
                        'tagline': 'Your mind is the scene of the crime'
                    }
                },
                {
                    'uuid': '123movie2',
                    'labels': ['Movie'],
                    'props': {
                        'title': 'The Matrix',
                        'released': 1999,
                        'tagline': 'Welcome to the Real World'
                    }
                },
                {
                    'uuid': '123movie3',
                    'labels': ['Movie'],
                    'props': {
                        'title': 'The Dark Knight',
                        'released': 2008,
                        'tagline': 'Why So Serious?'
                    }
                }
            ]
            
            if uuid:
                return [m for m in movies if m['uuid'] == uuid]
            
            # Filter by other properties if provided
            result = movies
            for key, value in props.items():
                result = [m for m in result if m['props'].get(key) == value]
            
            return result
        
        def person(self, uuid=None, **props):
            """Get person nodes."""
            people = [
                {
                    'uuid': '123person1',
                    'labels': ['Person'],
                    'props': {
                        'name': 'Leonardo DiCaprio',
                        'born': 1974
                    }
                },
                {
                    'uuid': '123person2',
                    'labels': ['Person'],
                    'props': {
                        'name': 'Christopher Nolan',
                        'born': 1970
                    }
                },
                {
                    'uuid': '123person3',
                    'labels': ['Person'],
                    'props': {
                        'name': 'Keanu Reeves',
                        'born': 1964
                    }
                }
            ]
            
            if uuid:
                return [p for p in people if p['uuid'] == uuid]
            
            # Filter by other properties if provided
            result = people
            for key, value in props.items():
                result = [p for p in result if p['props'].get(key) == value]
            
            return result
        
        def studio(self, uuid=None, **props):
            """Get studio nodes."""
            studios = [
                {
                    'uuid': '123studio1',
                    'labels': ['Studio'],
                    'props': {
                        'name': 'Warner Bros. Pictures',
                        'founded': 1923
                    }
                },
                {
                    'uuid': '123studio2',
                    'labels': ['Studio'],
                    'props': {
                        'name': 'Paramount Pictures',
                        'founded': 1912
                    }
                }
            ]
            
            if uuid:
                return [s for s in studios if s['uuid'] == uuid]
            
            # Filter by other properties if provided
            result = studios
            for key, value in props.items():
                result = [s for s in result if s['props'].get(key) == value]
            
            return result
    
    class MockEdges:
        """Mock implementation of the edges interface."""
        
        def acted_in(self, uuid=None, start_node_uuid=None, end_node_uuid=None, **props):
            """Get ACTED_IN relationships."""
            relationships = [
                (
                    {
                        'uuid': '123person1',
                        'labels': ['Person'],
                        'props': {
                            'name': 'Leonardo DiCaprio',
                            'born': 1974
                        }
                    },
                    {
                        'uuid': '123rel1',
                        'relType': 'ACTED_IN',
                        'props': {
                            'roles': ['Dom Cobb']
                        }
                    },
                    {
                        'uuid': '123movie1',
                        'labels': ['Movie'],
                        'props': {
                            'title': 'Inception',
                            'released': 2010,
                            'tagline': 'Your mind is the scene of the crime'
                        }
                    }
                ),
                (
                    {
                        'uuid': '123person3',
                        'labels': ['Person'],
                        'props': {
                            'name': 'Keanu Reeves',
                            'born': 1964
                        }
                    },
                    {
                        'uuid': '123rel2',
                        'relType': 'ACTED_IN',
                        'props': {
                            'roles': ['Neo']
                        }
                    },
                    {
                        'uuid': '123movie2',
                        'labels': ['Movie'],
                        'props': {
                            'title': 'The Matrix',
                            'released': 1999,
                            'tagline': 'Welcome to the Real World'
                        }
                    }
                )
            ]
            
            # Filter by node UUIDs if provided
            result = relationships
            if start_node_uuid:
                result = [r for r in result if r[0]['uuid'] == start_node_uuid]
            if end_node_uuid:
                result = [r for r in result if r[2]['uuid'] == end_node_uuid]
                
            return result
        
        def directed(self, uuid=None, start_node_uuid=None, end_node_uuid=None, **props):
            """Get DIRECTED relationships."""
            relationships = [
                (
                    {
                        'uuid': '123person2',
                        'labels': ['Person'],
                        'props': {
                            'name': 'Christopher Nolan',
                            'born': 1970
                        }
                    },
                    {
                        'uuid': '123rel3',
                        'relType': 'DIRECTED',
                        'props': {
                            'year': 2010
                        }
                    },
                    {
                        'uuid': '123movie1',
                        'labels': ['Movie'],
                        'props': {
                            'title': 'Inception',
                            'released': 2010,
                            'tagline': 'Your mind is the scene of the crime'
                        }
                    }
                ),
                (
                    {
                        'uuid': '123person2',
                        'labels': ['Person'],
                        'props': {
                            'name': 'Christopher Nolan',
                            'born': 1970
                        }
                    },
                    {
                        'uuid': '123rel4',
                        'relType': 'DIRECTED',
                        'props': {
                            'year': 2008
                        }
                    },
                    {
                        'uuid': '123movie3',
                        'labels': ['Movie'],
                        'props': {
                            'title': 'The Dark Knight',
                            'released': 2008,
                            'tagline': 'Why So Serious?'
                        }
                    }
                )
            ]
            
            # Filter by node UUIDs if provided
            result = relationships
            if start_node_uuid:
                result = [r for r in result if r[0]['uuid'] == start_node_uuid]
            if end_node_uuid:
                result = [r for r in result if r[2]['uuid'] == end_node_uuid]
                
            return result
        
        def produced(self, uuid=None, start_node_uuid=None, end_node_uuid=None, **props):
            """Get PRODUCED relationships."""
            relationships = [
                (
                    {
                        'uuid': '123studio1',
                        'labels': ['Studio'],
                        'props': {
                            'name': 'Warner Bros. Pictures',
                            'founded': 1923
                        }
                    },
                    {
                        'uuid': '123rel5',
                        'relType': 'PRODUCED',
                        'props': {
                            'year': 2010
                        }
                    },
                    {
                        'uuid': '123movie1',
                        'labels': ['Movie'],
                        'props': {
                            'title': 'Inception',
                            'released': 2010,
                            'tagline': 'Your mind is the scene of the crime'
                        }
                    }
                )
            ]
            
            # Filter by node UUIDs if provided
            result = relationships
            if start_node_uuid:
                result = [r for r in result if r[0]['uuid'] == start_node_uuid]
            if end_node_uuid:
                result = [r for r in result if r[2]['uuid'] == end_node_uuid]
                
            return result
    
    class MockMiddleware:
        """Mock middleware that mimics the structure of the real middleware."""
        
        def __init__(self):
            self.nodes = MockNodes()
            self.edges = MockEdges()
            self.METADATA = {
                'node_labels': ['Movie', 'Person', 'Studio'],
                'edge_types': ['ACTED_IN', 'DIRECTED', 'PRODUCED'],
                'node_properties': {
                    'Movie': {
                        'title': 'STRING',
                        'released': 'INTEGER',
                        'tagline': 'STRING'
                    },
                    'Person': {
                        'name': 'STRING',
                        'born': 'INTEGER'
                    },
                    'Studio': {
                        'name': 'STRING',
                        'founded': 'INTEGER'
                    }
                },
                'edge_properties': {
                    'ACTED_IN': {
                        'roles': 'LIST'
                    },
                    'DIRECTED': {
                        'year': 'INTEGER'
                    },
                    'PRODUCED': {
                        'year': 'INTEGER'
                    }
                }
            }
        
        def execute_query(self, query, params=None):
            """Mock query execution."""
            # This would normally run a Cypher query
            return []
    
    return MockMiddleware()

def format_datetime(dt):
    """Format a datetime object for display."""
    if isinstance(dt, datetime):
        return dt.strftime('%Y-%m-%d %H:%M:%S')
    return str(dt)

def format_list(lst, max_items=3):
    """Format a list for display, showing only a few items if the list is long."""
    if not lst:
        return "[]"
    
    if len(lst) <= max_items:
        return str(lst)
    
    return f"[{', '.join(str(item) for item in lst[:max_items])}, ... and {len(lst) - max_items} more]"